package org.knime.svn;

import org.knime.core.node.InvalidSettingsException;
import org.knime.core.node.NodeSettingsRO;
import org.knime.core.node.NodeSettingsWO;
import org.knime.core.node.defaultnodesettings.SettingsModelString;

/*
 ImpressiveCode Depress Framework
 Copyright (C) 2013  ImpressiveCode contributors

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public class SVNPluginSettings {

	public final static SettingsModelString XML_PATH_MODEL = new SettingsModelString(
			SVNPluginSettings.CFG_XML_LOG_PATH, SVNPluginSettings.DEFAULT_PATH);

	public final static SettingsModelString m_column = new SettingsModelString(
			SVNPluginSettings.CFGKEY_COLUMN_NAME, "");

	public static final String CFG_XML_LOG_PATH = "xmlLogPath";

	public static final String DEFAULT_PATH = "D:\\Git\\Knime\\SVNLog\\Log.xml";

	public static final String CFGKEY_COLUMN_NAME = "column";

	public static void validateSettings(final NodeSettingsRO settings) {
		try {
			XML_PATH_MODEL.validateSettings(settings);
			m_column.validateSettings(settings);
		} catch (InvalidSettingsException e) {
			SVNPluginLogger.instance().error("validateSettings", e);
		}
	}

	public static void saveSettingsTo(final NodeSettingsWO settings) {
		XML_PATH_MODEL.saveSettingsTo(settings);
		m_column.saveSettingsTo(settings);
	}

	public static void loadSettingsFrom(final NodeSettingsRO settings) {

		try {
			XML_PATH_MODEL.loadSettingsFrom(settings);
			m_column.loadSettingsFrom(settings);
		} catch (InvalidSettingsException e) {
			SVNPluginLogger.instance().error("loadSettingsFrom", e);
		}
	}
}
