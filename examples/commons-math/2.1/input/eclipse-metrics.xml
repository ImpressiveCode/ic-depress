<?xml version="1.0" encoding="UTF-8"?>
<Metrics scope="java" type="PackageRoot" date="2013-04-24" xmlns="http://metrics.sourceforge.net/2003/Metrics-First-Flat">
   <Cycle name="org.apache.commons.math.linear et al" nodes="5" diameter="3">
      <Package>org.apache.commons.math.linear</Package>
      <Package>org.apache.commons.math.fraction</Package>
      <Package>org.apache.commons.math.util</Package>
      <Package>org.apache.commons.math</Package>
      <Package>org.apache.commons.math.analysis</Package>
   </Cycle>
   <Cycle name="org.apache.commons.math.stat.descriptive et al" nodes="4" diameter="2">
      <Package>org.apache.commons.math.stat.descriptive</Package>
      <Package>org.apache.commons.math.stat.descriptive.summary</Package>
      <Package>org.apache.commons.math.stat.descriptive.rank</Package>
      <Package>org.apache.commons.math.stat.descriptive.moment</Package>
   </Cycle>
   <Cycle name="org.apache.commons.math.analysis.interpolation et al" nodes="2" diameter="1">
      <Package>org.apache.commons.math.analysis.interpolation</Package>
      <Package>org.apache.commons.math.analysis.polynomials</Package>
   </Cycle>
   <Cycle name="org.apache.commons.math.ode.events et al" nodes="4" diameter="2">
      <Package>org.apache.commons.math.ode.events</Package>
      <Package>org.apache.commons.math.ode.sampling</Package>
      <Package>org.apache.commons.math.ode.nonstiff</Package>
      <Package>org.apache.commons.math.ode</Package>
   </Cycle>
   <Metric id = "NORM" description ="Number of Overridden Methods">
      <Values per = "type" total = "320" avg = "0,944" stddev = "4,276" max = "60">
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="60"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="29"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="27"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="9"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "NOF" description ="Number of Attributes">
      <Values per = "type" total = "834" avg = "2,46" stddev = "3,148" max = "19">
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="19"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="18"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="17"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="16"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="13"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="12"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="12"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="10"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="10"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="10"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="10"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="9"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="9"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="9"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="9"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="9"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="9"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="8"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="8"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="8"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="8"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="7"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="7"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="7"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="7"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="7"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="6"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="6"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="6"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="5"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="5"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="5"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="5"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="4"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="4"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="4"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="3"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="3"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="2"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "NSC" description ="Number of Children">
      <Values per = "type" total = "249" avg = "0,735" stddev = "2,703" max = "38">
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="38"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="13"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="10"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="8"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="7"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="6"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="4"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "NOC" description ="Number of Classes">
      <Values per = "packageFragment" total = "339" avg = "8,921" stddev = "8,333" max = "48">
         <Value name="org.apache.commons.math.linear" package ="org.apache.commons.math.linear" value ="48"/>
         <Value name="org.apache.commons.math.ode.nonstiff" package ="org.apache.commons.math.ode.nonstiff" value ="27"/>
         <Value name="org.apache.commons.math.distribution" package ="org.apache.commons.math.distribution" value ="18"/>
         <Value name="org.apache.commons.math.random" package ="org.apache.commons.math.random" value ="17"/>
         <Value name="org.apache.commons.math.genetics" package ="org.apache.commons.math.genetics" value ="14"/>
         <Value name="org.apache.commons.math.stat.descriptive.moment" package ="org.apache.commons.math.stat.descriptive.moment" value ="13"/>
         <Value name="org.apache.commons.math.util" package ="org.apache.commons.math.util" value ="13"/>
         <Value name="org.apache.commons.math" package ="org.apache.commons.math" value ="12"/>
         <Value name="org.apache.commons.math.analysis.solvers" package ="org.apache.commons.math.analysis.solvers" value ="12"/>
         <Value name="org.apache.commons.math.fraction" package ="org.apache.commons.math.fraction" value ="12"/>
         <Value name="org.apache.commons.math.optimization" package ="org.apache.commons.math.optimization" value ="12"/>
         <Value name="org.apache.commons.math.stat.descriptive" package ="org.apache.commons.math.stat.descriptive" value ="11"/>
         <Value name="org.apache.commons.math.analysis.interpolation" package ="org.apache.commons.math.analysis.interpolation" value ="10"/>
         <Value name="org.apache.commons.math.ode" package ="org.apache.commons.math.ode" value ="10"/>
         <Value name="org.apache.commons.math.optimization.fitting" package ="org.apache.commons.math.optimization.fitting" value ="9"/>
         <Value name="org.apache.commons.math.estimation" package ="org.apache.commons.math.estimation" value ="7"/>
         <Value name="org.apache.commons.math.optimization.general" package ="org.apache.commons.math.optimization.general" value ="7"/>
         <Value name="org.apache.commons.math.optimization.linear" package ="org.apache.commons.math.optimization.linear" value ="7"/>
         <Value name="org.apache.commons.math.geometry" package ="org.apache.commons.math.geometry" value ="6"/>
         <Value name="org.apache.commons.math.ode.jacobians" package ="org.apache.commons.math.ode.jacobians" value ="6"/>
         <Value name="org.apache.commons.math.ode.sampling" package ="org.apache.commons.math.ode.sampling" value ="6"/>
         <Value name="org.apache.commons.math.transform" package ="org.apache.commons.math.transform" value ="6"/>
         <Value name="org.apache.commons.math.analysis.integration" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="org.apache.commons.math.analysis.polynomials" package ="org.apache.commons.math.analysis.polynomials" value ="5"/>
         <Value name="org.apache.commons.math.complex" package ="org.apache.commons.math.complex" value ="5"/>
         <Value name="org.apache.commons.math.stat.inference" package ="org.apache.commons.math.stat.inference" value ="5"/>
         <Value name="org.apache.commons.math.stat.descriptive.rank" package ="org.apache.commons.math.stat.descriptive.rank" value ="4"/>
         <Value name="org.apache.commons.math.stat.descriptive.summary" package ="org.apache.commons.math.stat.descriptive.summary" value ="4"/>
         <Value name="org.apache.commons.math.stat.regression" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="org.apache.commons.math.ode.events" package ="org.apache.commons.math.ode.events" value ="3"/>
         <Value name="org.apache.commons.math.optimization.direct" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="org.apache.commons.math.special" package ="org.apache.commons.math.special" value ="3"/>
         <Value name="org.apache.commons.math.stat" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="org.apache.commons.math.stat.clustering" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="org.apache.commons.math.stat.correlation" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="org.apache.commons.math.analysis" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="org.apache.commons.math.optimization.univariate" package ="org.apache.commons.math.optimization.univariate" value ="2"/>
         <Value name="org.apache.commons.math.stat.ranking" package ="org.apache.commons.math.stat.ranking" value ="2"/>
      </Values>
   </Metric>
   <Metric id = "MLOC" description ="Method Lines of Code">
      <Values per = "method" total = "32724" avg = "8,678" stddev = "13,442" max = "322">
         <Value name="integrate" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="322"/>
         <Value name="estimate" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="189"/>
         <Value name="doOptimize" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="163"/>
         <Value name="findEigenVectors" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="136"/>
         <Value name="getAngles" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="133"/>
         <Value name="integrate" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="126"/>
         <Value name="determineLMParameter" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="121"/>
         <Value name="determineLMParameter" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="115"/>
         <Value name="integrate" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="113"/>
         <Value name="localMin" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="111"/>
         <Value name="integrate" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="109"/>
         <Value name="smooth" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="102"/>
         <Value name="nextPoisson" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="102"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="88"/>
         <Value name="integrate" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="88"/>
         <Value name="roundUnscaled" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="88"/>
         <Value name="doOptimize" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="78"/>
         <Value name="interpolate" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="76"/>
         <Value name="getSubMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="76"/>
         <Value name="getSubMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="76"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="73"/>
         <Value name="iterateSimplex" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="72"/>
         <Value name="evaluateStep" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="71"/>
         <Value name="optimize" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="71"/>
         <Value name="determineLMDirection" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="69"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="68"/>
         <Value name="determineLMDirection" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="68"/>
         <Value name="orthogonalizeMatrix" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="66"/>
         <Value name="parse" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="65"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="65"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="62"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="62"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="61"/>
         <Value name="parse" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="60"/>
         <Value name="setInterpolatedTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="60"/>
         <Value name="decompose" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="60"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="59"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="59"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="59"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="59"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="57"/>
         <Value name="luDecompose" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="57"/>
         <Value name="setSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="57"/>
         <Value name="qrDecomposition" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="56"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="55"/>
         <Value name="toBlocksLayout" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="55"/>
         <Value name="copy" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="54"/>
         <Value name="solve2" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="53"/>
         <Value name="estimate" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="53"/>
         <Value name="qrDecomposition" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="53"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="52"/>
         <Value name="toBlocksLayout" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="52"/>
         <Value name="serializeRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="52"/>
         <Value name="chiSquareDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="52"/>
         <Value name="interpolate" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="51"/>
         <Value name="transformToLowerBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="51"/>
         <Value name="fft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="51"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="50"/>
         <Value name="transformToUpperBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="50"/>
         <Value name="optimize" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="49"/>
         <Value name="nextSecureHexString" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="49"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="49"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="49"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="48"/>
         <Value name="serializeRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="48"/>
         <Value name="integrate" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="48"/>
         <Value name="multiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="47"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="47"/>
         <Value name="chiSquare" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="47"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="47"/>
         <Value name="rank" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="47"/>
         <Value name="bracket" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="46"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="46"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="46"/>
         <Value name="doOptimize" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="46"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="45"/>
         <Value name="multiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="45"/>
         <Value name="deserializeRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="45"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="45"/>
         <Value name="resolveTie" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="45"/>
         <Value name="preMultiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="44"/>
         <Value name="transform" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="44"/>
         <Value name="multiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="43"/>
         <Value name="initializeStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="43"/>
         <Value name="optimize" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="43"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="42"/>
         <Value name="parse" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="42"/>
         <Value name="multiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="42"/>
         <Value name="preMultiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="42"/>
         <Value name="createTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="42"/>
         <Value name="anovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="42"/>
         <Value name="parse" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="41"/>
         <Value name="setSubMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="41"/>
         <Value name="setSubMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="41"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="41"/>
         <Value name="deserializeRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="41"/>
         <Value name="optimize" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="41"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="41"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="41"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="41"/>
         <Value name="divide" source ="Complex.java" package ="org.apache.commons.math.complex" value ="40"/>
         <Value name="tryStep" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="40"/>
         <Value name="optimize" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="40"/>
         <Value name="gcd" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="40"/>
         <Value name="gcd" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="40"/>
         <Value name="computeCoefficients" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="39"/>
         <Value name="inverseCumulativeProbability" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="39"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="39"/>
         <Value name="operate" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="39"/>
         <Value name="parse" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="39"/>
         <Value name="computeDerivatives" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="39"/>
         <Value name="aggregate" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="39"/>
         <Value name="nthRoot" source ="Complex.java" package ="org.apache.commons.math.complex" value ="38"/>
         <Value name="equals" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="38"/>
         <Value name="computeCoefficients" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="38"/>
         <Value name="operate" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="37"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="37"/>
         <Value name="equals" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="37"/>
         <Value name="evaluateStep" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="37"/>
         <Value name="guessAOmega" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="37"/>
         <Value name="evaluate" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="37"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="37"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="37"/>
         <Value name="evaluate" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="36"/>
         <Value name="sqrt" source ="Complex.java" package ="org.apache.commons.math.complex" value ="36"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="36"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="36"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="36"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="36"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="36"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="36"/>
         <Value name="integrate" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="35"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="35"/>
         <Value name="setSubMatrix" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="35"/>
         <Value name="finalizeStep" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="35"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="35"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="35"/>
         <Value name="computeOmega" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="35"/>
         <Value name="findInsertionIndex" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="35"/>
         <Value name="findInsertionIndex" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="35"/>
         <Value name="toString" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="34"/>
         <Value name="parse" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="34"/>
         <Value name="parse" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="34"/>
         <Value name="setSubMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="34"/>
         <Value name="setSubMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="34"/>
         <Value name="setStartConfiguration" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="34"/>
         <Value name="getPivotRow" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="34"/>
         <Value name="next" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="34"/>
         <Value name="nextHexString" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="34"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="34"/>
         <Value name="fct" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="34"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="33"/>
         <Value name="addSub" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="33"/>
         <Value name="nextGeneration" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="33"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="33"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="33"/>
         <Value name="evaluate" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="33"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="32"/>
         <Value name="doFinalize" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="32"/>
         <Value name="resetTables" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="32"/>
         <Value name="getOptima" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="32"/>
         <Value name="getOptima" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="32"/>
         <Value name="getOptima" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="32"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="32"/>
         <Value name="binomialCoefficient" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="32"/>
         <Value name="mulAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="32"/>
         <Value name="normalizeArray" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="32"/>
         <Value name="integrate" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="31"/>
         <Value name="format" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="31"/>
         <Value name="getU" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="31"/>
         <Value name="getV" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="31"/>
         <Value name="createBlocksLayout" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="31"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="31"/>
         <Value name="append" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="31"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="31"/>
         <Value name="iterateSimplex" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="31"/>
         <Value name="getOptima" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="31"/>
         <Value name="inverseCumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="30"/>
         <Value name="add" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="30"/>
         <Value name="subtract" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="30"/>
         <Value name="add" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="30"/>
         <Value name="subtract" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="30"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="30"/>
         <Value name="estimateError" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="30"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="30"/>
         <Value name="dropPhase1Objective" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="30"/>
         <Value name="test" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="30"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="30"/>
         <Value name="fst" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="30"/>
         <Value name="checkOrder" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="30"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="29"/>
         <Value name="format" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="29"/>
         <Value name="copySubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="29"/>
         <Value name="copySubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="29"/>
         <Value name="transpose" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="29"/>
         <Value name="transpose" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="29"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="29"/>
         <Value name="getQT" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="29"/>
         <Value name="readExternal" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="29"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="29"/>
         <Value name="mdfft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="29"/>
         <Value name="log" source ="Complex.java" package ="org.apache.commons.math.complex" value ="28"/>
         <Value name="format" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="28"/>
         <Value name="format" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="28"/>
         <Value name="setSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="setRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="setRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="28"/>
         <Value name="initializeArrays" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="28"/>
         <Value name="setPercentileImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="28"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="27"/>
         <Value name="solveAll" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="27"/>
         <Value name="multiply" source ="Complex.java" package ="org.apache.commons.math.complex" value ="27"/>
         <Value name="crossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="27"/>
         <Value name="setSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="27"/>
         <Value name="createBlocksLayout" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="27"/>
         <Value name="getQT" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="27"/>
         <Value name="computeJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="27"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="27"/>
         <Value name="readBaseExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="27"/>
         <Value name="nextUniform" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="27"/>
         <Value name="evaluate" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="27"/>
         <Value name="pairedTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="27"/>
         <Value name="nextAfter" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="27"/>
         <Value name="value" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="26"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="26"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="26"/>
         <Value name="tan" source ="Complex.java" package ="org.apache.commons.math.complex" value ="26"/>
         <Value name="tanh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="26"/>
         <Value name="format" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="26"/>
         <Value name="getRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="26"/>
         <Value name="setColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="26"/>
         <Value name="getRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="26"/>
         <Value name="setColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="26"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="26"/>
         <Value name="handleStep" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="26"/>
         <Value name="value" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="26"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="26"/>
         <Value name="fft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="26"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="25"/>
         <Value name="multiply" source ="Complex.java" package ="org.apache.commons.math.complex" value ="25"/>
         <Value name="format" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="25"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="25"/>
         <Value name="getSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="25"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="25"/>
         <Value name="regularizedGammaP" source ="Gamma.java" package ="org.apache.commons.math.special" value ="25"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="25"/>
         <Value name="pairedT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="25"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="24"/>
         <Value name="integrate" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="24"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="24"/>
         <Value name="exp" source ="Complex.java" package ="org.apache.commons.math.complex" value ="24"/>
         <Value name="polar2Complex" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="24"/>
         <Value name="inducedPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="24"/>
         <Value name="getMatrix" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="24"/>
         <Value name="getNorm" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="getColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="getData" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="getColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="getData" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="getNorm" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="multiply" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="24"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="24"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="24"/>
         <Value name="fit" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="24"/>
         <Value name="getOptimaValues" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="24"/>
         <Value name="chooseInitialCenters" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="24"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="24"/>
         <Value name="binomialCoefficientLog" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="24"/>
         <Value name="cos" source ="Complex.java" package ="org.apache.commons.math.complex" value ="23"/>
         <Value name="cosh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="23"/>
         <Value name="sin" source ="Complex.java" package ="org.apache.commons.math.complex" value ="23"/>
         <Value name="sinh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="23"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="23"/>
         <Value name="getReducedFraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="23"/>
         <Value name="tournament" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="23"/>
         <Value name="operate" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="operate" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="copyBlockPart" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="copyBlockPart" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="23"/>
         <Value name="handleStep" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="23"/>
         <Value name="optimize" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="23"/>
         <Value name="evaluate" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="23"/>
         <Value name="chiSquare" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="23"/>
         <Value name="fht" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="23"/>
         <Value name="fht" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="23"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="23"/>
         <Value name="equals" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="23"/>
         <Value name="integrate" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="22"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="22"/>
         <Value name="getCovariances" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="22"/>
         <Value name="equals" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="22"/>
         <Value name="setColumn" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="22"/>
         <Value name="setColumn" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="22"/>
         <Value name="multiply" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="22"/>
         <Value name="getCovariance" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="22"/>
         <Value name="reinitialize" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="22"/>
         <Value name="writeExternal" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="22"/>
         <Value name="getSolution" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="22"/>
         <Value name="regularizedGammaQ" source ="Gamma.java" package ="org.apache.commons.math.special" value ="22"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="22"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="22"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="22"/>
         <Value name="growTable" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="22"/>
         <Value name="growTable" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="22"/>
         <Value name="equals" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="22"/>
         <Value name="value" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="21"/>
         <Value name="bracket" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="21"/>
         <Value name="logBinomialProbability" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="21"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="21"/>
         <Value name="toString" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="21"/>
         <Value name="toString" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="21"/>
         <Value name="equals" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="21"/>
         <Value name="equals" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="21"/>
         <Value name="multiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="21"/>
         <Value name="operate" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="21"/>
         <Value name="setStartConfiguration" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="21"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="21"/>
         <Value name="fillBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="21"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="21"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="21"/>
         <Value name="clone" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="21"/>
         <Value name="mdfft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="21"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="21"/>
         <Value name="density" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="20"/>
         <Value name="getDeviancePart" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="20"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="20"/>
         <Value name="equals" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="equals" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="operate" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="operate" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="getSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="setRow" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="setRow" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="createColumnFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="createFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="createRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="createRowFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="hashCode" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="preMultiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="format" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="20"/>
         <Value name="setStepsizeControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="20"/>
         <Value name="readExternal" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="20"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="20"/>
         <Value name="writeBaseExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="20"/>
         <Value name="fit" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="20"/>
         <Value name="cluster" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="20"/>
         <Value name="evaluate" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="20"/>
         <Value name="getPercentile" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="20"/>
         <Value name="removeNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="20"/>
         <Value name="createParseException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="20"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="19"/>
         <Value name="computeUpToDegree" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="19"/>
         <Value name="abs" source ="Complex.java" package ="org.apache.commons.math.complex" value ="19"/>
         <Value name="getStirlingError" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="19"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="19"/>
         <Value name="format" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="19"/>
         <Value name="operate" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="operate" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="outerProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="preMultiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="preMultiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="equals" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="toString" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="createFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="format" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="19"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="19"/>
         <Value name="estimateError" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="19"/>
         <Value name="sortObservations" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="19"/>
         <Value name="getCovariances" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="19"/>
         <Value name="nextBytes" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="19"/>
         <Value name="getNearestCluster" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="19"/>
         <Value name="covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="19"/>
         <Value name="test" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="19"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="19"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="19"/>
         <Value name="put" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="19"/>
         <Value name="put" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="19"/>
         <Value name="checkContractExpand" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="19"/>
         <Value name="format" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="18"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="18"/>
         <Value name="format" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="18"/>
         <Value name="multiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="18"/>
         <Value name="multiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="18"/>
         <Value name="getB" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="18"/>
         <Value name="getColumnVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="18"/>
         <Value name="getColumn" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="18"/>
         <Value name="getColumnVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="18"/>
         <Value name="getColumn" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="18"/>
         <Value name="estimateError" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="18"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="18"/>
         <Value name="updateResidualsAndCost" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="18"/>
         <Value name="equals" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="18"/>
         <Value name="nextInt" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="18"/>
         <Value name="getNextValue" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="18"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="18"/>
         <Value name="getResult" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="18"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="18"/>
         <Value name="incrementAll" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="18"/>
         <Value name="anovaTest" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="18"/>
         <Value name="addData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="18"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="18"/>
         <Value name="set" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="18"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="18"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="18"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="18"/>
         <Value name="binomialCoefficientDouble" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="18"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="18"/>
         <Value name="createArithmeticException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="18"/>
         <Value name="createArrayIndexOutOfBoundsException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="18"/>
         <Value name="createConcurrentModificationException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="18"/>
         <Value name="createEOFException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="18"/>
         <Value name="createIllegalArgumentException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="18"/>
         <Value name="createIllegalStateException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="18"/>
         <Value name="createInternalError" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="18"/>
         <Value name="createNoSuchElementException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="18"/>
         <Value name="createNullPointerException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="18"/>
         <Value name="updateBandwidthInterval" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="17"/>
         <Value name="pow" source ="Complex.java" package ="org.apache.commons.math.complex" value ="17"/>
         <Value name="probability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="17"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="17"/>
         <Value name="format" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="17"/>
         <Value name="mutate" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="17"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="17"/>
         <Value name="copySubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="copySubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="iterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="multiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="multiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="multiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="getInverse" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="multiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="readExternal" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="17"/>
         <Value name="writeExternal" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="17"/>
         <Value name="sanityChecks" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="17"/>
         <Value name="guessPhi" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="17"/>
         <Value name="initializeColumnLabels" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="17"/>
         <Value name="converged" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="17"/>
         <Value name="converged" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="17"/>
         <Value name="nextBytes" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="17"/>
         <Value name="nextVector" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="17"/>
         <Value name="evaluate" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="17"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="17"/>
         <Value name="getResult" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="17"/>
         <Value name="equals" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="17"/>
         <Value name="setWindowSize" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="17"/>
         <Value name="getStandardDeviation" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="17"/>
         <Value name="getSumSquaredErrors" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="17"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="17"/>
         <Value name="containsKey" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="17"/>
         <Value name="get" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="17"/>
         <Value name="remove" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="17"/>
         <Value name="containsKey" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="17"/>
         <Value name="get" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="17"/>
         <Value name="remove" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="17"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="16"/>
         <Value name="value" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="16"/>
         <Value name="value" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="16"/>
         <Value name="computeDividedDifference" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="16"/>
         <Value name="interpolate" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="16"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="16"/>
         <Value name="parse" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="16"/>
         <Value name="getInitialDomain" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="16"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="16"/>
         <Value name="getInitialDomain" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="16"/>
         <Value name="cumulativeProbability" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="16"/>
         <Value name="qTy" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="16"/>
         <Value name="parse" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="16"/>
         <Value name="parse" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="16"/>
         <Value name="evolve" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="16"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="getFrobeniusNorm" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="add" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="operate" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="preMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="subtract" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="addToEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="getRowVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="getRow" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="multiplyEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="getRowVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="getRow" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="getSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="16"/>
         <Value name="filterStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="16"/>
         <Value name="locatePoint" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="16"/>
         <Value name="nextSample" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="16"/>
         <Value name="equals" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="16"/>
         <Value name="increment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="16"/>
         <Value name="equals" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="16"/>
         <Value name="addValue" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="16"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="16"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="16"/>
         <Value name="toString" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="16"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="16"/>
         <Value name="get" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="16"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="16"/>
         <Value name="stage" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="15"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="15"/>
         <Value name="searchIndex" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="15"/>
         <Value name="subtract" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="15"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="15"/>
         <Value name="combine" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="15"/>
         <Value name="conjugate" source ="Complex.java" package ="org.apache.commons.math.complex" value ="15"/>
         <Value name="getDomainLowerBound" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="15"/>
         <Value name="getDomainUpperBound" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="15"/>
         <Value name="getDomainUpperBound" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="15"/>
         <Value name="getDomainUpperBound" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="15"/>
         <Value name="getDomainLowerBound" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="15"/>
         <Value name="getDomainUpperBound" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="15"/>
         <Value name="equals" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="15"/>
         <Value name="decodeGeneric" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="15"/>
         <Value name="parse" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="15"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="setSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="getEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="setEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="addToEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="getEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="multiplyEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="setEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="createColumnRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="createRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="createRowRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="add" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="getSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="isInfinite" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="outerProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="parse" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="readExternal" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="15"/>
         <Value name="reinitialize" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="15"/>
         <Value name="readExternal" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="15"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="15"/>
         <Value name="buildSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="15"/>
         <Value name="nextGaussian" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="15"/>
         <Value name="nextPermutation" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="15"/>
         <Value name="getNext" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="15"/>
         <Value name="logGamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="15"/>
         <Value name="toString" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="15"/>
         <Value name="getCorrelationPValues" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="15"/>
         <Value name="getResult" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="15"/>
         <Value name="equals" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="15"/>
         <Value name="toString" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="15"/>
         <Value name="calculateHat" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="15"/>
         <Value name="removeData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="15"/>
         <Value name="compare" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="15"/>
         <Value name="varianceDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="15"/>
         <Value name="parseNumber" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="15"/>
         <Value name="parseNumber" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="15"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="15"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="15"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="15"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="15"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="15"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="15"/>
         <Value name="discardExtremeElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="15"/>
         <Value name="of" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="14"/>
         <Value name="postCompose" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="14"/>
         <Value name="subtract" source ="Complex.java" package ="org.apache.commons.math.complex" value ="14"/>
         <Value name="getInitialDomain" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="14"/>
         <Value name="getInitialDomain" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="14"/>
         <Value name="guessParametersErrors" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="14"/>
         <Value name="initializeEstimate" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="14"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="14"/>
         <Value name="parseNextCharacter" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="14"/>
         <Value name="parseNextBigInteger" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="14"/>
         <Value name="equals" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="14"/>
         <Value name="isSame" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="14"/>
         <Value name="nextGeneration" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="14"/>
         <Value name="angle" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="14"/>
         <Value name="setColumnMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="setRowMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="setColumnMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="setRowMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="add" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="subtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="setSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="isSymmetric" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="getL" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="getL" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="getR" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="dotProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="hashCode" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="getT" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="14"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="14"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="14"/>
         <Value name="setOrderControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="14"/>
         <Value name="rescale" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="14"/>
         <Value name="evaluateNewSimplex" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="14"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="14"/>
         <Value name="doIteration" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="14"/>
         <Value name="converged" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="14"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="14"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="14"/>
         <Value name="getResult" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="14"/>
         <Value name="incrementAll" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="14"/>
         <Value name="clear" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="14"/>
         <Value name="anovaFValue" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="14"/>
         <Value name="anovaPValue" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="14"/>
         <Value name="equals" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="14"/>
         <Value name="percentile" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="14"/>
         <Value name="sumLog" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="14"/>
         <Value name="parseNextCharacter" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="14"/>
         <Value name="advance" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="14"/>
         <Value name="advance" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="14"/>
         <Value name="substituteMostRecentElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="14"/>
         <Value name="computeCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="13"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="13"/>
         <Value name="getInitialDomain" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="13"/>
         <Value name="updateResidualsAndCost" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="13"/>
         <Value name="orthogonal" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="13"/>
         <Value name="getSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="getSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="getTrace" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="setColumnVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="setColumn" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="setRowVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="setRow" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="getSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="getSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="getTrace" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="setColumnVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="setColumn" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="setRowVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="setRow" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="next" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="add" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="subtract" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="add" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="subtract" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="add" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="hashCode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="subtract" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="scalarAdd" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="scalarMultiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="scalarAdd" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="scalarMultiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="getU" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="getU" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="addToEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="multiplyEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="getH" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="add" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="subtract" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="addToEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="multiplyEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="copy" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="13"/>
         <Value name="sanityChecks" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="13"/>
         <Value name="writeExternal" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="13"/>
         <Value name="jacobian" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="13"/>
         <Value name="updateJacobian" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="13"/>
         <Value name="optimize" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="13"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="13"/>
         <Value name="equals" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="13"/>
         <Value name="getAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="13"/>
         <Value name="getUpperBounds" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="13"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="13"/>
         <Value name="getNextReplay" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="13"/>
         <Value name="covarianceToCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="13"/>
         <Value name="getRankCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="13"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="13"/>
         <Value name="increment" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="13"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="13"/>
         <Value name="toString" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="addValue" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="setGeoMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="setMaxImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="setMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="setMinImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="setSumImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="setSumLogImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="setSumsqImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="equals" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="setSumLogImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="13"/>
         <Value name="geometricMean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="13"/>
         <Value name="mean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="13"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="13"/>
         <Value name="factorialLog" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="13"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="13"/>
         <Value name="copy" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="13"/>
         <Value name="add" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="12"/>
         <Value name="differentiate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="12"/>
         <Value name="buildPolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="12"/>
         <Value name="acos" source ="Complex.java" package ="org.apache.commons.math.complex" value ="12"/>
         <Value name="asin" source ="Complex.java" package ="org.apache.commons.math.complex" value ="12"/>
         <Value name="atan" source ="Complex.java" package ="org.apache.commons.math.complex" value ="12"/>
         <Value name="equals" source ="Complex.java" package ="org.apache.commons.math.complex" value ="12"/>
         <Value name="inverseCumulativeProbability" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="12"/>
         <Value name="cumulativeProbability" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="12"/>
         <Value name="inverseCumulativeProbability" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="12"/>
         <Value name="isSame" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="12"/>
         <Value name="select" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="12"/>
         <Value name="add" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="checkSubMatrixIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="checkSubMatrixIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="subtract" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="transpose" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="add" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="hashCode" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="subtract" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="transpose" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="getDeterminant" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="getDeterminant" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="getDeterminant" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="checkSubMatrixIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="checkSubMatrixIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="unitize" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="12"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="12"/>
         <Value name="writeExternal" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="12"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="12"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="12"/>
         <Value name="addEndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="12"/>
         <Value name="start" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="12"/>
         <Value name="guessParametersErrors" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="12"/>
         <Value name="value" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="12"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="12"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="12"/>
         <Value name="centroidOf" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="12"/>
         <Value name="assignPointsToClusters" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="12"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="12"/>
         <Value name="correlation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="12"/>
         <Value name="increment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="12"/>
         <Value name="setSumLogImpl" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="12"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="12"/>
         <Value name="increment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="12"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="12"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="12"/>
         <Value name="createContributingStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="copy" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="toString" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="setGeoMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="setMaxImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="setMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="setMinImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="setSumImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="setSumsqImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="setVarianceImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="checkArray" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="12"/>
         <Value name="newSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="12"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="12"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="12"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="12"/>
         <Value name="sample" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="12"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="12"/>
         <Value name="transform" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="12"/>
         <Value name="subAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="12"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="12"/>
         <Value name="setElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="12"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="12"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="12"/>
         <Value name="stage" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="11"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="11"/>
         <Value name="interpolate" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="11"/>
         <Value name="equals" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="11"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="11"/>
         <Value name="add" source ="Complex.java" package ="org.apache.commons.math.complex" value ="11"/>
         <Value name="sqrt1z" source ="Complex.java" package ="org.apache.commons.math.complex" value ="11"/>
         <Value name="checkedCumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="11"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="11"/>
         <Value name="cumulativeProbability" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="11"/>
         <Value name="cumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="11"/>
         <Value name="probability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="11"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="11"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="11"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="11"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="11"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="11"/>
         <Value name="multiply" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="11"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="11"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="hashCode" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="scalarAdd" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="scalarMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="scalarAdd" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="scalarMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="getDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="getMaxIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="getMinIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="scalarAdd" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="scalarMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="add" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="subtract" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="add" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="subtract" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="createBigIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="setEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="ebeDivide" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="ebeMultiply" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="addToEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="getEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="multiplyEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="setEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="setEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="ebeDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="11"/>
         <Value name="reset" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="11"/>
         <Value name="getInterpolatedDyDp" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="11"/>
         <Value name="getInterpolatedDyDpDot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="11"/>
         <Value name="writeExternal" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="11"/>
         <Value name="end" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="11"/>
         <Value name="buildP" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="11"/>
         <Value name="rescale" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="11"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="11"/>
         <Value name="qTy" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="11"/>
         <Value name="optimize" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="11"/>
         <Value name="equals" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="11"/>
         <Value name="doOptimize" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="11"/>
         <Value name="hashCode" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="11"/>
         <Value name="nextVector" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="11"/>
         <Value name="shuffle" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="11"/>
         <Value name="computeCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="11"/>
         <Value name="increment" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="11"/>
         <Value name="equals" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="11"/>
         <Value name="addValue" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="11"/>
         <Value name="clear" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="11"/>
         <Value name="hashCode" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="11"/>
         <Value name="estimateRegressionParametersStandardErrors" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="11"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="11"/>
         <Value name="percentile" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="11"/>
         <Value name="sumDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="11"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="11"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="11"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="11"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="11"/>
         <Value name="parseFixedstring" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="11"/>
         <Value name="compareTo" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="11"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="11"/>
         <Value name="getElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="11"/>
         <Value name="getValues" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="11"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="11"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="11"/>
         <Value name="computeSplineCoefficients" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="10"/>
         <Value name="smooth" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="10"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="10"/>
         <Value name="multiply" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="10"/>
         <Value name="createLaguerrePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="10"/>
         <Value name="createLegendrePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="10"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="10"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="10"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="10"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="10"/>
         <Value name="inverseCumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="10"/>
         <Value name="cumulativeProbability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="10"/>
         <Value name="inverseCumulativeProbability" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="10"/>
         <Value name="upperCumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="10"/>
         <Value name="probability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="10"/>
         <Value name="updateJacobian" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="10"/>
         <Value name="getDefaultNumberFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="10"/>
         <Value name="buildArray" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getColumnMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getColumn" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getData" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getRowMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getRow" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getColumnMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getColumn" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getData" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getRowMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getRow" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="dotProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getL1Distance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getL1Distance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getLInfDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getLInfDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getNorm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="mapAddToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="subtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="addToEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="multiplyEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="setEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="addToEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="multiplyEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="setEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="isSingular" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="transpose" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getFrobeniusNorm" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getV" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getVT" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getP" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getP" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="createFieldIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="createFieldVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="dotProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="ebeDivide" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="ebeMultiply" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getData" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="isNaN" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="dotProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="ebeDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="ebeMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="ebeMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="reset" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="10"/>
         <Value name="stepAccepted" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="10"/>
         <Value name="getInterpolatedDyDy0" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="10"/>
         <Value name="getInterpolatedDyDy0Dot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="10"/>
         <Value name="reinitialize" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="10"/>
         <Value name="reinitialize" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="10"/>
         <Value name="readExternal" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="10"/>
         <Value name="gradient" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="10"/>
         <Value name="findUpperBound" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="10"/>
         <Value name="getGeneratorUpperBounds" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="10"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="10"/>
         <Value name="nextExponential" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="10"/>
         <Value name="clear" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="10"/>
         <Value name="increment" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="10"/>
         <Value name="hashCode" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="10"/>
         <Value name="evaluate" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="10"/>
         <Value name="evaluate" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="10"/>
         <Value name="increment" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="10"/>
         <Value name="increment" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="10"/>
         <Value name="increment" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="10"/>
         <Value name="getSummary" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="10"/>
         <Value name="hashCode" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="10"/>
         <Value name="validateSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="10"/>
         <Value name="sumLog" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="10"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="10"/>
         <Value name="equals" source ="BigReal.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="equals" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="checkBinomial" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="factorial" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="lcm" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="lcm" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="addElementRolling" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="getInternalValues" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="setExpansionMode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="transform" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="10"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="10"/>
         <Value name="verifyIterationCount" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="9"/>
         <Value name="verifyIterationCount" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="9"/>
         <Value name="verifyIterationCount" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="9"/>
         <Value name="checkStrictlyIncreasing" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="9"/>
         <Value name="setBrightnessExponent" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="9"/>
         <Value name="setMicropshereElements" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="9"/>
         <Value name="nextIndex" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="9"/>
         <Value name="evaluate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="9"/>
         <Value name="verifyInputArray" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="9"/>
         <Value name="createHermitePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="9"/>
         <Value name="fix1stArgument" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="9"/>
         <Value name="fix2ndArgument" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="9"/>
         <Value name="add" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="9"/>
         <Value name="add" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="9"/>
         <Value name="divide" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="9"/>
         <Value name="multiply" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="9"/>
         <Value name="multiply" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="9"/>
         <Value name="subtract" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="9"/>
         <Value name="cumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="probability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="getDomainLowerBound" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="getDomainLowerBound" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="getDomainUpperBound" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="getDomainLowerBound" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="inverseCumulativeProbability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="getDomainLowerBound" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="getDomainUpperBound" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="getDomainLowerBound" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="getDomainUpperBound" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="9"/>
         <Value name="getPartial" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="9"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="9"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="9"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="9"/>
         <Value name="toString" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="9"/>
         <Value name="divide" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="9"/>
         <Value name="toString" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="9"/>
         <Value name="mutate" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="9"/>
         <Value name="checkValidity" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="9"/>
         <Value name="getAxis" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="9"/>
         <Value name="advance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="add" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="getL1Norm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="getLInfNorm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="add" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="multiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="subtract" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="add" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="multiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="subtract" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="isInfinite" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="setSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="getDataAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="getNorm" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="setColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="setColumnVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="setRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="setRowVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="setColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="setColumnVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="setRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="setRowVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="getInverse" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="createRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="add" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="add" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="subtract" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="subtract" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="add" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="add" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="multiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="subtract" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="getRank" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="getData" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="dispatchCompoundState" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="9"/>
         <Value name="getCurrentSignedStepsize" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="9"/>
         <Value name="getCurrentStepStart" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="9"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="addEventHandler" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="extrapolate" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="estimateError" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="getInterpolatedDerivatives" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="9"/>
         <Value name="getInterpolatedState" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="9"/>
         <Value name="getInterpolatedStateVariation" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="9"/>
         <Value name="handleStep" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="9"/>
         <Value name="replaceWorstPoint" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="9"/>
         <Value name="value" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="9"/>
         <Value name="gradient" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="9"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="9"/>
         <Value name="getPivotColumn" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="9"/>
         <Value name="solvePhase1" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="9"/>
         <Value name="getBasicRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="9"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="9"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="9"/>
         <Value name="converged" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="9"/>
         <Value name="getSampleStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="9"/>
         <Value name="getCorrelationStandardErrors" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="9"/>
         <Value name="correlation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="9"/>
         <Value name="getResult" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="9"/>
         <Value name="increment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="9"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="9"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="9"/>
         <Value name="getResult" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="9"/>
         <Value name="equals" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="9"/>
         <Value name="equals" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="9"/>
         <Value name="getMax" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="9"/>
         <Value name="getMin" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="9"/>
         <Value name="getStandardDeviation" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="9"/>
         <Value name="getVariance" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="9"/>
         <Value name="addValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="9"/>
         <Value name="getStandardDeviation" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="9"/>
         <Value name="getStandardDeviation" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="9"/>
         <Value name="checkNonNegative" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="9"/>
         <Value name="validateCovarianceData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="9"/>
         <Value name="geometricMean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="9"/>
         <Value name="mean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="9"/>
         <Value name="getOmegaImaginary" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="9"/>
         <Value name="getOmegaReal" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="9"/>
         <Value name="getDefaultNumberFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="factorialDouble" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="computeCapacity" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="computeCapacity" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="expand" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="hashCode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="setInitialCapacity" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="setNumElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="translate" source ="MathException.java" package ="org.apache.commons.math" value ="9"/>
         <Value name="translate" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="9"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="9"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="9"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="8"/>
         <Value name="previousIndex" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="8"/>
         <Value name="verifyInterpolationArray" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="8"/>
         <Value name="formatComplex" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="8"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="density" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="cumulativeProbability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="getDomainLowerBound" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="getDomainUpperBound" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="setNormalAndMeanInternal" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="getInitialDomain" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="getInitialDomain" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="8"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="8"/>
         <Value name="checkValidity" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="8"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="8"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="8"/>
         <Value name="applyInverseTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="8"/>
         <Value name="formatVector3D" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="8"/>
         <Value name="inverse" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="luDecompose" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="solve" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="solve" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="mapToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="toArray" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="mapInv" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="setSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getL1Norm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getLInfNorm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getNorm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="unitVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="unitize" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getTrace" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="copy" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="copy" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getDeterminant" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="bigFractionMatrixToRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="fractionMatrixToRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="dotProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="setEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="setSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="isNonSingular" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="formatRealVector" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="mapDivideToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="mapMultiplyToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getEventHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="8"/>
         <Value name="getStepHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="8"/>
         <Value name="visit" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="8"/>
         <Value name="getInstance" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="8"/>
         <Value name="updateHighOrderDerivativesPhase2" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="8"/>
         <Value name="setStabilityCheck" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="8"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="8"/>
         <Value name="evaluateSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="8"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="8"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="8"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="8"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="getBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="setSeed" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="resetReplayFile" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="logBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="8"/>
         <Value name="digamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="8"/>
         <Value name="trigamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="8"/>
         <Value name="hashCode" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="8"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="8"/>
         <Value name="clear" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="8"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="8"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="8"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="8"/>
         <Value name="increment" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="8"/>
         <Value name="increment" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="8"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="8"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="8"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="8"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="8"/>
         <Value name="evaluate" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="8"/>
         <Value name="getMean" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="8"/>
         <Value name="getN" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="8"/>
         <Value name="getSum" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="8"/>
         <Value name="append" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="8"/>
         <Value name="newSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="8"/>
         <Value name="hashCode" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="8"/>
         <Value name="clone" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="8"/>
         <Value name="formatDouble" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="scalb" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="key" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="value" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="key" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="value" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="addElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="hashCode" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="8"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="8"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="8"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="8"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="8"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="7"/>
         <Value name="hashCode" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="7"/>
         <Value name="evaluate" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="7"/>
         <Value name="createChebyshevPolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="7"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="solve2" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="verifyBracketing" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="setAlpha" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="setBeta" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="inverseCumulativeProbability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="inverseCumulativeProbability" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="cumulativeProbability" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="inverseCumulativeProbability" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="cumulativeProbability" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="inverseCumulativeProbability" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="inverseCumulativeProbability" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="cumulativeProbability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="inverseCumulativeProbability" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="cumulativeProbability" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="density" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="getChiSquare" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="7"/>
         <Value name="getRMS" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="7"/>
         <Value name="getUnboundParameters" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="7"/>
         <Value name="abs" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="abs" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="getGenerationsEvolved" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="7"/>
         <Value name="getFittestChromosome" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="7"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="7"/>
         <Value name="applyTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="7"/>
         <Value name="checkAdditionCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="checkSubtractionCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="extractField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="isSingular" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAbsToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAcosToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAsinToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAtanToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapCbrtToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapCeilToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapCosToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapCoshToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapDivideToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapExpToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapExpm1ToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapFloorToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapInvToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapLog10ToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapLog1pToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapLogToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapMultiplyToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapPowToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapRintToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSignumToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSinToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSinhToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSqrtToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapTanToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapTanhToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapUlpToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="setSubVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="set" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAdd" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapInvToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSubtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="setEntry" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAbsToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAcosToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAddToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAsinToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAtanToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapCbrtToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapCeilToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapCosToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapCoshToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapDivideToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapExpToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapExpm1ToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapFloorToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapInvToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapLog10ToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapLog1pToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapLogToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapMultiplyToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapPowToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapRintToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSignumToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSinToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSinhToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSqrtToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapSubtractToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapTanToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapTanhToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapUlpToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="setEntry" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="getColumnAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="getColumnMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="getColumn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="getEntry" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="getRowAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="checkAdditionCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="checkSubtractionCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="mapAddToSelf" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="setSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="stepAccepted" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="7"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="7"/>
         <Value name="initializeHighOrderDerivatives" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="7"/>
         <Value name="addEventHandler" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="7"/>
         <Value name="value" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="7"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="7"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="7"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="7"/>
         <Value name="getConstraintTypeCounts" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="7"/>
         <Value name="normalize" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="7"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="7"/>
         <Value name="nextGaussian" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="nextInt" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="nextLong" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="nextSecureInt" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="nextSecureLong" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="checkSufficientData" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="7"/>
         <Value name="checkSufficientData" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="7"/>
         <Value name="copy" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="clear" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="increment" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="clear" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="increment" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="clear" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="clear" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="copy" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="hashCode" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="7"/>
         <Value name="copy" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="7"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="7"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="7"/>
         <Value name="copy" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="7"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="7"/>
         <Value name="copy" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="7"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="7"/>
         <Value name="copy" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="7"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="7"/>
         <Value name="copy" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="7"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="7"/>
         <Value name="copy" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="7"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="7"/>
         <Value name="copy" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="7"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="7"/>
         <Value name="hashCode" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="7"/>
         <Value name="getSummary" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="7"/>
         <Value name="checkNonNegative" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="7"/>
         <Value name="checkPositive" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="7"/>
         <Value name="checkRectangular" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="7"/>
         <Value name="getNanPositions" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="7"/>
         <Value name="restoreNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="7"/>
         <Value name="getSlope" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="7"/>
         <Value name="getSlopeConfidenceInterval" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="7"/>
         <Value name="inversetransform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="7"/>
         <Value name="doRemove" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="7"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="7"/>
         <Value name="doRemove" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="7"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="7"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="7"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="7"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="7"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="7"/>
         <Value name="checkAllFiniteReal" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="6"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="6"/>
         <Value name="getCoefficients" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="6"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="6"/>
         <Value name="getCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="6"/>
         <Value name="isStrictlyIncreasing" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="6"/>
         <Value name="solveAll" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="6"/>
         <Value name="readResolve" source ="Complex.java" package ="org.apache.commons.math.complex" value ="6"/>
         <Value name="cumulativeProbability" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="probability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="setAlphaInternal" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="setBetaInternal" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="innerCumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="setStandardDeviationInternal" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="setNumberOfSuccessesInternal" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="setDegreesOfFreedomInternal" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="setScaleInternal" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="setShapeInternal" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="cumulativeProbability" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="setExponentInternal" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="setNumberOfElementsInternal" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6"/>
         <Value name="getDefaultNumberFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="6"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="6"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="6"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="6"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="6"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="6"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="6"/>
         <Value name="getDefaultNumberFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="6"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="6"/>
         <Value name="getAngle" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="6"/>
         <Value name="checkMultiplicationCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="checkVectorDimensions" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="copyOut" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="copyOut" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="mapAddToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="mapDivideToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="mapMultiplyToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="mapSubtractToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="isNaN" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="copyOut" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getRoundingMode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getL" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getLT" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="isNonSingular" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getD" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="checkMultiplicationCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="createFieldDiagonalMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="copy" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="setSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="set" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="unitVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getQ" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="copyOut" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getS" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getUT" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getVT" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="mapAddToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="mapInvToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="setSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="stop" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="6"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="6"/>
         <Value name="addStepHandler" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="setInterpolationControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="writeExternal" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="6"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="6"/>
         <Value name="requiresDenseOutput" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="6"/>
         <Value name="getInterpolatedState" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="6"/>
         <Value name="getInterpolatedTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="6"/>
         <Value name="value" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="6"/>
         <Value name="getChiSquare" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="6"/>
         <Value name="getRMS" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="6"/>
         <Value name="hashCode" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="6"/>
         <Value name="isOptimal" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="6"/>
         <Value name="optimize" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="6"/>
         <Value name="clear" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="6"/>
         <Value name="nextInt" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="6"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="6"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="6"/>
         <Value name="clear" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="clear" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="increment" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="clear" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="6"/>
         <Value name="clear" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="6"/>
         <Value name="clear" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="6"/>
         <Value name="clear" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="6"/>
         <Value name="clear" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="6"/>
         <Value name="increment" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="6"/>
         <Value name="clear" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="6"/>
         <Value name="getGeometricMean" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="getMax" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="getMean" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="getMin" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="getSum" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="getSumLog" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="getSumSq" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="addValue" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="setGeoMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="setMaxImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="setMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="setMinImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="setSumImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="setSumLogImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="setSumsqImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="chiSquareTestDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="6"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="6"/>
         <Value name="containsNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="6"/>
         <Value name="recodeNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="6"/>
         <Value name="estimateResiduals" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="6"/>
         <Value name="clear" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="6"/>
         <Value name="getR" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="6"/>
         <Value name="getSumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="6"/>
         <Value name="getRoundingMode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="getDefaultNumberFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="distance" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="distance" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="6"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="6"/>
         <Value name="integrate" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="integrate" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="integrate" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="integrate" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="getResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="verifyInterval" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="verifyIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="interpolate" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="5"/>
         <Value name="nextNonzero" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="5"/>
         <Value name="negate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="5"/>
         <Value name="value" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="5"/>
         <Value name="polynomialSplineDerivative" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="5"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="verifyInterval" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="verifySequence" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="hashCode" source ="Complex.java" package ="org.apache.commons.math.complex" value ="5"/>
         <Value name="getAvailableLocales" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="5"/>
         <Value name="setImaginaryCharacter" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="5"/>
         <Value name="setImaginaryFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="5"/>
         <Value name="setRealFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="5"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setNumberOfTrialsInternal" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setProbabilityOfSuccessInternal" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setScaleInternal" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="getDomainUpperBound" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="getInitialDomain" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setMeanInternal" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setDenominatorDegreesOfFreedomInternal" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setNumeratorDegreesOfFreedomInternal" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setNumberOfSuccessesInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setPopulationSizeInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setSampleSizeInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setProbabilityOfSuccessInternal" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="generalizedHarmonic" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="setDenominatorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="setNumeratorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="getAvailableLocales" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="negate" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="getAvailableLocales" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="setWholeFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="setWholeFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="toString" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="randomBinaryRepresentation" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="findSameChromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="toString" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="isSatisfied" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="toString" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="baseSequence" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="identityPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="randomPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="toString" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="applyInverseTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="5"/>
         <Value name="applyTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="5"/>
         <Value name="normalize" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="5"/>
         <Value name="getAvailableLocales" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="5"/>
         <Value name="getDeterminant" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="checkIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="setSubVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="unitVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="createMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="createMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="checkIndex" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="checkVectorDimensions" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="hashCode" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="checkVectorDimensions" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getRowMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getRow" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="operate" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="createMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="createMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getDeterminant" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="start" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="start" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="createRealDiagonalMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="createRealIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="createMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="projection" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="createMatrix" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getAvailableLocales" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="createMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="checkIndex" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="checkVectorDimensions" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="projection" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="set" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getEventsHandlers" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="5"/>
         <Value name="eventOccurred" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="g" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="resetState" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="getDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="getInterpolatedY" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="getInterpolatedYDot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="checkDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="initializeHighOrderDerivatives" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="setInitialStepSize" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="storeTime" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="storeTime" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="reinitialize" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="5"/>
         <Value name="reset" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="5"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="5"/>
         <Value name="computeDerivatives" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="5"/>
         <Value name="evaluate" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="5"/>
         <Value name="fit" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="5"/>
         <Value name="computeObjectiveValue" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="5"/>
         <Value name="setInitialStep" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="5"/>
         <Value name="getInvertedCoeffiecientSum" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="5"/>
         <Value name="normalizeConstraints" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="5"/>
         <Value name="computeObjectiveValue" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="5"/>
         <Value name="optimize" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="5"/>
         <Value name="optimize" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="5"/>
         <Value name="nextDouble" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="nextLong" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="getNatural" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="getRan" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="getSecRan" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="nextGaussian" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="nextVector" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="fill" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="getNextDigest" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="5"/>
         <Value name="getResult" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="getResult" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="checkEmpty" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="clear" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="increment" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="getResult" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="getResult" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="clear" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="getResult" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="increment" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="getResult" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="getResult" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="getResult" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="5"/>
         <Value name="getResult" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="5"/>
         <Value name="setQuantile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="5"/>
         <Value name="getResult" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="5"/>
         <Value name="getResult" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="5"/>
         <Value name="getResult" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="5"/>
         <Value name="evaluate" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="checkEmpty" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getResults" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="checkEmpty" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMean" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getVariance" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="addValue" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="apply" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="clear" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="copy" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getElement" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getN" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getStandardDeviation" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getValues" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getWindowSize" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setWindowSize" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="toString" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="clear" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="equals" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getCovariance" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getDimension" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getGeoMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getGeometricMean" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMax" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMaxImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMean" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMin" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMinImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getN" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getStandardDeviation" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSum" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSumImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSumLog" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSumLogImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSumSq" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSumsqImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="hashCode" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="toString" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="addValue" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="clear" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="copy" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="equals" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getGeoMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getGeometricMean" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMax" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMaxImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMean" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMin" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getMinImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getN" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getStandardDeviation" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSum" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSumImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSumLogImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSummary" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSumsq" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getSumsqImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getVariance" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="getVarianceImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="hashCode" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setGeoMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setMaxImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setMinImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setSumImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setSumLogImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setSumsqImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setVarianceImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="toString" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="checkSampleData" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="5"/>
         <Value name="checkSampleData" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="5"/>
         <Value name="checkSignificanceLevel" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="5"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="5"/>
         <Value name="estimateRegressionParameters" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="5"/>
         <Value name="calculateBeta" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="5"/>
         <Value name="newSampleData" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="5"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="5"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="5"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="5"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="5"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="5"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="5"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="isForward" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="verifyInterval" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="distance1" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="distance1" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="distanceInf" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="distanceInf" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="mulAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="subAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="shouldContract" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="printStackTrace" source ="MathException.java" package ="org.apache.commons.math" value ="5"/>
         <Value name="printStackTrace" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="5"/>
         <Value name="store" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="isRootOK" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="newBisectionSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="newBrentSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="newDefaultSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="newNewtonSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="newSecantSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="getFunctionValue" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="getResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="setResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="negate" source ="Complex.java" package ="org.apache.commons.math.complex" value ="4"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="4"/>
         <Value name="cumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="getDomainLowerBound" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="getDomainUpperBound" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="getInitialDomain" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="density" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="density" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="probability" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="4"/>
         <Value name="getReducedFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="getFitness" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="searchForFitnessUpdate" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="crossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="decode" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="distance1" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="distanceInf" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="distanceSq" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="distance" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="hashCode" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="buildArray" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="checkColumnIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="checkRowIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="extractField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRowVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRowVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="copy" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnDimension" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getData" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRowDimension" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="copy" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnDimension" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getData" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRowDimension" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="copy" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getData" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="hashCode" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="set" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="toArray" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="toString" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getLUMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnDimension" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRowDimension" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnDimension" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRowDimension" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="visit" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="visit" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getEigenvector" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getImagEigenvalue" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRealEigenvalue" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="visit" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="visit" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="checkColumnIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="checkRowIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="copy" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnDimension" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRowDimension" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getIndex" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="next" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="mapAdd" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="projection" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="sparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="toArray" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getInverse" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="copy" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnDimension" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getData" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRowDimension" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSolver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="copy" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnDimension" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getRowDimension" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getEntry" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="projection" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setEntry" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getQ" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="handleStep" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="addEventHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="start" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="getCurrentStepStart" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="doCopy" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="getOrder" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="doCopy" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="getOrder" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="doCopy" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="doCopy" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="doCopy" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="doCopy" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="getOrder" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="doCopy" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="doCopy" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="doCopy" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="copy" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="setInterpolatedTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="shift" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="storeTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="doCopy" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="reset" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="computeDerivatives" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="computeDerivatives" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="setLineSearchSolver" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="hashCode" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="4"/>
         <Value name="getFunctionValue" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="4"/>
         <Value name="getResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="4"/>
         <Value name="setResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="4"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="4"/>
         <Value name="next" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="reSeed" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="reSeedSecure" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="reSeedSecure" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="reSeed" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="closeReplayFile" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="computeDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="4"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="copy" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getN" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getN" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getN" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getN" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getN" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getN" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getN" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getN" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="4"/>
         <Value name="getN" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="4"/>
         <Value name="getN" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="4"/>
         <Value name="getN" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="4"/>
         <Value name="getN" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="4"/>
         <Value name="getN" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="4"/>
         <Value name="copy" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="4"/>
         <Value name="copy" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="4"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="fill" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="estimateRegressandVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="estimateRegressionParametersVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="getOmegaInverse" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="calculateBetaVariance" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="getMeanSquareError" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="getTotalSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="getXSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="setDistribution" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="scaleArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="scaleArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="verifyDataSet" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="verifyDataSet" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="inversetransform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="inversetransform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="transform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="hashCode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="hashCode" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="contract" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="getElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="setContractionCriteria" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="setExpansionFactor" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="getLocalizedMessage" source ="MathException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="getMessage" source ="MathException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="getLocalizedMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="getMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="getMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="resetMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="setMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="setResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="getInterpolatingPoints" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="getInterpolatingValues" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="getCenters" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="getNewtonCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="getKnots" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="getPolynomials" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="checkResultComputed" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="getFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="isBracketing" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="resetFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="setFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="setResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="setup" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="getField" source ="Complex.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="getOne" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="getZero" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="getAlpha" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="getBeta" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="recomputeZ" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="probability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="compareTo" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="getField" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="getOne" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="getZero" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="compareTo" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="getField" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="getOne" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="getZero" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="setElitismRate" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="comparatorPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="crossProduct" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="getField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isSquare" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isSquare" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="hasNext" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="remove" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="dotProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeDivide" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeMultiply" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getData" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapAbs" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapAcos" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapAdd" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapAsin" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapAtan" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapCbrt" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapCeil" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapCos" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapCosh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapDivide" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapExp" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapExpm1" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapFloor" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapInv" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapLog" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapLog10" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapLog1p" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapMultiply" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapPow" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapRint" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapSignum" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapSin" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapSinh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapSqrt" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapSubtractToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapSubtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapTan" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapTanh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapUlp" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="map" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="projection" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="sparseIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="unitize" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copy" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getData" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDimension" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getEntry" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getField" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="set" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="toArray" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDimension" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getEntry" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getPermutation" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getInverse" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isNonSingular" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSolver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="end" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="start" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="end" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="start" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="visit" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="end" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="start" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="end" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="start" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="visit" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getImagEigenvalues" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getRealEigenvalues" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSolver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="transformToTridiagonal" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isNonSingular" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getPivot" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSolver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getInverse" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isNonSingular" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getPivot" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSolver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="hasNext" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="remove" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDimension" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSolver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getConditionNumber" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getNorm" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSingularValues" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getU" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getV" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copy" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDimension" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getField" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapAdd" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapInv" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapSubtractToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapSubtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="toArray" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="3"/>
         <Value name="reinitializeBegin" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="3"/>
         <Value name="computeDerivatives" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="getDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="getParametersDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="requiresDenseOutput" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="reset" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="copyArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="getCurrentTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="getInterpolatedTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="getPreviousTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="isForward" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="readArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="readArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="setInterpolatedTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="writeArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="writeArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="addStepHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="getCurrentTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="getInterpolatedTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="getPreviousTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="isForward" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="eventOccurred" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="g" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="addStepHandler" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="clearEventHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="clearStepHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="getCurrentSignedStepsize" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="getCurrentStepStart" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="getEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="getEventHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="getMaxEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="getName" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="getStepHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="setMaxEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="getDimension" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="requiresDenseOutput" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="getConvergenceChecker" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="getEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="getIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="getMaxEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="getMaxIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="incrementIterationsCounter" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="setConvergenceChecker" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="setMaxEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="setMaxIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="guess" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="derivative" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="value" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="getConvergenceChecker" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getJacobianEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getMaxEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getMaxIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="incrementIterationsCounter" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="setConvergenceChecker" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="setMaxEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="setMaxIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getConvergenceChecker" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getGradientEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getMaxEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getMaxIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="incrementIterationsCounter" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="setConvergenceChecker" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="setMaxEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="setMaxIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="precondition" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="getIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="getMaxIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="incrementIterationsCounter" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="setMaxIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="divideRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="3"/>
         <Value name="checkResultComputed" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="3"/>
         <Value name="getEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="3"/>
         <Value name="getMaxEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="3"/>
         <Value name="setMaxEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="3"/>
         <Value name="getConvergenceChecker" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getGradientEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getMaxEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getMaxIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setConvergenceChecker" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setMaxEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setMaxIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getConvergenceChecker" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getJacobianEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getMaxEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getMaxIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setConvergenceChecker" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setMaxEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setMaxIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getConvergenceChecker" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getMaxEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getMaxIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setConvergenceChecker" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setMaxEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setMaxIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getFunctionValue" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getMaxEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="getResult" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="resetAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="resetMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="resetRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setMaxEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="nextBoolean" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="nextFloat" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="nextInt" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="findBin" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="setSeed" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="fill" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="distanceFrom" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="computeCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="rankTransform" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="copy" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="copy" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="clear" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="getGeometricMean" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getSecondMoment" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getSumOfLogs" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getSumsq" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="copy" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getSortedValues" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="checkDimension" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="setImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="copy" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="chiSquareTestDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="df" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="calculateBetaVariance" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="calculateYVariance" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="calculateYVariance" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="newSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="addData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="removeData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="inversetransform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="3"/>
         <Value name="transform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="3"/>
         <Value name="transform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="3"/>
         <Value name="add" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="compareTo" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="divide" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="getField" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="multiply" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="subtract" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="getOne" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="getZero" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="clear" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="copy" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="expandTo" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="getAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="getIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="getMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="getRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="resetAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="resetMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="resetRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="setAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="setMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="setRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="createIOException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="createIllegalArgumentException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="clearResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="tricube" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="reset" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="clearResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="getInstance" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="density" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="density" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="density" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="density" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="estimate" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parseAndIgnoreWhitespace" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="reduce" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="getMaxValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getMinValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addEventHandler" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="resetInternalState" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="reinitialize" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="resetState" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="reset" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="computeObjectiveGradient" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="readObject" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="writeObject" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="readObject" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="writeObject" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="readObject" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="subtractRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="writeObject" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="computeDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="2"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="copy" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="copy" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="copy" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="copy" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="copy" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="copy" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="pairedTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="calculateResiduals" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="newCovarianceData" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="newXSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getInterceptStdErr" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getRSquare" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getSignificance" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="predict" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="inversetransform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="transform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="transform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="inversetransform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="transform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="parseAndIgnoreWhitespace" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="hashOf" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="readObject" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="hashOf" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="readObject" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="illumination" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="normal" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="sample" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="cosAngle" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="interpolate" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="degree" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="derivative" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getCoefficients" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="polynomialDerivative" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="degree" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="degree" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="derivative" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getN" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="getPolynomialFunction" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newBisectionSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newBrentSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newDefaultSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newInstance" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newNewtonSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newSecantSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="isSequence" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="midpoint" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="value" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="value" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="createComplex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getArgument" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getImaginary" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getReal" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="isInfinite" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="isNaN" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getInstance" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="readResolve" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getImaginaryCharacter" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getImaginaryFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getInstance" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getRealFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="parseObject" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfTrials" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getProbabilityOfSuccess" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfTrials" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccess" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMedian" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getScale" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMedianInternal" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMedian" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScale" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDegreesOfFreedom" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedomInternal" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedom" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setGammaInternal" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setGamma" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMean" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDenominatorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumeratorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDenominatorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumeratorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getAlpha" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getBeta" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setAlpha" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setBeta" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getLowerDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfSuccesses" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getPopulationSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSampleSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getUpperDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccesses" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setPopulationSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setSampleSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMean" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getStandardDeviation" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMeanInternal" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setStandardDeviation" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfSuccesses" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getProbabilityOfSuccess" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccesses" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccess" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMean" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="normalApproximateProbability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNormal" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDegreesOfFreedom" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedom" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getScale" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getShape" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScale" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setShape" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getExponent" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfElements" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setExponent" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfElements" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getCostEvaluations" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getJacobianEvaluations" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="incrementJacobianEvaluationsCounter" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setMaxCostEval" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getEstimate" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getName" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="isBound" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setBound" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setEstimate" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setConvergence" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setSteadyStateThreshold" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setCostRelativeTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setInitialStepBoundFactor" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setOrthoTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setParRelativeTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="addMeasurement" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="addParameter" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getAllParameters" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getMeasurements" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getMeasuredValue" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getResidual" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getWeight" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="isIgnored" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setIgnored" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominatorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumeratorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="doubleValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="floatValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominator" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominatorAsInt" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominatorAsLong" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumerator" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumeratorAsInt" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumeratorAsLong" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="hashCode" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="intValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="longValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="negate" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="percentageValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="reciprocal" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getInstance" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="readResolve" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="formatBigFraction" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="doubleValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="floatValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominator" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumerator" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="hashCode" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="intValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="longValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="reciprocal" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getInstance" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="readResolve" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="formatFraction" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getWholeFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getWholeFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getLength" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getRepresentation" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="compareTo" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="isSame" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getFirst" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getSecond" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getElitismRate" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getNumGenerations" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getCrossoverPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getCrossoverRate" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getMutationPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getMutationRate" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getRandomGenerator" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getSelectionPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setRandomGenerator" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="addChromosome" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getChromosomes" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getPopulationLimit" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getPopulationSize" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="iterator" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setChromosomes" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setPopulationLimit" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getArity" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setArity" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distance" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ0" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ1" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ2" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ3" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="revert" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getA1" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getA2" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getA3" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="toString" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="add" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="add" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="dotProduct" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getAlpha" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getDelta" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNorm" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNorm1" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNormInf" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNormSq" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getX" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getY" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getZ" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="isInfinite" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="isNaN" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="negate" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="scalarMultiply" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="subtract" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="subtract" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="toString" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getInstance" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getInstance" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getPrefix" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getSeparator" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getSuffix" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="parseObject" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="addToEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiplyEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="addToEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiplyEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getHouseholderVectorsRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getMainDiagonalRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSecondaryDiagonalRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isUpperBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntryAsDouble" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getScale" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="inverse" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isSquare" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setRoundingMode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setScale" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockHeight" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockWidth" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockHeight" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockWidth" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getConvertedMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getConvertedMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="computeKey" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntries" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSparcity" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isDefaultValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInstance" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInstance" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getPrefix" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSeparator" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSuffix" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="parseObject" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInverse" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="computeKey" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntries" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getHouseholderVectorsRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getMainDiagonalRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSecondaryDiagonalRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="clearEventsHandlers" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventTime" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventsStates" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="isEmpty" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getConvergence" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventHandler" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventTime" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getMaxCheckInterval" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getMaxIterationCount" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="stop" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="copyArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="clearEventHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="clearStepHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getMaxEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="setMaxEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="integrate" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase1" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase2" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getNSteps" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase1" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMaxStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMinStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="integrate" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMaxGrowth" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMinReduction" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getSafety" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setMaxGrowth" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setMinReduction" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setSafety" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="readExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="writeExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getInstance" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="readResolve" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="requiresDenseOutput" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="doCopy" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="requiresDenseOutput" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="resetEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setEquations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getFinalTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getInitialTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="requiresDenseOutput" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getDimension" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="computeStepGrowShrinkFactor" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getMaxGrowth" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getMinReduction" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getSafety" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getStarterIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMaxGrowth" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMinReduction" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setSafety" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setStarterIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="clearObservations" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getObservations" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getGuessedAmplitude" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getGuessedPhase" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getGuessedPulsation" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getAmplitude" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getPhase" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getPulsation" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getWeight" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getX" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getY" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="setCostRelativeTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setInitialStepBoundFactor" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setOrthoTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setParRelativeTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getCoefficients" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getRelationship" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getCoefficients" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getConstantTerm" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="copyArray" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getArtificialVariableOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getData" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getEntry" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getHeight" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumArtificialVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumDecisionVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumObjectiveFunctions" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumSlackVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getOriginalNumDecisionVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getRhsOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getSlackVariableOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getWidth" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="setEntry" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="clearResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPoint" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPointRef" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getValue" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPoint" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPointRef" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getValue" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getValueRef" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBoolean" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextFloat" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextLong" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getRank" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getRootMatrix" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getBinCount" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="isLoaded" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextNormalizedDouble" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="createAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBoolean" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBytes" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextDouble" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextFloat" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextGaussian" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextLong" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSecureAlgorithm" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextNormalizedDouble" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getEmpiricalDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getMode" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getMu" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNextExponential" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNextGaussian" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNextUniform" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getSigma" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setMode" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setMu" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSigma" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="logBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedGammaP" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedGammaQ" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="addPoint" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getCenter" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getPoints" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getN" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getSumLogImpl" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getVarianceDirection" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="isBiasCorrected" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setVarianceDirection" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="isBiasCorrected" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="isBiasCorrected" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getQuantile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getResult" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="increment" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="evaluate" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="apply" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="clear" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getElement" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getKurtosis" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getKurtosisImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getPercentileImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSkewness" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSkewnessImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsq" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getValues" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVariance" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVarianceImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getWindowSize" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="removeMostRecentValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="replaceMostRecentValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeometricMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setKurtosisImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSkewnessImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getCovariance" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getDimension" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVariance" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSecondMoment" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumOfLogs" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsq" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVarianceImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setDistribution" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setDistribution" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTestDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTestDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquare" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquare" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getOneWayAnova" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getUnknownDistributionChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaFValue" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaPValue" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setOneWayAnova" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setUnknownDistributionChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="compareTo" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getPosition" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getValue" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getNanStrategy" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getTiesStrategy" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="newXSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newYSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBeta" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getIntercept" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getIntercept" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getN" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getRegressionSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getRegressionSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSlopeConfidenceInterval" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSlopeStdErr" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSumOfCrossProducts" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="clear" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="valuesIterator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="max" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="max" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="meanDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="min" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="min" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="product" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="product" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumSq" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumSq" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sum" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sum" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="getArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="getDimensionSizes" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="isPowerOf2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="bigDecimalValue" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="doubleValue" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getScale" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setRoundingMode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setScale" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getInstance" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="readResolve" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="cosh" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hash" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hash" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="log" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="normalizeAngle" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sinh" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hasNext" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="changeIndexSign" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsKey" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="findInsertionIndex" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="nextPowerOfTwo" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="perturb" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="probe" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="shouldGrowTable" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="size" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hasNext" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="buildArray" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="changeIndexSign" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsKey" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="findInsertionIndex" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="nextPowerOfTwo" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="perturb" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="probe" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="shouldGrowTable" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="size" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="discardFrontElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="discardMostRecentElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getContractionCriteria" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getExpansionFactor" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getExpansionMode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getInternalLength" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getNumElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="start" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="classes" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="clear" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsClass" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="putTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="removeTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="transformers" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getDimension1" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getDimension2" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getDuplicateAbscissa" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getArgument" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getArguments" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getPattern" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="buildMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getArguments" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getPattern" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMaxEvaluations" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMaxIterations" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getContents" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getTheoreticalValue" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="checkValidity" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="newFixedLengthChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="estimateError" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getOrder" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="doFinalize" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="handleStep" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="reset" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="initializeHighOrderDerivatives" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="iterateSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="doOptimize" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="doOptimize" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="doOptimize" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="nextDouble" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="calculateBeta" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateBetaVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateYVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getA" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getB" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "NOM" description ="Number of Methods">
      <Values per = "type" total = "3425" avg = "10,103" stddev = "13,113" max = "103">
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="103"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="95"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="67"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="65"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="64"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="61"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="60"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="54"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="53"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="52"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="50"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="47"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="37"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="37"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="36"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="34"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="34"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="34"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="34"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="34"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="34"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="33"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="31"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="31"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="30"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="29"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="28"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="27"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="24"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="23"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="22"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="20"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="20"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="20"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="20"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="20"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="19"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="18"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="18"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="17"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="17"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="17"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="17"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="17"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="16"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="16"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="16"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="16"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="16"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="16"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="16"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="16"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="16"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="16"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="15"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="15"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="15"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="15"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="15"/>
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="14"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="14"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="14"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="14"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="14"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="14"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="13"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="13"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="13"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="13"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="13"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="13"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="13"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="13"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="13"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="13"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="12"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="12"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="12"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="12"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="12"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="12"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="12"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="12"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="12"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="11"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="11"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="11"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="11"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="11"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="11"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="11"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="11"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="11"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="11"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="11"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="11"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="10"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="10"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="10"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="10"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="10"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="10"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="10"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="10"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="10"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="10"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="10"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="10"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="10"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="10"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="9"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="9"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="9"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="9"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="9"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="9"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="9"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="9"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="9"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="8"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="8"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="8"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="8"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="8"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="8"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="8"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="8"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="7"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="7"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="7"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="7"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="7"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="7"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="7"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="7"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="7"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="7"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="7"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="7"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="7"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="6"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="6"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="6"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="6"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="6"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="6"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="6"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="6"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="6"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="5"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="5"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="5"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="5"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="5"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="5"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="4"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="4"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="4"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="4"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="4"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="4"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="4"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="4"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="3"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="2"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "NBD" description ="Nested Block Depth" max ="5" hint ="use Extract-method to split the method up">
      <Values per = "method" avg = "1,6" stddev = "0,998" max = "10" maxinrange="false">
         <Value name="integrate" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10" inrange="false"/>
         <Value name="multiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="8" inrange="false"/>
         <Value name="multiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="8" inrange="false"/>
         <Value name="multiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="7" inrange="false"/>
         <Value name="multiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="7" inrange="false"/>
         <Value name="estimate" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="6" inrange="false"/>
         <Value name="estimate" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="6" inrange="false"/>
         <Value name="getU" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="getV" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="transformToLowerBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="transformToUpperBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="add" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="subtract" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="add" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="subtract" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="findEigenVectors" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="getQT" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="getQT" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="evaluateStep" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="6" inrange="false"/>
         <Value name="integrate" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6" inrange="false"/>
         <Value name="integrate" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6" inrange="false"/>
         <Value name="integrate" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6" inrange="false"/>
         <Value name="computeCoefficients" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6" inrange="false"/>
         <Value name="integrate" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6" inrange="false"/>
         <Value name="doOptimize" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="6" inrange="false"/>
         <Value name="toString" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="5"/>
         <Value name="computeCoefficients" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="5"/>
         <Value name="determineLMDirection" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="5"/>
         <Value name="getB" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="multiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="toString" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getSubMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="operate" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="preMultiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="transpose" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getNorm" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getSubMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="operate" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="preMultiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="transpose" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="multiply" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="transform" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="resetTables" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="setStartConfiguration" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="5"/>
         <Value name="sortObservations" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="5"/>
         <Value name="doOptimize" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="5"/>
         <Value name="determineLMDirection" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="5"/>
         <Value name="doOptimize" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="5"/>
         <Value name="localMin" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="5"/>
         <Value name="optimize" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="5"/>
         <Value name="decompose" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="getNextValue" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="nextPoisson" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="checkOrder" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="mulAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="integrate" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="4"/>
         <Value name="integrate" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="4"/>
         <Value name="integrate" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="4"/>
         <Value name="computeDividedDifference" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="smooth" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="evaluate" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve2" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="inverseCumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="getCovariances" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="4"/>
         <Value name="determineLMParameter" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="4"/>
         <Value name="qrDecomposition" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="4"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="equals" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="operate" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="toString" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="equals" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="operate" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="toString" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setSubMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setSubMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="equals" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="add" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="equals" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="luDecompose" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="subtract" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getData" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setSubMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="toBlocksLayout" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getData" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setSubMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="toBlocksLayout" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getInverse" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="isSymmetric" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getL" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getU" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getL" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getU" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="deserializeRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getH" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getR" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setSubMatrix" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="parse" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getT" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="computeDerivatives" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="tryStep" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="optimize" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="setStartConfiguration" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="iterateSimplex" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="iterateSimplex" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="fit" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="4"/>
         <Value name="getCovariances" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="determineLMParameter" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="qrDecomposition" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="getPivotRow" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="4"/>
         <Value name="dropPhase1Objective" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="4"/>
         <Value name="nextBytes" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="nextSecureHexString" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="4"/>
         <Value name="chooseInitialCenters" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="4"/>
         <Value name="getCorrelationPValues" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="4"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getResult" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="evaluate" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="4"/>
         <Value name="evaluate" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="4"/>
         <Value name="checkNonNegative" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="chiSquareDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="rank" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="removeNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="calculateHat" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="fft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="mdfft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="parseNumber" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="roundUnscaled" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="findInsertionIndex" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="findInsertionIndex" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="equals" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="integrate" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="stage" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="stage" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="computeSplineCoefficients" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="searchIndex" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="checkAllFiniteReal" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="checkStrictlyIncreasing" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="interpolate" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="interpolate" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="multiply" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="subtract" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="computeCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="isStrictlyIncreasing" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="buildPolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="computeUpToDegree" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solveAll" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="abs" source ="Complex.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="equals" source ="Complex.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="inverseCumulativeProbability" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="density" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="cumulativeProbability" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="getDeviancePart" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="getStirlingError" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="logBinomialProbability" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="cumulativeProbability" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="updateJacobian" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="qTy" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="parseNextCharacter" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="getReducedFraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="nextGeneration" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="inducedPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="getAngles" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="angle" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="equals" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="add" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkSubMatrixIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copySubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getData" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="hashCode" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="operate" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copySubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getData" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getNorm" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="hashCode" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="operate" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="next" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getMaxIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getMinIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapAddToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="operate" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="preMultiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="operate" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="preMultiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="equals" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDataAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDeterminant" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getNorm" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="hashCode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isSingular" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="operate" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="preMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="transpose" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="createBlocksLayout" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumnVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumn" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setColumn" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="createBlocksLayout" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumnVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumn" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setColumn" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isNonSingular" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getV" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getVT" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDeterminant" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getP" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDeterminant" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getP" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkSubMatrixIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="deserializeRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="serializeRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="equals" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isInfinite" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isNaN" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="operate" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="preMultiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="format" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getRank" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="dotProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="equals" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="evaluateStep" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="3"/>
         <Value name="computeJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="buildP" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="getInstance" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="initializeHighOrderDerivatives" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="updateHighOrderDerivativesPhase2" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="filterStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="extrapolate" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="initializeArrays" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="rescale" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="estimateError" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="readExternal" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="writeExternal" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="estimateError" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="readExternal" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="writeExternal" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="readBaseExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="writeBaseExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="readExternal" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="writeExternal" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="readExternal" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="rescale" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="writeExternal" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="handleStep" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="append" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="locatePoint" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="setInterpolatedTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="handleStep" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="start" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="buildSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="evaluateSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="replaceWorstPoint" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="evaluateNewSimplex" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="updateJacobian" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="qTy" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="findUpperBound" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="doIteration" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="getPivotColumn" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="createTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="getBasicRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="getSolution" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="isOptimal" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="value" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="optimize" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="optimize" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="optimize" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="converged" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="converged" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="converged" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="nextInt" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="nextVector" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="next" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="nextHexString" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="shuffle" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="nextVector" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="getNextReplay" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="resetReplayFile" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="logGamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="3"/>
         <Value name="regularizedGammaP" source ="Gamma.java" package ="org.apache.commons.math.special" value ="3"/>
         <Value name="regularizedGammaQ" source ="Gamma.java" package ="org.apache.commons.math.special" value ="3"/>
         <Value name="equals" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="toString" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="cluster" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="computeCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="correlation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="covarianceToCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="getCorrelationStandardErrors" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="evaluate" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="getResult" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="getResult" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="increment" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="incrementAll" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="test" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="aggregate" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="addValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getPercentile" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getStandardDeviation" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="setWindowSize" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="append" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getStandardDeviation" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getStandardDeviation" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="copy" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="copy" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="checkNonNegative" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="checkPositive" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="checkRectangular" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="chiSquare" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="chiSquare" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="containsNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="3"/>
         <Value name="getNanPositions" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="3"/>
         <Value name="recodeNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="3"/>
         <Value name="newSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="removeData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="get" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="3"/>
         <Value name="set" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="3"/>
         <Value name="fht" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="3"/>
         <Value name="fht" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="3"/>
         <Value name="parseNextCharacter" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="parseNumber" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="binomialCoefficient" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="gcd" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="gcd" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="nextAfter" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="normalizeArray" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="subAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="advance" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="containsKey" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="get" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="growTable" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="put" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="remove" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="advance" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="containsKey" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="get" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="growTable" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="put" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="remove" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="copy" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="setInitialCapacity" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="equals" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="transform" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="translate" source ="MathException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="translate" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="verifyIterationCount" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="verifyIterationCount" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="verifyIterationCount" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="getResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="verifyInterval" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="verifyIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="value" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="value" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="nextNonzero" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="smooth" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="updateBandwidthInterval" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="store" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="setBrightnessExponent" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="setMicropshereElements" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="add" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="differentiate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="evaluate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="negate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="getCoefficients" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="value" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="verifyInterpolationArray" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="evaluate" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="getCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="verifyInputArray" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="polynomialSplineDerivative" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="value" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="createChebyshevPolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="createHermitePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="createLaguerrePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="createLegendrePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solveAll" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="checkResultComputed" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="verifyBracketing" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="verifyInterval" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="verifySequence" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="bracket" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="setup" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="fix1stArgument" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="fix2ndArgument" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="add" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="add" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="combine" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="divide" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="multiply" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="multiply" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="of" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="postCompose" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="subtract" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="acos" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="asin" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="atan" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="conjugate" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="cos" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="cosh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="divide" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="exp" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="hashCode" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="log" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="multiply" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="multiply" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="negate" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="nthRoot" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="pow" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="sin" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="sinh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="sqrt" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="subtract" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="tan" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="tanh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="format" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="format" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="parse" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="parse" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="setImaginaryCharacter" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="setImaginaryFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="setRealFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="polar2Complex" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="cumulativeProbability" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="checkedCumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="probability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="recomputeZ" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="probability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumberOfTrialsInternal" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setProbabilityOfSuccessInternal" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainLowerBound" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setScaleInternal" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="density" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setMeanInternal" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setDenominatorDegreesOfFreedomInternal" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumeratorDegreesOfFreedomInternal" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setAlphaInternal" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setBetaInternal" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="innerCumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="probability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumberOfSuccessesInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setPopulationSizeInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setSampleSizeInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="upperCumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainLowerBound" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setStandardDeviationInternal" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="probability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumberOfSuccessesInternal" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setProbabilityOfSuccessInternal" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="probability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNormalAndMeanInternal" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setDegreesOfFreedomInternal" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="density" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="inverseCumulativeProbability" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setScaleInternal" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setShapeInternal" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="generalizedHarmonic" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="probability" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setExponentInternal" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumberOfElementsInternal" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getChiSquare" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="getRMS" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="guessParametersErrors" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="updateResidualsAndCost" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="setDenominatorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="setNumeratorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="equals" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="getReducedFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="toString" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="format" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parseNextBigInteger" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="abs" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="addSub" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="divide" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="equals" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="multiply" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="negate" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="toString" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="setWholeFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="format" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="setWholeFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="isSame" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="randomBinaryRepresentation" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="mutate" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="getFitness" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="searchForFitnessUpdate" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="nextGeneration" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="isSatisfied" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="evolve" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="crossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="crossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="baseSequence" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="decodeGeneric" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="identityPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="isSame" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="randomPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="mutate" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="tournament" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="getAngle" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="getAxis" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="orthogonalizeMatrix" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="hashCode" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="normalize" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="orthogonal" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="format" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="parse" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="parse" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="buildArray" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkAdditionCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkColumnIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkMultiplicationCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkRowIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkSubMatrixIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkSubtractionCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copySubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="extractField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="extractField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumnMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumn" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRow" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getTrace" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumn" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRow" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="transpose" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copySubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumnMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumn" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getFrobeniusNorm" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRow" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getTrace" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="inverse" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="isSingular" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="luDecompose" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumn" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRow" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="solve" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="solve" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="transpose" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="advance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkVectorDimensions" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL1Distance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL1Distance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL1Norm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLInfDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLInfDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLInfNorm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getNorm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="iterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAbsToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAcosToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAsinToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAtanToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCbrtToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCeilToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCosToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCoshToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivideToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapExpToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapExpm1ToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapFloorToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInvToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLog10ToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLog1pToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLogToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiplyToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapPowToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapRintToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSignumToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSinToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSinhToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSqrtToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapTanToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapTanhToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapUlpToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="set" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="toArray" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyOut" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyOut" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkIndex" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkVectorDimensions" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAddToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAdd" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivideToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInv" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInvToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiplyToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSubtractToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSubtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkVectorDimensions" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="hashCode" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="isInfinite" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAbsToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAcosToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAddToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAsinToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAtanToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCbrtToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCeilToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCosToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCoshToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivideToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapExpToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapExpm1ToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapFloorToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInvToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLog10ToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLog1pToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLogToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiplyToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapPowToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapRintToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSignumToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSinToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSinhToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSqrtToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSubtractToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapTanToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapTanhToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapUlpToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="unitVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="unitize" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyOut" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumnAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumnMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLUMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getTrace" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="operate" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copy" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyBlockPart" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRow" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRow" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copy" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyBlockPart" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getFrobeniusNorm" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRow" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRow" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getDeterminant" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLT" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getD" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getInverse" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkAdditionCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkColumnIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkMultiplicationCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkRowIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkSubMatrixIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkSubtractionCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createBigIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createColumnFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createColumnRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createFieldDiagonalMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createFieldIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRealDiagonalMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRealIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRowFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRowRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="serializeRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getData" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="hashCode" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAddToSelf" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="set" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="unitize" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getQ" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyOut" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="format" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="parse" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getCovariance" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getS" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getUT" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getVT" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkIndex" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkVectorDimensions" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getData" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="hashCode" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAddToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivideToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInvToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiplyToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="set" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getQ" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="reset" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="stepAccepted" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="reset" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="stepAccepted" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="copyArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="getInterpolatedDyDp" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="getInterpolatedDyDpDot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="getInterpolatedDyDy0" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="getInterpolatedDyDy0Dot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="readArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="readArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="writeArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="writeArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="checkDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="dispatchCompoundState" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="integrate" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="end" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="visit" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="initializeStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="sanityChecks" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="setInitialStepSize" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="estimateError" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="estimateError" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="doFinalize" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="readExternal" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="reinitialize" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="writeExternal" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="setInterpolationControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="setOrderControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="setStabilityCheck" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="setStepsizeControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="finalizeStep" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="getInterpolatedDerivatives" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="getInterpolatedState" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="computeDerivatives" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="sanityChecks" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="handleStep" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="evaluate" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="incrementIterationsCounter" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="jacobian" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="guessAOmega" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="guessPhi" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="gradient" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="value" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="fit" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="getChiSquare" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="getRMS" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="guessParametersErrors" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="incrementIterationsCounter" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="optimize" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="updateResidualsAndCost" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="computeObjectiveValue" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="incrementIterationsCounter" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="value" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="setInitialStep" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="incrementIterationsCounter" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="equals" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="equals" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="doOptimize" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="solvePhase1" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="divideRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="equals" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="initializeColumnLabels" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="normalize" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="checkResultComputed" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="2"/>
         <Value name="computeObjectiveValue" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="2"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptima" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptima" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptima" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptima" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptimaValues" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="nextGaussian" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextInt" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextBytes" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextGaussian" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="fillBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getUpperBounds" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getNatural" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getRan" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getSecRan" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextExponential" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextGaussian" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextInt" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextLong" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextPermutation" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextSample" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextSecureInt" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextSecureLong" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextUniform" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="reSeed" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="reSeedSecure" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="reSeedSecure" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="reSeed" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextVector" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="closeReplayFile" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="fill" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="fill" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getNextDigest" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="logBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="2"/>
         <Value name="erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="2"/>
         <Value name="digamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="2"/>
         <Value name="trigamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="2"/>
         <Value name="centroidOf" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="2"/>
         <Value name="checkSufficientData" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="checkSufficientData" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="correlation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="rankTransform" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="increment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="checkEmpty" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="getResult" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="clear" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="clear" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="clear" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="getResult" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="clear" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="getResult" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="increment" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="setQuantile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="increment" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="increment" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="getResult" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="increment" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="equals" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="evaluate" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="evaluate" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="incrementAll" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="test" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="addValue" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="equals" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getGeometricMean" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getMax" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getMean" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getMin" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getN" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getSecondMoment" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getStandardDeviation" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getSum" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getSumOfLogs" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getSummary" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getSumsq" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getVariance" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="setPercentileImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="addValue" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="checkDimension" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="checkEmpty" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="clear" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="equals" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getResults" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="equals" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="addValue" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="checkEmpty" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="clear" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="copy" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="equals" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getMean" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getVariance" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="checkArray" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareTestDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="anovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="anovaTest" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="checkSampleData" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="checkSampleData" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="checkSignificanceLevel" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="fill" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="resolveTie" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="restoreNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="estimateRegressionParametersStandardErrors" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="validateCovarianceData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="validateSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getOmegaInverse" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="addData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="addData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getMeanSquareError" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getR" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getSlope" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getSlopeConfidenceInterval" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getTotalSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getXSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="removeData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="setDistribution" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="equals" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="getSumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="toString" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="sumDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="varianceDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="fct" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="clone" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="computeOmega" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="getOmegaImaginary" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="getOmegaReal" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="isForward" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="fft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="mdfft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="sample" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="scaleArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="scaleArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="verifyDataSet" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="verifyDataSet" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="verifyInterval" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="fst" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="equals" source ="BigReal.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="formatDouble" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="parseFixedstring" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="equals" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="transform" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="binomialCoefficientDouble" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="binomialCoefficientLog" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="checkBinomial" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="compareTo" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance1" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance1" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distanceInf" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distanceInf" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="factorialDouble" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="factorialLog" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="factorial" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="lcm" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="lcm" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="mulAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="scalb" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="subAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="key" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="value" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="computeCapacity" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="key" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="value" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="computeCapacity" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="addElementRolling" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="addElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="checkContractExpand" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="discardExtremeElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="expand" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="getElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="setContractionCriteria" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="setElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="setExpansionFactor" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="setExpansionMode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="setNumElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="shouldContract" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="substituteMostRecentElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="printStackTrace" source ="MathException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createArithmeticException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createArrayIndexOutOfBoundsException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createConcurrentModificationException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createEOFException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createIllegalArgumentException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createIllegalStateException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createInternalError" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createNoSuchElementException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createNullPointerException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createParseException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="printStackTrace" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="integrate" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="integrate" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="integrate" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="integrate" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="clearResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="getMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="resetMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="setMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="setResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="interpolate" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="interpolate" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="tricube" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="illumination" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="normal" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="reset" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="sample" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="cosAngle" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="value" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="interpolate" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="interpolate" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="nextIndex" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="previousIndex" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="degree" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="derivative" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="equals" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getCoefficients" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="hashCode" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="polynomialDerivative" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="degree" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getInterpolatingPoints" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getInterpolatingValues" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="degree" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getCenters" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getNewtonCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="derivative" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getKnots" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getN" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getPolynomials" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="getPolynomialFunction" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="isRootOK" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve2" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newInstance" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newBisectionSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newBrentSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newDefaultSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newNewtonSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newSecantSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="clearResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="getFunctionValue" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="getFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="getResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="isBracketing" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="isSequence" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="resetFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="setFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="setResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="setResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="bracket" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="midpoint" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="add" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="createComplex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getArgument" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getField" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getImaginary" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getReal" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="isInfinite" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="isNaN" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="readResolve" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="sqrt1z" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getInstance" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getOne" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getZero" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="readResolve" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="formatComplex" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getAvailableLocales" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getImaginaryCharacter" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getImaginaryFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getInstance" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getInstance" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getRealFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="parseObject" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getAlpha" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getBeta" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setAlpha" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setBeta" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfTrials" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getProbabilityOfSuccess" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfTrials" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccess" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMedian" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getScale" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMedianInternal" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMedian" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScale" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDegreesOfFreedom" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedomInternal" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedom" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setGammaInternal" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setGamma" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMean" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDenominatorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumeratorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDenominatorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumeratorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getAlpha" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getBeta" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setAlpha" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setBeta" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getLowerDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfSuccesses" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getPopulationSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSampleSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getUpperDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="probability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccesses" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setPopulationSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setSampleSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMean" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getStandardDeviation" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMeanInternal" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setStandardDeviation" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfSuccesses" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getProbabilityOfSuccess" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccesses" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccess" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMean" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="normalApproximateProbability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNormal" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDegreesOfFreedom" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedom" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getScale" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getShape" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScale" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setShape" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getExponent" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfElements" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setExponent" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfElements" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getCostEvaluations" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getJacobianEvaluations" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="incrementJacobianEvaluationsCounter" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="initializeEstimate" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setMaxCostEval" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getEstimate" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getName" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="isBound" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setBound" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setEstimate" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setConvergence" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setSteadyStateThreshold" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setCostRelativeTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setInitialStepBoundFactor" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setOrthoTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setParRelativeTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="addMeasurement" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="addParameter" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getAllParameters" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getMeasurements" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getUnboundParameters" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getMeasuredValue" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getResidual" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getWeight" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="isIgnored" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setIgnored" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominatorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumeratorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="parseAndIgnoreWhitespace" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="abs" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="compareTo" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="doubleValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="floatValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominator" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominatorAsInt" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominatorAsLong" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getField" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumerator" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumeratorAsInt" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumeratorAsLong" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="hashCode" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="intValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="longValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="negate" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="percentageValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="reciprocal" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="reduce" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getInstance" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getOne" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getZero" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="readResolve" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="formatBigFraction" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getAvailableLocales" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="compareTo" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="doubleValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="floatValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominator" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getField" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumerator" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="hashCode" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="intValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="longValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="reciprocal" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getInstance" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getOne" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getZero" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="readResolve" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="formatFraction" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getAvailableLocales" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getWholeFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getWholeFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getLength" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getRepresentation" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="toString" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="checkValidity" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="compareTo" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="findSameChromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="isSame" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getFirst" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getSecond" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="toString" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getElitismRate" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setElitismRate" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getNumGenerations" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getCrossoverPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getCrossoverRate" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getGenerationsEvolved" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getMutationPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getMutationRate" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getRandomGenerator" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getSelectionPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setRandomGenerator" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="addChromosome" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getChromosomes" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getFittestChromosome" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getPopulationLimit" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getPopulationSize" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="iterator" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setChromosomes" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setPopulationLimit" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="toString" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="checkValidity" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="comparatorPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="decode" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="toString" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getArity" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="select" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setArity" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyInverseTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyInverseTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distance" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getMatrix" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ0" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ1" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ2" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ3" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="revert" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getA1" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getA2" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getA3" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="toString" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="add" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="add" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="crossProduct" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distance1" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distanceInf" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distanceSq" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distance" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="dotProduct" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getAlpha" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getDelta" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNorm" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNorm1" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNormInf" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNormSq" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getX" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getY" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getZ" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="isInfinite" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="isNaN" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="negate" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="scalarMultiply" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="subtract" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="subtract" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="toString" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="formatVector3D" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="format" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getAvailableLocales" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getInstance" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getInstance" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getPrefix" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getSeparator" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getSuffix" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="parseObject" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isSquare" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDeterminant" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isSquare" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="hasNext" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="remove" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getMaxValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getMinValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAbs" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAcos" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAsin" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAtan" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapCbrt" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapCeil" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapCos" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapCosh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivide" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapExp" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapExpm1" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapFloor" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapInv" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapLog" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapLog10" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapLog1p" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiply" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapPow" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapRint" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSignum" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSin" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSinh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSqrt" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtractToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapTan" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapTanh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapUlp" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="map" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setSubVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="sparseIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="unitVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="unitize" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDimension" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getField" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="hashCode" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toArray" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDimension" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Norm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfNorm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getNorm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNaN" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toArray" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toString" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getHouseholderVectorsRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getMainDiagonalRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSecondaryDiagonalRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isUpperBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntryAsDouble" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getPermutation" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRoundingMode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRow" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getScale" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="inverse" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isSquare" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setRoundingMode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setScale" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockHeight" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockWidth" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockHeight" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockWidth" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInverse" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="end" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="end" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="end" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="end" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDeterminant" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEigenvector" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getImagEigenvalues" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getImagEigenvalue" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRealEigenvalues" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRealEigenvalue" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="transformToTridiagonal" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getPivot" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInverse" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getPivot" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getConvertedMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getConvertedMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="bigFractionMatrixToRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createFieldVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="fractionMatrixToRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="computeKey" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getIndex" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="hasNext" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="next" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="remove" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDimension" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntries" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSparcity" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isDefaultValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="sparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toArray" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="unitVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInverse" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="formatRealVector" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getAvailableLocales" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInstance" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInstance" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getPrefix" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSeparator" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSuffix" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="parseObject" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInverse" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getConditionNumber" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getNorm" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSingularValues" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getU" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getV" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="computeKey" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDimension" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntries" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getField" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapInv" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtractToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setEntry" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toArray" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getHouseholderVectorsRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getMainDiagonalRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSecondaryDiagonalRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="addEventHandler" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="clearEventsHandlers" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventTime" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventsHandlers" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventsStates" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="isEmpty" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="stop" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getConvergence" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventHandler" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventTime" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getMaxCheckInterval" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getMaxIterationCount" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="reinitializeBegin" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="stop" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="eventOccurred" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="g" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="resetState" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="computeDerivatives" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getParametersDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="handleStep" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="requiresDenseOutput" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="reset" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="copy" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="copyArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getCurrentTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getInterpolatedTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getInterpolatedY" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getInterpolatedYDot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getPreviousTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="isForward" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="readExternal" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="setInterpolatedTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="writeExternal" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="addEventHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="addStepHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="clearEventHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="clearStepHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getCurrentSignedStepsize" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getCurrentStepStart" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getEventHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getMaxEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getStepHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="setMaxEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="initializeHighOrderDerivatives" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase1" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase2" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="start" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getNSteps" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase1" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getCurrentStepStart" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMaxStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMinStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="resetInternalState" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getOrder" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="reinitialize" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="storeTime" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getOrder" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="storeTime" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMaxGrowth" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMinReduction" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getSafety" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setMaxGrowth" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setMinReduction" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setSafety" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="addEventHandler" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="addStepHandler" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getOrder" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="reinitialize" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="copy" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="doFinalize" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getCurrentTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getInterpolatedTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getPreviousTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="isForward" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reinitialize" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="setInterpolatedTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="shift" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="storeTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getInstance" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="handleStep" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="readResolve" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="requiresDenseOutput" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reset" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="doCopy" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="doCopy" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getInterpolatedStateVariation" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reinitialize" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reinitialize" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="requiresDenseOutput" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reset" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="eventOccurred" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="g" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="resetState" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="addEndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="addEventHandler" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="addStepHandler" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="clearEventHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="clearStepHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getCurrentSignedStepsize" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getCurrentStepStart" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getEventHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getMaxEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getName" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getStepHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="requiresDenseOutput" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="resetEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setEquations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getFinalTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getInitialTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getInterpolatedState" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getInterpolatedTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="requiresDenseOutput" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="reset" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="computeDerivatives" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getDimension" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="computeDerivatives" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getDimension" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="requiresDenseOutput" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="reset" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="computeStepGrowShrinkFactor" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getMaxGrowth" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getMinReduction" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getSafety" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getStarterIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMaxGrowth" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMinReduction" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setSafety" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setStarterIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getConvergenceChecker" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getMaxEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getMaxIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setConvergenceChecker" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setMaxEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setMaxIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="value" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="clearObservations" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="fit" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getObservations" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getGuessedAmplitude" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getGuessedPhase" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getGuessedPulsation" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="guess" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="gradient" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="value" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="derivative" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getAmplitude" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getPhase" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getPulsation" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="value" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getWeight" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getX" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getY" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getConvergenceChecker" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getJacobianEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getMaxEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getMaxIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setConvergenceChecker" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="computeObjectiveGradient" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getConvergenceChecker" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getGradientEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getMaxEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getMaxIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="optimize" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setConvergenceChecker" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setCostRelativeTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setInitialStepBoundFactor" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setOrthoTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setParRelativeTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="precondition" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setLineSearchSolver" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getMaxIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="optimize" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="setMaxIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getCoefficients" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getRelationship" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="hashCode" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="readObject" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="writeObject" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getCoefficients" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getConstantTerm" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="hashCode" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="readObject" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="writeObject" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="copyArray" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getArtificialVariableOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getConstraintTypeCounts" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getData" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getEntry" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getHeight" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getInvertedCoeffiecientSum" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumArtificialVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumDecisionVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumObjectiveFunctions" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumSlackVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getOriginalNumDecisionVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getRhsOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getSlackVariableOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getWidth" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="hashCode" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="normalizeConstraints" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="readObject" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="setEntry" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="subtractRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="writeObject" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="clearResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="getEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="getFunctionValue" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="getMaxEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="getResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="setResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="optimize" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="optimize" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getConvergenceChecker" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getGradientEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setConvergenceChecker" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getConvergenceChecker" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getJacobianEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setConvergenceChecker" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getConvergenceChecker" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setConvergenceChecker" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getFunctionValue" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getResult" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="optimize" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="resetAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="resetMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="resetRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPoint" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPointRef" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getValue" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="converged" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPoint" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPointRef" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getValue" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getValueRef" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="clear" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBoolean" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextFloat" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextLong" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBoolean" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextDouble" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextFloat" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextLong" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getRank" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getRootMatrix" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="findBin" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getBinCount" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getGeneratorUpperBounds" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getSampleStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="isLoaded" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextNormalizedDouble" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="createAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBoolean" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBytes" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextDouble" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextFloat" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextGaussian" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextLong" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSecureAlgorithm" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextNormalizedDouble" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="computeDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="computeDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getEmpiricalDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getMode" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getMu" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNext" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNextExponential" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNextGaussian" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNextUniform" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getSigma" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setMode" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setMu" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSigma" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="logBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedGammaP" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedGammaQ" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="addPoint" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getCenter" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getPoints" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="distanceFrom" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="hashCode" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="assignPointsToClusters" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getNearestCluster" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getN" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getRankCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getSumLogImpl" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setSumLogImpl" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getVarianceDirection" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="isBiasCorrected" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setVarianceDirection" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="isBiasCorrected" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="isBiasCorrected" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="equals" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="hashCode" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="equals" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="hashCode" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="clear" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getN" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getResult" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="clear" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getN" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getResult" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getQuantile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getN" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getResult" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getN" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getResult" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getN" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="increment" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getN" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getResult" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="hashCode" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="evaluate" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="createContributingStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="apply" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="clear" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getElement" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getKurtosis" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getKurtosisImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getPercentileImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSkewness" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSkewnessImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSortedValues" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsq" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getValues" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVariance" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVarianceImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getWindowSize" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="removeMostRecentValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="replaceMostRecentValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeometricMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setKurtosisImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSkewnessImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getCovariance" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getDimension" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLog" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumSq" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVariance" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSecondMoment" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumOfLogs" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSummary" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsq" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVarianceImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="apply" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="clear" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getElement" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getValues" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getWindowSize" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setWindowSize" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="clear" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getCovariance" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getDimension" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLog" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumSq" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="clear" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSummary" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsq" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVariance" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVarianceImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTestDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setDistribution" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="anovaFValue" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="anovaPValue" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="df" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setDistribution" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTestDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTestDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquare" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquare" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getOneWayAnova" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getUnknownDistributionChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaFValue" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaPValue" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setOneWayAnova" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setUnknownDistributionChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="compareTo" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getPosition" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getValue" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getNanStrategy" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getTiesStrategy" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="calculateResiduals" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="estimateRegressandVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="estimateRegressionParameters" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="estimateRegressionParametersVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="estimateResiduals" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newXSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newYSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBeta" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBetaVariance" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateYVariance" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newCovarianceData" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newSampleData" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBeta" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBetaVariance" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateYVariance" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newXSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="clear" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getIntercept" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getInterceptStdErr" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getIntercept" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getN" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getRSquare" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getRegressionSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getRegressionSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSignificance" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSlopeConfidenceInterval" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSlopeStdErr" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSumOfCrossProducts" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSumSquaredErrors" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="predict" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="compare" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="clear" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="hashCode" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="valuesIterator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="geometricMean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="geometricMean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="max" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="max" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="meanDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="mean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="mean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="min" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="min" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="percentile" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="percentile" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="product" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="product" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumLog" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumLog" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumSq" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumSq" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sum" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sum" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="clone" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="getArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="getDimensionSizes" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="isPowerOf2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="add" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="bigDecimalValue" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="compareTo" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="divide" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="doubleValue" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getField" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getRoundingMode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getScale" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashCode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="multiply" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setRoundingMode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setScale" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="subtract" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getInstance" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getOne" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getZero" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="readResolve" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="parseAndIgnoreWhitespace" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashCode" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="cosh" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hash" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hash" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="log" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="normalizeAngle" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sinh" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hasNext" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="changeIndexSign" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsKey" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="doRemove" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="findInsertionIndex" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashOf" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="nextPowerOfTwo" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="perturb" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="probe" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="readObject" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="shouldGrowTable" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="size" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hasNext" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="buildArray" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="changeIndexSign" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsKey" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="doRemove" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="findInsertionIndex" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashOf" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="nextPowerOfTwo" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="perturb" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="probe" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="readObject" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="shouldGrowTable" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="size" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="clear" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="contract" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="copy" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="discardFrontElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="discardMostRecentElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="expandTo" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getContractionCriteria" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getExpansionFactor" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getExpansionMode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getInternalLength" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getInternalValues" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getNumElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getValues" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashCode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="start" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="classes" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="clear" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsClass" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashCode" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="putTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="removeTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="transformers" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="resetAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="resetMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="resetRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="setAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="setMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="setRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getDimension1" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getDimension2" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getDuplicateAbscissa" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getArgument" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getArguments" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getLocalizedMessage" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getPattern" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="buildMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createIOException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createIllegalArgumentException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getArguments" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getLocalizedMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getPattern" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMaxEvaluations" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMaxIterations" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getContents" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="newBisectionSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newBrentSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newDefaultSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newNewtonSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newSecantSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="value" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="value" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="getDomainLowerBound" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getDomainUpperBound" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getInitialDomain" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getDomainLowerBound" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getDomainUpperBound" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="estimate" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getPartial" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getTheoreticalValue" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="checkValidity" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="newFixedLengthChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="addToEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="createMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="multiplyEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="setEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="addToEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="createMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="multiplyEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="setEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="integrate" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="integrate" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="estimateError" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getOrder" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="doCopy" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="readExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="writeExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="initializeHighOrderDerivatives" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="iterateSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="doOptimize" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="doOptimize" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="doOptimize" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="nextDouble" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="next" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="clear" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="copy" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getResult" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="increment" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="copy" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="evaluate" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="calculateBeta" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateBetaVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateYVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getA" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getB" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "DIT" description ="Depth of Inheritance Tree">
      <Values per = "type" avg = "1,962" stddev = "1,258" max = "6">
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="6"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="6"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="5"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="5"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="5"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="5"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="5"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="4"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="4"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="3"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="2"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
      </Values>
   </Metric>
   <Metric id = "NOP" description ="Number of Packages">
      <Value value="38"/>
   </Metric>
   <Metric id = "CA" description ="Afferent Coupling">
      <Values per = "packageFragment" avg = "21,605" stddev = "47,304" max = "280">
         <Value name="org.apache.commons.math" package ="org.apache.commons.math" value ="280"/>
         <Value name="org.apache.commons.math.analysis" package ="org.apache.commons.math.analysis" value ="89"/>
         <Value name="org.apache.commons.math.ode" package ="org.apache.commons.math.ode" value ="64"/>
         <Value name="org.apache.commons.math.util" package ="org.apache.commons.math.util" value ="52"/>
         <Value name="org.apache.commons.math.ode.sampling" package ="org.apache.commons.math.ode.sampling" value ="49"/>
         <Value name="org.apache.commons.math.stat.descriptive" package ="org.apache.commons.math.stat.descriptive" value ="49"/>
         <Value name="org.apache.commons.math.linear" package ="org.apache.commons.math.linear" value ="43"/>
         <Value name="org.apache.commons.math.optimization" package ="org.apache.commons.math.optimization" value ="32"/>
         <Value name="org.apache.commons.math.ode.events" package ="org.apache.commons.math.ode.events" value ="22"/>
         <Value name="org.apache.commons.math.ode.nonstiff" package ="org.apache.commons.math.ode.nonstiff" value ="19"/>
         <Value name="org.apache.commons.math.random" package ="org.apache.commons.math.random" value ="17"/>
         <Value name="org.apache.commons.math.stat.descriptive.moment" package ="org.apache.commons.math.stat.descriptive.moment" value ="13"/>
         <Value name="org.apache.commons.math.analysis.polynomials" package ="org.apache.commons.math.analysis.polynomials" value ="11"/>
         <Value name="org.apache.commons.math.fraction" package ="org.apache.commons.math.fraction" value ="11"/>
         <Value name="org.apache.commons.math.special" package ="org.apache.commons.math.special" value ="9"/>
         <Value name="org.apache.commons.math.complex" package ="org.apache.commons.math.complex" value ="8"/>
         <Value name="org.apache.commons.math.distribution" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="org.apache.commons.math.stat.descriptive.summary" package ="org.apache.commons.math.stat.descriptive.summary" value ="8"/>
         <Value name="org.apache.commons.math.stat" package ="org.apache.commons.math.stat" value ="7"/>
         <Value name="org.apache.commons.math.analysis.solvers" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="org.apache.commons.math.optimization.general" package ="org.apache.commons.math.optimization.general" value ="5"/>
         <Value name="org.apache.commons.math.stat.descriptive.rank" package ="org.apache.commons.math.stat.descriptive.rank" value ="5"/>
         <Value name="org.apache.commons.math.estimation" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="org.apache.commons.math.geometry" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="org.apache.commons.math.stat.inference" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="org.apache.commons.math.analysis.interpolation" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="org.apache.commons.math.optimization.direct" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="org.apache.commons.math.optimization.univariate" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="org.apache.commons.math.stat.ranking" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="org.apache.commons.math.stat.regression" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="org.apache.commons.math.transform" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="org.apache.commons.math.analysis.integration" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="org.apache.commons.math.genetics" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="org.apache.commons.math.ode.jacobians" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="org.apache.commons.math.optimization.fitting" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="org.apache.commons.math.optimization.linear" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="org.apache.commons.math.stat.clustering" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="org.apache.commons.math.stat.correlation" package ="org.apache.commons.math.stat.correlation" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "NOI" description ="Number of Interfaces">
      <Values per = "packageFragment" total = "113" avg = "2,974" stddev = "4,665" max = "20">
         <Value name="org.apache.commons.math.linear" package ="org.apache.commons.math.linear" value ="20"/>
         <Value name="org.apache.commons.math.distribution" package ="org.apache.commons.math.distribution" value ="19"/>
         <Value name="org.apache.commons.math.analysis" package ="org.apache.commons.math.analysis" value ="12"/>
         <Value name="org.apache.commons.math.genetics" package ="org.apache.commons.math.genetics" value ="7"/>
         <Value name="org.apache.commons.math.ode" package ="org.apache.commons.math.ode" value ="6"/>
         <Value name="org.apache.commons.math.optimization" package ="org.apache.commons.math.optimization" value ="6"/>
         <Value name="org.apache.commons.math.ode.jacobians" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="org.apache.commons.math.random" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="org.apache.commons.math.stat.descriptive" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="org.apache.commons.math.stat.inference" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="org.apache.commons.math" package ="org.apache.commons.math" value ="3"/>
         <Value name="org.apache.commons.math.analysis.interpolation" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="org.apache.commons.math.ode.sampling" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="org.apache.commons.math.estimation" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="org.apache.commons.math.util" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="org.apache.commons.math.analysis.integration" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="org.apache.commons.math.analysis.polynomials" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="org.apache.commons.math.analysis.solvers" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="org.apache.commons.math.ode.events" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="org.apache.commons.math.optimization.fitting" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="org.apache.commons.math.optimization.general" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="org.apache.commons.math.optimization.linear" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="org.apache.commons.math.stat.clustering" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="org.apache.commons.math.stat.ranking" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="org.apache.commons.math.stat.regression" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="org.apache.commons.math.transform" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="org.apache.commons.math.complex" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="org.apache.commons.math.fraction" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="org.apache.commons.math.geometry" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="org.apache.commons.math.ode.nonstiff" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="org.apache.commons.math.optimization.direct" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="org.apache.commons.math.optimization.univariate" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="org.apache.commons.math.special" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="org.apache.commons.math.stat" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="org.apache.commons.math.stat.correlation" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="org.apache.commons.math.stat.descriptive.moment" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="org.apache.commons.math.stat.descriptive.rank" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="org.apache.commons.math.stat.descriptive.summary" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "VG" description ="McCabe Cyclomatic Complexity" max ="10" hint ="use Extract-method to split the method up">
      <Values per = "method" avg = "2,115" stddev = "2,82" max = "83" maxinrange="false">
         <Value name="integrate" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="83" inrange="false"/>
         <Value name="estimate" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="38" inrange="false"/>
         <Value name="doOptimize" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="38" inrange="false"/>
         <Value name="getAngles" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="36" inrange="false"/>
         <Value name="findEigenVectors" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="34" inrange="false"/>
         <Value name="determineLMParameter" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="29" inrange="false"/>
         <Value name="determineLMParameter" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="29" inrange="false"/>
         <Value name="integrate" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="25" inrange="false"/>
         <Value name="evaluateStep" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="23" inrange="false"/>
         <Value name="interpolate" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="20" inrange="false"/>
         <Value name="localMin" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="20" inrange="false"/>
         <Value name="doOptimize" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="19" inrange="false"/>
         <Value name="smooth" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="17" inrange="false"/>
         <Value name="determineLMDirection" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="17" inrange="false"/>
         <Value name="iterateSimplex" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="17" inrange="false"/>
         <Value name="determineLMDirection" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="17" inrange="false"/>
         <Value name="roundUnscaled" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="17" inrange="false"/>
         <Value name="integrate" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="16" inrange="false"/>
         <Value name="nextPoisson" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="16" inrange="false"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="15" inrange="false"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="15" inrange="false"/>
         <Value name="transformToLowerBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="15" inrange="false"/>
         <Value name="transformToUpperBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="15" inrange="false"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="15" inrange="false"/>
         <Value name="gcd" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="15" inrange="false"/>
         <Value name="gcd" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="15" inrange="false"/>
         <Value name="qrDecomposition" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="14" inrange="false"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="14" inrange="false"/>
         <Value name="integrate" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="14" inrange="false"/>
         <Value name="qrDecomposition" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="14" inrange="false"/>
         <Value name="optimize" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="14" inrange="false"/>
         <Value name="decompose" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="14" inrange="false"/>
         <Value name="findInsertionIndex" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="14" inrange="false"/>
         <Value name="findInsertionIndex" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="14" inrange="false"/>
         <Value name="luDecompose" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="13" inrange="false"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="13" inrange="false"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="13" inrange="false"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="13" inrange="false"/>
         <Value name="integrate" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="13" inrange="false"/>
         <Value name="initializeStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="13" inrange="false"/>
         <Value name="computeCoefficients" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="12" inrange="false"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="12" inrange="false"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="12" inrange="false"/>
         <Value name="tryStep" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="12" inrange="false"/>
         <Value name="setInterpolatedTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="12" inrange="false"/>
         <Value name="regularizedGammaP" source ="Gamma.java" package ="org.apache.commons.math.special" value ="12" inrange="false"/>
         <Value name="bracket" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="11" inrange="false"/>
         <Value name="estimate" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="11" inrange="false"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="11" inrange="false"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="11" inrange="false"/>
         <Value name="parse" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="11" inrange="false"/>
         <Value name="getU" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="11" inrange="false"/>
         <Value name="getV" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="11" inrange="false"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="11" inrange="false"/>
         <Value name="equals" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="11" inrange="false"/>
         <Value name="transform" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="11" inrange="false"/>
         <Value name="createTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="11" inrange="false"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="11" inrange="false"/>
         <Value name="chiSquareDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="11" inrange="false"/>
         <Value name="rank" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="11" inrange="false"/>
         <Value name="binomialCoefficient" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="11" inrange="false"/>
         <Value name="toString" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="10"/>
         <Value name="solve2" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="10"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="10"/>
         <Value name="addSub" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="10"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="10"/>
         <Value name="setStartConfiguration" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="10"/>
         <Value name="doOptimize" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="10"/>
         <Value name="dropPhase1Objective" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="10"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="10"/>
         <Value name="test" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="10"/>
         <Value name="aggregate" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="10"/>
         <Value name="copy" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="10"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="10"/>
         <Value name="fft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="10"/>
         <Value name="binomialCoefficientLog" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="equals" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="interpolate" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="9"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="9"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="9"/>
         <Value name="parse" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="9"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="9"/>
         <Value name="setSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="equals" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="parse" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="initializeArrays" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="setStepsizeControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="computeCoefficients" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9"/>
         <Value name="checkOrder" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="mulAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="normalizeArray" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="9"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="8"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="8"/>
         <Value name="divide" source ="Complex.java" package ="org.apache.commons.math.complex" value ="8"/>
         <Value name="inverseCumulativeProbability" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="inverseCumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="8"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="8"/>
         <Value name="getReducedFraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="8"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="8"/>
         <Value name="parse" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="8"/>
         <Value name="equals" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="equals" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="setSubMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="setSubMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="equals" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="equals" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="multiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="multiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="multiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="multiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getQT" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="setSubMatrix" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="getQT" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="8"/>
         <Value name="computeDerivatives" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="8"/>
         <Value name="resetTables" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="8"/>
         <Value name="resolveTie" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="8"/>
         <Value name="validateSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="8"/>
         <Value name="binomialCoefficientDouble" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="nextAfter" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="7"/>
         <Value name="evaluate" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="7"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="multiply" source ="Complex.java" package ="org.apache.commons.math.complex" value ="7"/>
         <Value name="parse" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="7"/>
         <Value name="density" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="7"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="setSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="setSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="outerProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="equals" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="operate" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="preMultiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="operate" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="preMultiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="7"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="setOrderControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="readExternal" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="7"/>
         <Value name="optimize" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="7"/>
         <Value name="iterateSimplex" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="7"/>
         <Value name="getPivotRow" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="7"/>
         <Value name="getNext" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="7"/>
         <Value name="regularizedGammaQ" source ="Gamma.java" package ="org.apache.commons.math.special" value ="7"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="equals" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="7"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="7"/>
         <Value name="chiSquare" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="7"/>
         <Value name="mdfft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="7"/>
         <Value name="integrate" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="6"/>
         <Value name="integrate" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="6"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="abs" source ="Complex.java" package ="org.apache.commons.math.complex" value ="6"/>
         <Value name="multiply" source ="Complex.java" package ="org.apache.commons.math.complex" value ="6"/>
         <Value name="orthogonal" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="6"/>
         <Value name="getB" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="toString" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="add" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getSubMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="setColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="subtract" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="toBlocksLayout" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="add" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getNorm" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getSubMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="setColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="subtract" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="toBlocksLayout" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="add" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="computeJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="6"/>
         <Value name="append" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="6"/>
         <Value name="locatePoint" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="6"/>
         <Value name="sortObservations" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="6"/>
         <Value name="getSolution" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="6"/>
         <Value name="initializeColumnLabels" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="6"/>
         <Value name="value" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="6"/>
         <Value name="getNextValue" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="6"/>
         <Value name="nextSecureHexString" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="6"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6"/>
         <Value name="test" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="equals" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="6"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="6"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="integrate" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="5"/>
         <Value name="value" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="5"/>
         <Value name="value" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="5"/>
         <Value name="solveAll" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="nthRoot" source ="Complex.java" package ="org.apache.commons.math.complex" value ="5"/>
         <Value name="sqrt" source ="Complex.java" package ="org.apache.commons.math.complex" value ="5"/>
         <Value name="inverseCumulativeProbability" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="logBinomialProbability" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="inverseCumulativeProbability" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="5"/>
         <Value name="getCovariances" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="5"/>
         <Value name="parseNextCharacter" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="parseNextBigInteger" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="parse" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="parse" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="isSame" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="nextGeneration" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="isSame" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="angle" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="5"/>
         <Value name="copySubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="operate" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="toString" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="copySubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="operate" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="toString" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="advance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getDeterminant" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="multiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="setRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="setSubMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="transpose" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="setRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="setSubMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="transpose" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getInverse" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getL" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getU" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getL" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getU" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="deserializeRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="multiply" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="getT" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="evaluateStep" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="5"/>
         <Value name="filterStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="sanityChecks" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="doFinalize" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="readExternal" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="writeExternal" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="writeBaseExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="5"/>
         <Value name="writeExternal" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="5"/>
         <Value name="handleStep" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="5"/>
         <Value name="getCovariances" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="5"/>
         <Value name="getBasicRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="5"/>
         <Value name="optimize" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="5"/>
         <Value name="optimize" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="5"/>
         <Value name="optimize" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="5"/>
         <Value name="nextBytes" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="logBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="5"/>
         <Value name="equals" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="5"/>
         <Value name="chooseInitialCenters" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="5"/>
         <Value name="covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="5"/>
         <Value name="evaluate" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="getResult" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="getPercentile" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="setWindowSize" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="chiSquare" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="5"/>
         <Value name="removeNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="5"/>
         <Value name="calculateHat" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="5"/>
         <Value name="fct" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="get" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="set" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="getOmegaImaginary" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="fht" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="fht" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="fst" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="parseNextCharacter" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="advance" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="containsKey" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="get" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="remove" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="advance" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="containsKey" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="get" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="remove" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="discardExtremeElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="equals" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="integrate" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="4"/>
         <Value name="searchIndex" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="computeDividedDifference" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="checkAllFiniteReal" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="checkStrictlyIncreasing" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="differentiate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="equals" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="subtract" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="computeCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="verifyInputArray" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="4"/>
         <Value name="equals" source ="Complex.java" package ="org.apache.commons.math.complex" value ="4"/>
         <Value name="format" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="4"/>
         <Value name="inverseCumulativeProbability" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="cumulativeProbability" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="probability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="qTy" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="4"/>
         <Value name="equals" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="format" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="multiply" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="format" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="crossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="decodeGeneric" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="inducedPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="getAngle" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="equals" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="multiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="operate" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setColumnMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setRowMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="operate" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setColumnMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setRowMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="add" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="mapToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="subtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="operate" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="operate" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="add" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="operate" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="subtract" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getData" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setColumn" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getData" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="setColumn" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="isNonSingular" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="isSymmetric" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getDeterminant" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getP" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getDeterminant" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getP" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="deserializeRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="dotProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="isInfinite" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getH" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getR" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="multiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="operate" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="preMultiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getCovariance" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="estimateError" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="writeExternal" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="extrapolate" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="rescale" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="readExternal" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="writeExternal" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="estimateError" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="rescale" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="sanityChecks" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="handleStep" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="buildSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="setStartConfiguration" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="guessAOmega" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="4"/>
         <Value name="fit" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="4"/>
         <Value name="updateJacobian" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="updateResidualsAndCost" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="qTy" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="doIteration" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="4"/>
         <Value name="solvePhase1" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="4"/>
         <Value name="converged" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="4"/>
         <Value name="converged" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="4"/>
         <Value name="converged" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="4"/>
         <Value name="nextGaussian" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="nextInt" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="nextVector" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="fillBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="next" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="nextHexString" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="nextPermutation" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="nextSample" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="nextVector" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="getNextReplay" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="digamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="4"/>
         <Value name="logGamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="4"/>
         <Value name="trigamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="4"/>
         <Value name="cluster" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="4"/>
         <Value name="correlation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="4"/>
         <Value name="getCorrelationPValues" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="4"/>
         <Value name="evaluate" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getResult" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="getResult" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="increment" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="equals" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="evaluate" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="4"/>
         <Value name="evaluate" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="4"/>
         <Value name="addValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="4"/>
         <Value name="setPercentileImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="4"/>
         <Value name="getStandardDeviation" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="4"/>
         <Value name="addValue" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="4"/>
         <Value name="checkNonNegative" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="checkSampleData" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="checkSampleData" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="validateCovarianceData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="4"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="4"/>
         <Value name="sumDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="4"/>
         <Value name="varianceDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="4"/>
         <Value name="computeOmega" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="getOmegaReal" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="fft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="parseFixedstring" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="parseNumber" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="transform" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="factorialLog" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="lcm" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="lcm" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="scalb" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="put" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="put" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="checkContractExpand" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="setElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="transform" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="stage" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="stage" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="verifyIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="computeSplineCoefficients" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="value" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="nextNonzero" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="updateBandwidthInterval" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="evaluate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="multiply" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="verifyInterpolationArray" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="isStrictlyIncreasing" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="buildPolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="computeUpToDegree" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="subtract" source ="Complex.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="format" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="setImaginaryCharacter" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="checkedCumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="cumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="inverseCumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="cumulativeProbability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="inverseCumulativeProbability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="probability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="setProbabilityOfSuccessInternal" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="getInitialDomain" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="inverseCumulativeProbability" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="inverseCumulativeProbability" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="inverseCumulativeProbability" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="cumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="probability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="upperCumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="getInitialDomain" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="inverseCumulativeProbability" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="inverseCumulativeProbability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="setProbabilityOfSuccessInternal" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="cumulativeProbability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="getDeviancePart" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="getStirlingError" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="cumulativeProbability" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="inverseCumulativeProbability" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="cumulativeProbability" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="probability" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="guessParametersErrors" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="updateJacobian" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="updateResidualsAndCost" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="toString" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="compareTo" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="divide" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="equals" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="toString" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="setElitismRate" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="crossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="tournament" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="getAxis" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="orthogonalizeMatrix" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="buildArray" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkAdditionCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkColumnIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkRowIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkSubMatrixIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkSubMatrixIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkSubtractionCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copySubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="extractField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getData" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getTrace" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="hashCode" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setColumnVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setColumn" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setRowVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setRow" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copySubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getData" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getTrace" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="hashCode" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setColumnVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setColumn" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setRowVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setRow" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="next" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="dotProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getL1Distance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getL1Distance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getL1Norm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getLInfDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getLInfDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getLInfNorm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getMaxIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getMinIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getNorm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="mapAddToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="set" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumnDimension" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumnDimension" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkIndex" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getDataAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getNorm" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getTrace" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="hashCode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isSingular" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="transpose" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="createBlocksLayout" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumnVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumn" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setRow" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="createBlocksLayout" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumnVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumn" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarAdd" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="scalarMultiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setRow" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getV" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getVT" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkAdditionCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkColumnIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkRowIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkSubMatrixIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkSubMatrixIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkSubtractionCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="createColumnFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="createRowFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="serializeRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="isNaN" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="unitize" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getColumnDimension" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="format" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="getRank" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkIndex" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="dotProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="reset" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="3"/>
         <Value name="checkDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="dispatchCompoundState" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="integrate" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="end" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="buildP" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="initializeHighOrderDerivatives" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="updateHighOrderDerivativesPhase2" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="setInitialStepSize" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="estimateError" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="reinitialize" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="setInterpolationControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="setStabilityCheck" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="estimateError" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="getInterpolatedDerivatives" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="getInterpolatedState" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="readBaseExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="readExternal" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="writeExternal" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="handleStep" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="start" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="evaluateSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="replaceWorstPoint" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="evaluateNewSimplex" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="guessParametersErrors" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="value" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="findUpperBound" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="equals" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="equals" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="getPivotColumn" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="equals" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="isOptimal" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="nextInt" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="nextBytes" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="getAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="nextExponential" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="nextUniform" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="shuffle" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="getNextDigest" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="resetReplayFile" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="toString" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="checkSufficientData" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="checkSufficientData" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="computeCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="covarianceToCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="getCorrelationStandardErrors" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="correlation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="getResult" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="increment" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="increment" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="increment" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="setQuantile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="equals" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="incrementAll" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="equals" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getStandardDeviation" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="append" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="equals" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="equals" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="clear" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="equals" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="getStandardDeviation" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="checkArray" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="checkNonNegative" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="checkPositive" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="checkRectangular" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="chiSquareTestDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="anovaTest" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="checkSignificanceLevel" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="containsNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="3"/>
         <Value name="getNanPositions" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="3"/>
         <Value name="recodeNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="3"/>
         <Value name="restoreNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="3"/>
         <Value name="newSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="addData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="getSlope" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="getSlopeConfidenceInterval" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="removeData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="removeData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="3"/>
         <Value name="sample" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="3"/>
         <Value name="equals" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="formatDouble" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="parseNumber" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="equals" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="checkBinomial" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="compareTo" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="factorialDouble" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="factorial" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="mulAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="subAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="subAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="key" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="value" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="computeCapacity" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="growTable" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="key" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="value" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="computeCapacity" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="growTable" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="addElementRolling" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="addElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="getElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="setExpansionMode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="setNumElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="translate" source ="MathException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="translate" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="verifyIterationCount" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="verifyIterationCount" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="verifyIterationCount" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="getResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="verifyInterval" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="smooth" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="store" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="setBrightnessExponent" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="setMicropshereElements" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="nextIndex" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="previousIndex" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="add" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="negate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="getCoefficients" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="value" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="evaluate" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="getCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="polynomialSplineDerivative" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solveAll" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="checkResultComputed" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="verifyBracketing" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="verifyInterval" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="verifySequence" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="setup" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="acos" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="asin" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="atan" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="conjugate" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="cos" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="cosh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="exp" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="hashCode" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="log" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="negate" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="pow" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="sin" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="sinh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="tan" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="tanh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="parse" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="setImaginaryFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="setRealFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="polar2Complex" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="cumulativeProbability" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="probability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="recomputeZ" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumberOfTrialsInternal" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainLowerBound" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setScaleInternal" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="density" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setMeanInternal" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setDenominatorDegreesOfFreedomInternal" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumeratorDegreesOfFreedomInternal" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="density" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getInitialDomain" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setAlphaInternal" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setBetaInternal" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="innerCumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumberOfSuccessesInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setPopulationSizeInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setSampleSizeInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainLowerBound" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDomainUpperBound" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setStandardDeviationInternal" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="probability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumberOfSuccessesInternal" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNormalAndMeanInternal" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setDegreesOfFreedomInternal" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="density" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setScaleInternal" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setShapeInternal" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="generalizedHarmonic" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setExponentInternal" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNumberOfElementsInternal" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getChiSquare" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="getRMS" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="setDenominatorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="setNumeratorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="abs" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="getReducedFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="abs" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="negate" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="setWholeFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="format" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="setWholeFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="randomBinaryRepresentation" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="mutate" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="getFitness" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="searchForFitnessUpdate" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="nextGeneration" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="isSatisfied" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="evolve" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="baseSequence" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="identityPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="randomPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="mutate" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="hashCode" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="normalize" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="format" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="parse" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="checkMultiplicationCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="extractField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumnMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumn" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRow" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumnMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumn" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getNorm" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRow" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="inverse" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="isSingular" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="luDecompose" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="solve" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="solve" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkVectorDimensions" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getMaxValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getMinValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAbsToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAcosToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAsinToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAtanToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCbrtToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCeilToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCosToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCoshToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivideToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapExpToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapExpm1ToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapFloorToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInvToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLog10ToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLog1pToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLogToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiplyToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapPowToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapRintToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSignumToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSinToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSinhToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSqrtToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapTanToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapTanhToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapUlpToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="toArray" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyOut" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowDimension" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyOut" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowDimension" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkVectorDimensions" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAddToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAdd" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivideToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInv" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInvToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiplyToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSubtractToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSubtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkVectorDimensions" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="hashCode" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="isInfinite" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAbsToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAcosToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAddToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAsinToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAtanToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCbrtToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCeilToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCosToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapCoshToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivideToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapExpToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapExpm1ToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapFloorToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInvToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLog10ToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLog1pToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapLogToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiplyToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapPowToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapRintToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSignumToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSinToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSinhToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSqrtToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapSubtractToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapTanToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapTanhToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapUlpToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="unitVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="unitize" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyOut" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumnAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumnMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getColumn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLUMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="operate" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="blockHeight" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="blockWidth" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copy" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyBlockPart" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRow" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="blockHeight" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="blockWidth" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copy" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyBlockPart" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getFrobeniusNorm" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRow" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getDeterminant" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLT" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getD" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getInverse" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkMultiplicationCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createBigIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createColumnRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createFieldDiagonalMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createFieldIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRealDiagonalMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRealIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRowRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="serializeRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getData" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="hashCode" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAddToSelf" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="set" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getQ" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="copyOut" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getRowDimension" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="format" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="parse" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getS" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getUT" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getVT" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="addToEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="multiplyEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkVectorDimensions" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="dotProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ebeMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getData" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="hashCode" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapAddToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapDivideToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapInvToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="mapMultiplyToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="set" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getQ" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEventTime" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="reset" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="stepAccepted" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="stepAccepted" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="copyArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="getInterpolatedDyDp" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="getInterpolatedDyDpDot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="getInterpolatedDyDy0" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="getInterpolatedDyDy0Dot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="readArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="readArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="writeArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="writeArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="visit" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="getInstance" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="readExternal" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="addEventHandler" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="addStepHandler" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="finalizeStep" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="computeDerivatives" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="evaluate" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="incrementIterationsCounter" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="guessPhi" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="gradient" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="value" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="fit" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="getChiSquare" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="getRMS" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="incrementIterationsCounter" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="optimize" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="computeObjectiveValue" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="incrementIterationsCounter" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="setInitialStep" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="incrementIterationsCounter" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="doOptimize" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="divideRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="getNumObjectiveFunctions" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="normalize" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="checkResultComputed" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="2"/>
         <Value name="computeObjectiveValue" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="2"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptima" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptima" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptima" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptima" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="getOptimaValues" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="nextGaussian" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getUpperBounds" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getNatural" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getRan" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="getSecRan" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextGaussian" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextInt" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextLong" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextSecureInt" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextSecureLong" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="reSeed" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="reSeedSecure" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="reSeedSecure" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="reSeed" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextVector" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="closeReplayFile" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="fill" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="fill" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="2"/>
         <Value name="centroidOf" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="2"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="rankTransform" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="increment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="checkEmpty" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="getResult" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="clear" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="clear" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="clear" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="clear" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="getN" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="getResult" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="increment" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="increment" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="getResult" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="increment" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="evaluate" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="evaluate" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="incrementAll" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="addValue" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="checkDimension" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="checkEmpty" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="clear" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getResults" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="checkEmpty" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getMean" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="getVariance" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="anovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="fill" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="estimateRegressionParametersStandardErrors" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getOmegaInverse" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="addData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getMeanSquareError" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getR" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getTotalSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="getXSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="setDistribution" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="getSumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="toString" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="clone" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="isForward" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="mdfft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="scaleArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="scaleArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="verifyDataSet" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="verifyDataSet" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="verifyInterval" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="distance1" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance1" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distanceInf" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distanceInf" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="expand" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="setInitialCapacity" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="shouldContract" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="substituteMostRecentElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="getMessage" source ="MathException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="buildMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="integrate" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="integrate" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="integrate" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="integrate" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="clearResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="getMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="resetMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="setMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="setResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="interpolate" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="interpolate" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="tricube" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="illumination" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="normal" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="reset" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="sample" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="cosAngle" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="value" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="interpolate" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="interpolate" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="degree" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="derivative" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getCoefficients" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="hashCode" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="polynomialDerivative" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="degree" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getInterpolatingPoints" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getInterpolatingValues" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="degree" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getCenters" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getNewtonCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="derivative" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getKnots" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getN" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="getPolynomials" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="createChebyshevPolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="createHermitePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="createLaguerrePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="createLegendrePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="getPolynomialFunction" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="isRootOK" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve2" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newBisectionSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newBrentSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newDefaultSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newInstance" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newNewtonSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newSecantSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newBisectionSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newBrentSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newDefaultSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newNewtonSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="newSecantSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="clearResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="getFunctionValue" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="getFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="getResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="isBracketing" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="isSequence" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="resetFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="setFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="setResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="setResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="bracket" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="midpoint" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="solve" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="fix1stArgument" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="fix2ndArgument" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="value" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="add" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="add" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="combine" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="divide" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="multiply" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="multiply" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="of" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="postCompose" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="subtract" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="value" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="add" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="createComplex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getArgument" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getField" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getImaginary" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getReal" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="isInfinite" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="isNaN" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="readResolve" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="sqrt1z" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getInstance" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getOne" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getZero" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="readResolve" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="formatComplex" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getAvailableLocales" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getImaginaryCharacter" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getImaginaryFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getInstance" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getInstance" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getRealFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="parseObject" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getAlpha" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getBeta" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setAlpha" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setBeta" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfTrials" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getProbabilityOfSuccess" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfTrials" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccess" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMedian" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getScale" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMedianInternal" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMedian" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScale" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDegreesOfFreedom" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedomInternal" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedom" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setGammaInternal" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setGamma" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMean" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDenominatorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumeratorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDenominatorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumeratorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getAlpha" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getBeta" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setAlpha" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setBeta" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getLowerDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfSuccesses" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getPopulationSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSampleSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getUpperDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="probability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccesses" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setPopulationSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setSampleSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMean" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getStandardDeviation" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMeanInternal" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setStandardDeviation" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfSuccesses" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getProbabilityOfSuccess" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccesses" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccess" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getMean" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="normalApproximateProbability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNormal" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDegreesOfFreedom" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedom" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getScale" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getShape" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getSolverAbsoluteAccuracy" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScale" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setShape" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getExponent" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getNumberOfElements" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setExponent" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfElements" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="estimate" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getCostEvaluations" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getJacobianEvaluations" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="incrementJacobianEvaluationsCounter" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="initializeEstimate" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setMaxCostEval" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getEstimate" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getName" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="isBound" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setBound" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setEstimate" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setConvergence" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setSteadyStateThreshold" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setCostRelativeTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setInitialStepBoundFactor" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setOrthoTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setParRelativeTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="addMeasurement" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="addParameter" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getAllParameters" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getMeasurements" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getUnboundParameters" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getMeasuredValue" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getPartial" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getResidual" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getTheoreticalValue" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getWeight" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="isIgnored" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setIgnored" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominatorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumeratorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="parseAndIgnoreWhitespace" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="compareTo" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="doubleValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="floatValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominator" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominatorAsInt" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominatorAsLong" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getField" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumerator" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumeratorAsInt" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumeratorAsLong" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="hashCode" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="intValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="longValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="negate" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="percentageValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="reciprocal" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="reduce" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getInstance" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getOne" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getZero" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="readResolve" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="formatBigFraction" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getAvailableLocales" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="doubleValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="floatValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDenominator" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getField" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getNumerator" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="hashCode" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="intValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="longValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="reciprocal" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getInstance" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getOne" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getZero" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="readResolve" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="formatFraction" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="format" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getAvailableLocales" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getWholeFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getWholeFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="checkValidity" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getLength" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getRepresentation" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="newFixedLengthChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="toString" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="checkValidity" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="compareTo" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="findSameChromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="isSame" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getFirst" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getSecond" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="toString" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getElitismRate" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getNumGenerations" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getCrossoverPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getCrossoverRate" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getGenerationsEvolved" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getMutationPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getMutationRate" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getRandomGenerator" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getSelectionPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setRandomGenerator" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="addChromosome" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getChromosomes" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getFittestChromosome" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getPopulationLimit" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getPopulationSize" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="iterator" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setChromosomes" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setPopulationLimit" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="toString" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="checkValidity" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="comparatorPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="decode" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="toString" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="getArity" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="select" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setArity" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyInverseTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyInverseTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distance" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getMatrix" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ0" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ1" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ2" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getQ3" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="revert" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getA1" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getA2" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getA3" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="toString" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="add" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="add" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="crossProduct" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distance1" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distanceInf" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distanceSq" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="distance" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="dotProduct" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getAlpha" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getDelta" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNorm" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNorm1" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNormInf" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getNormSq" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getX" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getY" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getZ" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="isInfinite" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="isNaN" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="negate" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="scalarMultiply" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="subtract" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="subtract" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="toString" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="formatVector3D" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="format" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getAvailableLocales" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getInstance" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getInstance" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getPrefix" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getSeparator" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getSuffix" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="parseObject" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="addToEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isSquare" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiplyEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="transpose" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="addToEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDeterminant" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getFrobeniusNorm" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isSquare" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiplyEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="transpose" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="hasNext" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="remove" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="iterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAbs" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAcos" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAsin" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAtan" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapCbrt" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapCeil" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapCos" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapCosh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivide" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapExp" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapExpm1" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapFloor" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapInv" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapLog" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapLog10" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapLog1p" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiply" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapPow" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapRint" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSignum" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSin" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSinh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSqrt" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtractToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapTan" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapTanh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapUlp" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="map" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setSubVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="sparseIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="unitVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="unitize" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDimension" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getField" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="hashCode" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toArray" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDimension" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Norm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfNorm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getNorm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNaN" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toArray" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toString" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getHouseholderVectorsRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getMainDiagonalRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSecondaryDiagonalRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isUpperBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntryAsDouble" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getPermutation" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRoundingMode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRow" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getScale" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="inverse" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isSquare" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setRoundingMode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setScale" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInverse" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="end" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="end" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="end" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="end" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDeterminant" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEigenvector" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getImagEigenvalues" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getImagEigenvalue" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRealEigenvalues" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRealEigenvalue" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="transformToTridiagonal" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getPivot" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInverse" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getPivot" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getConvertedMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getConvertedMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="start" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="visit" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="bigFractionMatrixToRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createFieldVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="fractionMatrixToRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="computeKey" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getIndex" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="hasNext" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="next" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="remove" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDimension" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntries" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSparcity" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isDefaultValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="sparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toArray" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="unitVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInverse" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getData" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDataRef" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="formatRealVector" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getAvailableLocales" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInstance" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInstance" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getPrefix" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSeparator" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSuffix" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="parseObject" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInverse" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isNonSingular" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getConditionNumber" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getNorm" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSingularValues" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSolver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getU" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getV" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="computeKey" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnDimension" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowDimension" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copy" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDimension" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntries" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getField" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapInv" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtractToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setEntry" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toArray" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getHouseholderVectorsRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getMainDiagonalRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getSecondaryDiagonalRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="addEventHandler" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="clearEventsHandlers" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventsHandlers" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventsStates" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="isEmpty" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="stop" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getConvergence" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventHandler" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getEventTime" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getMaxCheckInterval" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="getMaxIterationCount" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="reinitializeBegin" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="stop" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="eventOccurred" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="g" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="resetState" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="computeDerivatives" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getParametersDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="handleStep" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="requiresDenseOutput" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="reset" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="copy" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="copyArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getCurrentTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getInterpolatedTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getInterpolatedY" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getInterpolatedYDot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getPreviousTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="isForward" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="readExternal" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="setInterpolatedTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="writeExternal" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="addEventHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="addStepHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="clearEventHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="clearStepHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getCurrentSignedStepsize" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getCurrentStepStart" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getEventHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getMaxEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="getStepHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="setMaxEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="initializeHighOrderDerivatives" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="integrate" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase1" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase2" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="start" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getNSteps" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase1" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getCurrentStepStart" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMaxStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMinStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="integrate" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="resetInternalState" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getOrder" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="reinitialize" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="storeTime" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getOrder" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="storeTime" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="estimateError" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMaxGrowth" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getMinReduction" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getOrder" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getSafety" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setMaxGrowth" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setMinReduction" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setSafety" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getOrder" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="reinitialize" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="doCopy" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="copy" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="doCopy" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="doFinalize" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getCurrentTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getInterpolatedTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getPreviousTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="isForward" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="readExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reinitialize" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="setInterpolatedTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="shift" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="storeTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="writeExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getInstance" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="handleStep" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="readResolve" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="requiresDenseOutput" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reset" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="doCopy" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="doCopy" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="getInterpolatedStateVariation" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reinitialize" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reinitialize" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="requiresDenseOutput" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="reset" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="eventOccurred" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="g" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="resetState" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="addEndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="addEventHandler" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="addStepHandler" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="clearEventHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="clearStepHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getCurrentSignedStepsize" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getCurrentStepStart" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getEventHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getMaxEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getName" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getStepHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="requiresDenseOutput" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="resetEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setEquations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getFinalTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getInitialTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getInterpolatedState" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getInterpolatedTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="requiresDenseOutput" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="reset" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="computeDerivatives" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getDimension" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="computeDerivatives" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getDimension" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="requiresDenseOutput" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="reset" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="computeStepGrowShrinkFactor" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getMaxGrowth" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getMinReduction" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getSafety" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="getStarterIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="initializeHighOrderDerivatives" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMaxGrowth" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMinReduction" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setSafety" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setStarterIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getConvergenceChecker" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getMaxEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="getMaxIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="iterateSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setConvergenceChecker" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setMaxEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setMaxIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="jacobian" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="value" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="clearObservations" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="fit" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getObservations" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getGuessedAmplitude" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getGuessedPhase" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getGuessedPulsation" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="guess" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="gradient" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="value" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="derivative" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getAmplitude" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getPhase" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getPulsation" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="value" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getWeight" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getX" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="getY" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="doOptimize" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getConvergenceChecker" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getJacobianEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getMaxEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getMaxIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setConvergenceChecker" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="computeObjectiveGradient" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="doOptimize" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getConvergenceChecker" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getGradientEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getMaxEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="getMaxIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="optimize" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setConvergenceChecker" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setCostRelativeTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setInitialStepBoundFactor" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setOrthoTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setParRelativeTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="precondition" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setLineSearchSolver" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="doOptimize" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getMaxIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="optimize" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="setMaxIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getCoefficients" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getRelationship" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="hashCode" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="readObject" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="writeObject" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getCoefficients" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getConstantTerm" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="hashCode" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="readObject" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="writeObject" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="copyArray" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getArtificialVariableOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getConstraintTypeCounts" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getData" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getEntry" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getHeight" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getInvertedCoeffiecientSum" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumArtificialVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumDecisionVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getNumSlackVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getOriginalNumDecisionVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getRhsOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getSlackVariableOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getWidth" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="hashCode" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="normalizeConstraints" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="readObject" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="setEntry" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="subtractRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="writeObject" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="clearResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="getEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="getFunctionValue" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="getMaxEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="getResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="setResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="optimize" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="optimize" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getConvergenceChecker" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getGradientEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setConvergenceChecker" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getConvergenceChecker" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getJacobianEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setConvergenceChecker" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getConvergenceChecker" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setConvergenceChecker" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getFunctionValue" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaxEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getResult" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="optimize" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="resetAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="resetMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="resetRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPoint" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPointRef" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getValue" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="converged" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPoint" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getPointRef" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getValue" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="getValueRef" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="clear" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBoolean" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextDouble" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextFloat" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextLong" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBoolean" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextDouble" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextFloat" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextLong" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="next" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getRank" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getRootMatrix" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="findBin" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getBinCount" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getGeneratorUpperBounds" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getSampleStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="isLoaded" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextNormalizedDouble" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="createAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBoolean" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBytes" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextDouble" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextFloat" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextGaussian" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextLong" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSecureAlgorithm" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextNormalizedDouble" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="computeDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="computeDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getEmpiricalDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getMode" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getMu" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNextExponential" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNextGaussian" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNextUniform" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getSigma" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setMode" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setMu" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSigma" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="logBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedGammaP" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="regularizedGammaQ" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="addPoint" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getCenter" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getPoints" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="distanceFrom" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="hashCode" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="assignPointsToClusters" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="getNearestCluster" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getN" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="getRankCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getSumLogImpl" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setSumLogImpl" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getVarianceDirection" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="isBiasCorrected" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setVarianceDirection" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="isBiasCorrected" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getResult" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="copy" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="isBiasCorrected" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="clear" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="getN" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="hashCode" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="hashCode" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="clear" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getN" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getResult" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="clear" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getN" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getResult" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="copy" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="getQuantile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getN" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getResult" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getN" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getResult" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getN" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="increment" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="copy" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getN" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="getResult" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="clear" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getResult" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="increment" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="evaluate" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="evaluate" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="createContributingStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSecondMoment" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumOfLogs" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSummary" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsq" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVariance" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="apply" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="clear" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getElement" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getKurtosis" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getKurtosisImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getPercentileImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSkewness" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSkewnessImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSortedValues" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsq" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getValues" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVariance" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVarianceImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getWindowSize" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="removeMostRecentValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="replaceMostRecentValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeometricMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setKurtosisImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSkewnessImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getCovariance" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getDimension" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLog" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumSq" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVariance" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSecondMoment" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumOfLogs" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSummary" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsq" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVarianceImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="apply" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="clear" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getElement" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getValues" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getWindowSize" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setWindowSize" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="clear" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getCovariance" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getDimension" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLog" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumSq" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="clear" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="copy" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeoMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getGeometricMean" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMax" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMaxImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMean" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMin" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getMinImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getN" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getStandardDeviation" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSum" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumLogImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSummary" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsq" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getSumsqImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVariance" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getVarianceImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="hashCode" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="toString" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTestDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setDistribution" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="anovaFValue" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="anovaPValue" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="df" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setDistribution" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTestDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTestDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquare" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquare" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getOneWayAnova" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="getUnknownDistributionChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="homoscedasticT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaFValue" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaPValue" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="pairedT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setOneWayAnova" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setUnknownDistributionChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="compareTo" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getPosition" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getValue" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getNanStrategy" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getTiesStrategy" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="calculateBeta" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBetaVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateResiduals" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateYVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="estimateRegressandVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="estimateRegressionParameters" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="estimateRegressionParametersVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="estimateResiduals" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newXSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newYSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBeta" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBetaVariance" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateYVariance" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newCovarianceData" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newSampleData" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBeta" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateBetaVariance" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="calculateYVariance" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newXSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="clear" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getIntercept" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getInterceptStdErr" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getIntercept" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getN" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getRSquare" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getRegressionSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getRegressionSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSignificance" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSlopeConfidenceInterval" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSlopeStdErr" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSumOfCrossProducts" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSumSquaredErrors" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="predict" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="compare" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="clear" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="hashCode" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="valuesIterator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="geometricMean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="geometricMean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="max" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="max" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="meanDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="mean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="mean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="min" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="min" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="percentile" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="percentile" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="product" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="product" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumLog" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumLog" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumSq" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumSq" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sum" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sum" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="clone" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="getArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="getDimensionSizes" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="isPowerOf2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="add" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="bigDecimalValue" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="compareTo" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="divide" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="doubleValue" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getField" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getRoundingMode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getScale" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashCode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="multiply" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setRoundingMode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setScale" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="subtract" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getInstance" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getOne" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getZero" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="readResolve" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="parseAndIgnoreWhitespace" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getA" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getB" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashCode" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="cosh" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hash" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hash" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="log" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="normalizeAngle" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sinh" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hasNext" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="changeIndexSign" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsKey" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="doRemove" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="findInsertionIndex" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashOf" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="nextPowerOfTwo" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="perturb" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="probe" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="readObject" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="shouldGrowTable" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="size" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hasNext" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="buildArray" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="changeIndexSign" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsKey" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="doRemove" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="findInsertionIndex" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashOf" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="nextPowerOfTwo" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="perturb" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="probe" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="readObject" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="shouldGrowTable" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="size" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="clear" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="contract" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="copy" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="copy" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="discardFrontElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="discardMostRecentElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="expandTo" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getContractionCriteria" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getExpansionFactor" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getExpansionMode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getInternalLength" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getInternalValues" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getNumElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getValues" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashCode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setContractionCriteria" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setExpansionFactor" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="start" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="classes" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="clear" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsClass" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashCode" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="putTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="removeTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="transformers" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="resetAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="resetMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="resetRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="setAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="setMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="setRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getDimension1" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getDimension2" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getDuplicateAbscissa" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getArgument" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getArguments" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getLocalizedMessage" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getPattern" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createArithmeticException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createArrayIndexOutOfBoundsException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createConcurrentModificationException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createEOFException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createIOException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createIllegalArgumentException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createIllegalArgumentException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createIllegalStateException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createInternalError" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createNoSuchElementException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createNullPointerException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createParseException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getArguments" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getLocalizedMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getPattern" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMaxEvaluations" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMaxIterations" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getContents" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="1"/>
      </Values>
   </Metric>
   <Metric id = "TLOC" description ="Total Lines of Code">
      <Value value="39109"/>
   </Metric>
   <Metric id = "RMI" description ="Instability">
      <Values per = "packageFragment" avg = "0,538" stddev = "0,311" max = "1">
         <Value name="org.apache.commons.math.analysis.integration" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="org.apache.commons.math.genetics" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="org.apache.commons.math.ode.jacobians" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="org.apache.commons.math.optimization.fitting" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="org.apache.commons.math.optimization.linear" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="org.apache.commons.math.stat.clustering" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="org.apache.commons.math.stat.correlation" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="org.apache.commons.math.analysis.interpolation" package ="org.apache.commons.math.analysis.interpolation" value ="0,917"/>
         <Value name="org.apache.commons.math.transform" package ="org.apache.commons.math.transform" value ="0,833"/>
         <Value name="org.apache.commons.math.stat.regression" package ="org.apache.commons.math.stat.regression" value ="0,8"/>
         <Value name="org.apache.commons.math.distribution" package ="org.apache.commons.math.distribution" value ="0,75"/>
         <Value name="org.apache.commons.math.optimization.direct" package ="org.apache.commons.math.optimization.direct" value ="0,75"/>
         <Value name="org.apache.commons.math.stat.inference" package ="org.apache.commons.math.stat.inference" value ="0,727"/>
         <Value name="org.apache.commons.math.analysis.solvers" package ="org.apache.commons.math.analysis.solvers" value ="0,667"/>
         <Value name="org.apache.commons.math.optimization.univariate" package ="org.apache.commons.math.optimization.univariate" value ="0,667"/>
         <Value name="org.apache.commons.math.geometry" package ="org.apache.commons.math.geometry" value ="0,625"/>
         <Value name="org.apache.commons.math.optimization.general" package ="org.apache.commons.math.optimization.general" value ="0,545"/>
         <Value name="org.apache.commons.math.estimation" package ="org.apache.commons.math.estimation" value ="0,5"/>
         <Value name="org.apache.commons.math.stat.ranking" package ="org.apache.commons.math.stat.ranking" value ="0,5"/>
         <Value name="org.apache.commons.math.ode.nonstiff" package ="org.apache.commons.math.ode.nonstiff" value ="0,486"/>
         <Value name="org.apache.commons.math.fraction" package ="org.apache.commons.math.fraction" value ="0,476"/>
         <Value name="org.apache.commons.math.linear" package ="org.apache.commons.math.linear" value ="0,469"/>
         <Value name="org.apache.commons.math.stat.descriptive.moment" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,435"/>
         <Value name="org.apache.commons.math.stat.descriptive.rank" package ="org.apache.commons.math.stat.descriptive.rank" value ="0,375"/>
         <Value name="org.apache.commons.math.complex" package ="org.apache.commons.math.complex" value ="0,333"/>
         <Value name="org.apache.commons.math.optimization" package ="org.apache.commons.math.optimization" value ="0,333"/>
         <Value name="org.apache.commons.math.stat.descriptive.summary" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,333"/>
         <Value name="org.apache.commons.math.random" package ="org.apache.commons.math.random" value ="0,32"/>
         <Value name="org.apache.commons.math.analysis.polynomials" package ="org.apache.commons.math.analysis.polynomials" value ="0,312"/>
         <Value name="org.apache.commons.math.special" package ="org.apache.commons.math.special" value ="0,25"/>
         <Value name="org.apache.commons.math.stat" package ="org.apache.commons.math.stat" value ="0,222"/>
         <Value name="org.apache.commons.math.stat.descriptive" package ="org.apache.commons.math.stat.descriptive" value ="0,169"/>
         <Value name="org.apache.commons.math.util" package ="org.apache.commons.math.util" value ="0,161"/>
         <Value name="org.apache.commons.math.ode.events" package ="org.apache.commons.math.ode.events" value ="0,154"/>
         <Value name="org.apache.commons.math.ode.sampling" package ="org.apache.commons.math.ode.sampling" value ="0,125"/>
         <Value name="org.apache.commons.math.ode" package ="org.apache.commons.math.ode" value ="0,099"/>
         <Value name="org.apache.commons.math.analysis" package ="org.apache.commons.math.analysis" value ="0,092"/>
         <Value name="org.apache.commons.math" package ="org.apache.commons.math" value ="0,014"/>
      </Values>
   </Metric>
   <Metric id = "PAR" description ="Number of Parameters" max ="5" hint ="Move invoked method or pass an object">
      <Values per = "method" avg = "1,136" stddev = "1,276" max = "10" maxinrange="false">
         <Value name="copyBlockPart" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="10" inrange="false"/>
         <Value name="copyBlockPart" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="10" inrange="false"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10" inrange="false"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10" inrange="false"/>
         <Value name="initializeStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9" inrange="false"/>
         <Value name="tryStep" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="9" inrange="false"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="8" inrange="false"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="7" inrange="false"/>
         <Value name="integrate" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="7" inrange="false"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7" inrange="false"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7" inrange="false"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="7" inrange="false"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="7" inrange="false"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="6" inrange="false"/>
         <Value name="innerCumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="6" inrange="false"/>
         <Value name="determineLMParameter" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="6" inrange="false"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="6" inrange="false"/>
         <Value name="start" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="start" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="start" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="start" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="start" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="start" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="6" inrange="false"/>
         <Value name="start" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6" inrange="false"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6" inrange="false"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6" inrange="false"/>
         <Value name="determineLMParameter" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="6" inrange="false"/>
         <Value name="localMin" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="6" inrange="false"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="6" inrange="false"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="6" inrange="false"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="6" inrange="false"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="6" inrange="false"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="6" inrange="false"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="6" inrange="false"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="5"/>
         <Value name="bracket" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="5"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="5"/>
         <Value name="copySubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="copySubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="checkSubMatrixIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="5"/>
         <Value name="computeJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="integrate" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="integrate" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="integrate" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="integrate" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="sanityChecks" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="integrate" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="integrate" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="integrate" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="sanityChecks" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="5"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="5"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="5"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="5"/>
         <Value name="optimize" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="5"/>
         <Value name="optimize" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="5"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="5"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="5"/>
         <Value name="append" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="stage" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="4"/>
         <Value name="stage" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="4"/>
         <Value name="updateBandwidthInterval" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="computeUpToDegree" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="bracket" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="solve" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="probability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="logBinomialProbability" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="4"/>
         <Value name="determineLMDirection" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="4"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="checkSubMatrixIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSubMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="getSubMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="addEventHandler" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="4"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="4"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="addEventHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="dispatchCompoundState" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="4"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="estimateError" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="reinitialize" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="estimateError" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="reinitialize" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="estimateError" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="addEventHandler" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="extrapolate" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="setStabilityCheck" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="setStepsizeControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="estimateError" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="reinitialize" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="4"/>
         <Value name="reinitialize" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="4"/>
         <Value name="addEventHandler" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="4"/>
         <Value name="optimize" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="determineLMDirection" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="optimize" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="4"/>
         <Value name="optimize" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="4"/>
         <Value name="optimize" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="4"/>
         <Value name="optimize" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="4"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="logBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="4"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="4"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="4"/>
         <Value name="regularizedGammaP" source ="Gamma.java" package ="org.apache.commons.math.special" value ="4"/>
         <Value name="regularizedGammaQ" source ="Gamma.java" package ="org.apache.commons.math.special" value ="4"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="4"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="4"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="4"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="4"/>
         <Value name="test" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="4"/>
         <Value name="df" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="percentile" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="4"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="4"/>
         <Value name="inversetransform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="inversetransform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="transform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="transform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="mdfft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="sample" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="inversetransform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="inversetransform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="inversetransform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="transform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="transform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="4"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="formatDouble" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="findInsertionIndex" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="findInsertionIndex" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="4"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="integrate" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="integrate" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="integrate" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="integrate" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="3"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="smooth" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="interpolate" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="3"/>
         <Value name="evaluate" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="evaluate" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="buildPolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="3"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="isRootOK" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve2" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="isBracketing" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="isSequence" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="setResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="verifyBracketing" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="verifySequence" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="solve" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="3"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="format" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="format" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="getDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="getLowerDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="format" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="format" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="3"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="decodeGeneric" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="3"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="format" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="format" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="3"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="addToEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="buildArray" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copySubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="multiplyEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="addToEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="copySubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="multiplyEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="addToEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="multiplyEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="addToEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="multiplyEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="addToEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="createBlocksLayout" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="multiplyEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="addToEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="multiplyEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="visit" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="visit" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="visit" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="visit" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="visit" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="visit" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="checkSubMatrixIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="createFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="deserializeRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="deserializeRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="addToEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="multiplyEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="addToEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="multiplyEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setSubMatrix" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="format" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="format" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="addToEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="multiplyEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="setEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="eventOccurred" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="computeDerivatives" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="computeDerivatives" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="3"/>
         <Value name="updateHighOrderDerivativesPhase2" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="visit" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="updateHighOrderDerivativesPhase2" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="filterStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="rescale" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="setOrderControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="3"/>
         <Value name="eventOccurred" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="addEndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="computeDerivatives" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="computeDerivatives" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="computeDerivatives" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="start" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="optimize" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="evaluateNewSimplex" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="addObservedPoint" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="addObservedPoint" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="optimize" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="findUpperBound" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="3"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="setEntry" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="subtractRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="3"/>
         <Value name="setResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="3"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="optimize" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="optimize" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="converged" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="converged" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="converged" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="converged" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="regularizedBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="3"/>
         <Value name="chooseInitialCenters" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="cluster" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="evaluate" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="evaluate" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="evaluate" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="3"/>
         <Value name="evaluate" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="incrementAll" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="evaluate" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="test" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="3"/>
         <Value name="chiSquareTestDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="pairedTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="chiSquareTestDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="pairedTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="3"/>
         <Value name="fill" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="3"/>
         <Value name="newSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="newSampleData" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="newSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="3"/>
         <Value name="geometricMean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="max" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="mean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="min" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="product" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="sumLog" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="sumSq" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="sum" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="varianceDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="3"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="parseFixedstring" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="parseNumber" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="parseNumber" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="checkOrder" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="compareTo" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="roundUnscaled" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="buildMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="createParseException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="integrate" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="integrate" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="integrate" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="integrate" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="setResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="verifyInterval" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="2"/>
         <Value name="value" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="searchIndex" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="value" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="computeDividedDifference" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="interpolate" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="checkAllFiniteReal" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="interpolate" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="nextNonzero" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="smooth" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="store" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="cosAngle" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="interpolate" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="interpolate" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="nextIndex" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="interpolate" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="evaluate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="verifyInterpolationArray" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="verifyInputArray" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="solve" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solveAll" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solveAll" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve2" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="solve" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="setResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="verifyInterval" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="midpoint" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="value" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="combine" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="2"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="createComplex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="parseObject" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="parse" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="polar2Complex" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="cumulativeProbability" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="cumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getUpperDomain" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="setNormalAndMeanInternal" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="getDeviancePart" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="generalizedHarmonic" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="2"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parseAndIgnoreWhitespace" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parseNextCharacter" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="getReducedFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parseNextBigInteger" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="addSub" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="getReducedFraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="parse" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="evolve" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="crossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="crossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="comparatorPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="inducedPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="distance" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="orthogonalizeMatrix" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="add" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="angle" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="crossProduct" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="distance1" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="distanceInf" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="distanceSq" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="distance" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="dotProduct" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="subtract" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="parseObject" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="parse" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="buildArray" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkSubMatrixIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumn" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRow" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumn" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRow" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="set" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="set" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntryAsDouble" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumn" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRow" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createBlocksLayout" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumnVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setColumn" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRowVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setRow" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkAdditionCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkColumnIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkMultiplicationCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkRowIndex" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="checkSubtractionCompatible" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createFieldIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="serializeRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="serializeRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="computeKey" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createMatrix" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="parseObject" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="parse" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="computeKey" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="createMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getEntry" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="getSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setEntry" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="setSubVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="reset" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="stepAccepted" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="reinitializeBegin" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="reset" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="stepAccepted" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="g" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="resetState" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="handleStep" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="copyArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="copyArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="readArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="readArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="writeArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="writeArray" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="checkDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="2"/>
         <Value name="initializeHighOrderDerivatives" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="initializeHighOrderDerivatives" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="setInterpolationControl" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeCoefficients" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="2"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="reinitialize" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="handleStep" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="computeInterpolatedStateAndDerivatives" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="reinitialize" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="handleStep" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="2"/>
         <Value name="g" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="resetState" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="handleStep" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="locatePoint" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="handleStep" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="initializeHighOrderDerivatives" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="replaceWorstPoint" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="fit" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="gradient" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="value" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="gradient" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="value" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="precondition" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="2"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="getPivotRow" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="copyArray" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="divideRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="getEntry" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="2"/>
         <Value name="computeObjectiveValue" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="2"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="decompose" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextGaussian" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextInt" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextLong" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextPermutation" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextSample" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextSecureInt" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextSecureLong" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="nextUniform" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="setSecureAlgorithm" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="shuffle" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="logBeta" source ="Beta.java" package ="org.apache.commons.math.special" value ="2"/>
         <Value name="regularizedGammaP" source ="Gamma.java" package ="org.apache.commons.math.special" value ="2"/>
         <Value name="regularizedGammaQ" source ="Gamma.java" package ="org.apache.commons.math.special" value ="2"/>
         <Value name="assignPointsToClusters" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="2"/>
         <Value name="getNearestCluster" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="2"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="correlation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="correlation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="2"/>
         <Value name="copy" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="copy" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="copy" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="copy" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="evaluate" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="copy" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="evaluate" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="copy" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="evaluate" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="copy" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="copy" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="2"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="copy" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="setImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="copy" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="copy" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="copy" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="2"/>
         <Value name="chiSquareDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareTestDataSetsComparison" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquare" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="anovaTest" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="homoscedasticTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="homoscedasticT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="pairedTTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="pairedT" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="t" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareTestDataSetsComparison" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="chiSquare" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="homoscedasticTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="homoscedasticT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="homoscedasticT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="oneWayAnovaTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="pairedTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="pairedT" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="tTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="t" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="2"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="recodeNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="resolveTie" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="restoreNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="validateCovarianceData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="validateSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="newSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="addData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="removeData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="2"/>
         <Value name="compare" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="meanDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="percentile" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="sumDifference" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="set" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="fft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="mdfft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="scaleArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="scaleArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="verifyInterval" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="2"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="parseAndIgnoreWhitespace" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="parseNextCharacter" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="getA" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="getB" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="addAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="binomialCoefficientDouble" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="binomialCoefficientLog" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="binomialCoefficient" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="checkBinomial" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance1" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance1" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distanceInf" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distanceInf" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="distance" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="equals" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="gcd" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="gcd" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="lcm" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="lcm" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="log" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="mulAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="mulAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="nextAfter" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="normalizeAngle" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="normalizeArray" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="pow" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="round" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="scalb" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="subAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="subAndCheck" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="containsKey" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="probe" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="put" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="containsKey" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="probe" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="put" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="checkContractExpand" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="copy" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="discardExtremeElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="setElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="putTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="translate" source ="MathException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createArithmeticException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createArrayIndexOutOfBoundsException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createConcurrentModificationException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createEOFException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createIllegalArgumentException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createIllegalStateException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createNoSuchElementException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="createNullPointerException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="translate" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="setMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="computeSplineCoefficients" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="checkStrictlyIncreasing" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="tricube" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="value" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="setBrightnessExponent" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="setMicropshereElements" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="previousIndex" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="add" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="differentiate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="equals" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="multiply" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="subtract" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="isStrictlyIncreasing" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="value" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="createChebyshevPolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="createHermitePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="createLaguerrePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="createLegendrePolynomial" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="setFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="setup" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="fix1stArgument" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="fix2ndArgument" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="add" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="add" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="divide" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="multiply" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="multiply" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="of" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="postCompose" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="subtract" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="value" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="add" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="divide" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="equals" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="multiply" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="multiply" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="nthRoot" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="pow" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="subtract" source ="Complex.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="formatComplex" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="getInstance" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="parse" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="setImaginaryCharacter" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="setImaginaryFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="setRealFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="density" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="checkedCumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="probability" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setAlpha" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setBeta" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="probability" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfTrialsInternal" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfTrials" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccessInternal" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccess" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMedianInternal" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMedian" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScaleInternal" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScale" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedomInternal" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedom" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setGammaInternal" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setGamma" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMeanInternal" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDenominatorDegreesOfFreedomInternal" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDenominatorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumeratorDegreesOfFreedomInternal" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumeratorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setAlphaInternal" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setAlpha" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setBetaInternal" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setBeta" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="probability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccessesInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccesses" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setPopulationSizeInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setPopulationSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setSampleSizeInternal" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setSampleSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="upperCumulativeProbability" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMeanInternal" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setStandardDeviationInternal" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setStandardDeviation" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="probability" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccessesInternal" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfSuccesses" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccessInternal" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setProbabilityOfSuccess" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="normalApproximateProbability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="probability" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setMean" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNormal" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getStirlingError" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedomInternal" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setDegreesOfFreedom" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="density" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getInitialDomain" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="inverseCumulativeProbability" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScaleInternal" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setScale" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setShapeInternal" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setShape" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="cumulativeProbability" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainLowerBound" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="getDomainUpperBound" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="probability" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setExponentInternal" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setExponent" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfElementsInternal" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="setNumberOfElements" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="estimate" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getChiSquare" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getCovariances" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getRMS" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="guessParametersErrors" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="initializeEstimate" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setMaxCostEval" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setBound" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setEstimate" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="estimate" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setConvergence" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setSteadyStateThreshold" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="estimate" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="qTy" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setCostRelativeTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setInitialStepBoundFactor" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setOrthoTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setParRelativeTolerance" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="addMeasurement" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="addParameter" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="getPartial" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="setIgnored" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="setDenominatorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="setNumeratorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="compareTo" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="equals" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="pow" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="formatBigFraction" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="parse" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="add" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="compareTo" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="divide" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="equals" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="multiply" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="subtract" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="formatFraction" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getImproperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="getProperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="parse" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="setWholeFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="setWholeFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="checkValidity" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="newFixedLengthChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="checkValidity" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="isSame" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="randomBinaryRepresentation" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="mutate" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="compareTo" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="findSameChromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="isSame" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="searchForFitnessUpdate" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setElitismRate" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="isSatisfied" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="nextGeneration" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setRandomGenerator" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="addChromosome" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setChromosomes" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setPopulationLimit" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="baseSequence" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="checkValidity" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="decode" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="identityPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="isSame" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="randomPermutation" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="mutate" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="select" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="setArity" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="tournament" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyInverseTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyInverseTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="applyTo" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getAngles" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="add" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="equals" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="scalarMultiply" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="subtract" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="formatVector3D" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="getInstance" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="parse" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkAdditionCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkColumnIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkMultiplicationCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkRowIndex" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkSubtractionCompatible" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="equals" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="extractField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="extractField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumn" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowVector" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRow" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarAdd" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarMultiply" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="equals" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumn" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowVector" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRow" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarAdd" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarMultiply" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="advance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAddToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivideToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivide" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiplyToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiply" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapPowToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapPow" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtractToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="map" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkIndex" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="equals" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAddToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivideToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivide" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiplyToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiply" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtractToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="equals" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAddToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivideToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiplyToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapPowToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtractToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="equals" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumn" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRow" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarAdd" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarMultiply" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setRoundingMode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setScale" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockHeight" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockWidth" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumn" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowVector" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRow" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarAdd" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarMultiply" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toBlocksLayout" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockHeight" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="blockWidth" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumnVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getColumn" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRowVector" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRow" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarAdd" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="scalarMultiply" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="toBlocksLayout" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInOptimizedOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="findEigenVectors" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEigenvector" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getImagEigenvalue" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getRealEigenvalue" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isSymmetric" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="transformToTridiagonal" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="bigFractionMatrixToRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createColumnBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createColumnFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createColumnRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createFieldDiagonalMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createFieldVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRealDiagonalMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRealIdentityMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRealVector" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRowBigMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRowFieldMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="createRowRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="fractionMatrixToRealMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="setValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="equals" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getL1Distance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getLInfDistance" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="isDefaultValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAddToSelf" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="copyIn" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="multiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="operate" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="preMultiply" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInColumnOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="walkInRowOrder" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="formatRealVector" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getInstance" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="parse" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="solve" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getCovariance" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="add" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="append" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="buildArray" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkIndex" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="checkVectorDimensions" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="dotProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ebeMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="equals" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="getEntry" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAddToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapAdd" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivideToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapDivide" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiplyToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapMultiply" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtractToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="mapSubtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="outerProduct" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="projection" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="set" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="subtract" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="evaluateStep" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="evaluateStep" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="readExternal" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="setInterpolatedTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="writeExternal" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="addStepHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="setMaxEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase1" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="buildP" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="getInstance" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="updateHighOrderDerivativesPhase1" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setInitialStepSize" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="storeTime" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="readExternal" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="storeTime" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="writeExternal" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setMaxGrowth" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setMinReduction" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="setSafety" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="addStepHandler" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="estimateError" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="readExternal" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="resetTables" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="writeExternal" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="readExternal" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="writeExternal" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="readBaseExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="readExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="setInterpolatedTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="storeTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="writeBaseExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="writeExternal" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="readExternal" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="writeExternal" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="readExternal" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="rescale" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="writeExternal" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="addStepHandler" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setEquations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="append" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setInterpolatedTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="computeStepGrowShrinkFactor" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMaxGrowth" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setMinReduction" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setSafety" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="setStarterIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="buildSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="evaluateSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="evaluate" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="iterateSimplex" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setConvergenceChecker" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setMaxEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setMaxIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setStartConfiguration" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="setStartConfiguration" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="iterateSimplex" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="iterateSimplex" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="1"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="value" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="addObservedPoint" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="value" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="setConvergenceChecker" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="computeObjectiveGradient" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="computeObjectiveValue" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setConvergenceChecker" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="qTy" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setCostRelativeTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setInitialStepBoundFactor" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setOrthoTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setParRelativeTolerance" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="value" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setInitialStep" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setLineSearchSolver" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="setMaxIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="equals" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="readObject" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="writeObject" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="equals" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getValue" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="readObject" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="writeObject" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="doIteration" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getPivotColumn" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="solvePhase1" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="createTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="equals" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getBasicRow" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getConstraintTypeCounts" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="getInvertedCoeffiecientSum" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="normalizeConstraints" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="normalize" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="readObject" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="writeObject" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="setMaxEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="value" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setConvergenceChecker" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setConvergenceChecker" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setConvergenceChecker" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaxEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="setRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="nextBytes" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBytes" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="next" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="fillBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="findBin" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="load" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="next" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="createAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextBytes" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextInt" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSeed" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="getNatural" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextExponential" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextHexString" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextPoisson" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="nextSecureHexString" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="reSeedSecure" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="reSeed" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="computeDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="fill" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="fill" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setMode" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setMu" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setSigma" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="setValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="digamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="logGamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="trigamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="addPoint" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="centroidOf" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="distanceFrom" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="equals" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="checkSufficientData" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="checkSufficientData" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="covarianceToCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="computeCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="rankTransform" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="1"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setSumLogImpl" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setVarianceDirection" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="evaluate" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="setBiasCorrected" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="equals" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="equals" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="increment" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="increment" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="increment" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="setQuantile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="increment" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="increment" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="increment" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="increment" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="equals" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="evaluate" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="incrementAll" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="increment" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="evaluate" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="aggregate" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="apply" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getElement" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getPercentile" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="replaceMostRecentValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeometricMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setKurtosisImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setPercentileImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSkewnessImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setWindowSize" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="checkDimension" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getResults" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="apply" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="getElement" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setWindowSize" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="addValue" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="equals" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setGeoMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMaxImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setMinImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumLogImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setSumsqImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="setVarianceImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="checkArray" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="checkNonNegative" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="checkNonNegative" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="checkPositive" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="checkRectangular" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquare" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setDistribution" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="anovaFValue" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="anovaPValue" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="anovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="checkSampleData" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="checkSampleData" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="checkSignificanceLevel" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setDistribution" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="chiSquare" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaFValue" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="oneWayAnovaPValue" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setOneWayAnova" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="setUnknownDistributionChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="compareTo" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="containsNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="getNanPositions" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="rank" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="removeNaNs" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="1"/>
         <Value name="newXSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newYSampleData" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newCovarianceData" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="newXSampleData" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="addData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getIntercept" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getRegressionSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="getSlopeConfidenceInterval" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="predict" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="removeData" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="setDistribution" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="addValue" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="equals" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCount" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getCumPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="getPct" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="geometricMean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="max" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="mean" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="min" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="product" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumLog" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sumSq" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="sum" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="variance" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="fct" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="clone" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="get" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="computeOmega" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="getOmegaImaginary" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="getOmegaReal" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="fft" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="isPowerOf2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="verifyDataSet" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="verifyDataSet" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="fht" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="fht" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="fst" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="inversetransform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform2" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="transform" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="add" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="compareTo" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="divide" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="multiply" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setRoundingMode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setScale" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="subtract" source ="BigReal.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getDefaultNumberFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="evaluate" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="transform" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="cosh" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="factorialDouble" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="factorialLog" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="factorial" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hash" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hash" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="indicator" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sign" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="sinh" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="changeIndexSign" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="computeCapacity" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsKey" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="doRemove" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="findInsertionIndex" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="get" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashOf" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="nextPowerOfTwo" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="perturb" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="readObject" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="remove" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="buildArray" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="changeIndexSign" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="computeCapacity" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsKey" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="doRemove" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="findInsertionIndex" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="get" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="hashOf" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="nextPowerOfTwo" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="perturb" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="readObject" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="remove" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="addElementRolling" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="addElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="discardFrontElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="discardMostRecentElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="expandTo" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setContractionCriteria" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setExpansionFactor" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setExpansionMode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setInitialCapacity" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="setNumElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="substituteMostRecentElement" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsClass" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="containsTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="equals" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="getTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="removeTransformer" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="transform" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="setAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="setMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="setRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createIOException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createIllegalArgumentException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="createInternalError" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="getMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="printStackTrace" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="verifyIterationCount" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="verifyIterationCount" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="verifyIterationCount" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="clearResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="getMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="getResult" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="resetMinimalIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="verifyIterationCount" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="illumination" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="normal" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="reset" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="sample" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="degree" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="derivative" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getCoefficients" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="hashCode" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="negate" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="polynomialDerivative" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="toString" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="computeCoefficients" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="degree" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getCoefficients" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getInterpolatingPoints" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getInterpolatingValues" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="computeCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="degree" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getCenters" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getNewtonCoefficients" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="derivative" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getKnots" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getN" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="getPolynomials" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="polynomialSplineDerivative" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="getPolynomialFunction" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newBisectionSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newBrentSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newDefaultSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newInstance" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newNewtonSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newSecantSolver" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newBisectionSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newBrentSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newDefaultSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newNewtonSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="newSecantSolver" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="checkResultComputed" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="clearResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="getFunctionValue" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="getFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="getResult" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="resetFunctionValueAccuracy" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="asCollector" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="abs" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="acos" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="asin" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="atan" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="conjugate" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="cos" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="cosh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="exp" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getArgument" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getField" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getImaginary" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getReal" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="hashCode" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="isInfinite" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="isNaN" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="log" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="negate" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="readResolve" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="sin" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="sinh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="sqrt" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="sqrt1z" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="tan" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="tanh" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getInstance" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getOne" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getZero" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="readResolve" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getAvailableLocales" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getImaginaryCharacter" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getImaginaryFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getInstance" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="getRealFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getAlpha" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getBeta" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="recomputeZ" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getNumberOfTrials" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getProbabilityOfSuccess" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getMedian" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getScale" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getDegreesOfFreedom" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getMean" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getDenominatorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getNumeratorDegreesOfFreedom" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getAlpha" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getBeta" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getNumberOfSuccesses" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getPopulationSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSampleSize" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getMean" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getStandardDeviation" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getNumberOfSuccesses" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getProbabilityOfSuccess" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getMean" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getDegreesOfFreedom" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getScale" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getShape" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getSolverAbsoluteAccuracy" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getExponent" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="getNumberOfElements" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getCostEvaluations" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getJacobianEvaluations" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="incrementJacobianEvaluationsCounter" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="updateJacobian" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="updateResidualsAndCost" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getEstimate" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getName" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="isBound" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="qrDecomposition" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getAllParameters" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getMeasurements" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getUnboundParameters" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getMeasuredValue" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getResidual" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getTheoreticalValue" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="getWeight" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="isIgnored" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getDefaultNumberFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getDenominatorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getNumeratorFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="abs" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="bigDecimalValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="doubleValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="floatValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getDenominator" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getDenominatorAsInt" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getDenominatorAsLong" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getField" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getNumerator" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getNumeratorAsInt" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getNumeratorAsLong" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="hashCode" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="intValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="longValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="negate" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="percentageValue" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="reciprocal" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="reduce" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="toString" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getInstance" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getOne" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getZero" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="readResolve" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getAvailableLocales" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getImproperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getProperInstance" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="abs" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="doubleValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="floatValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getDenominator" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getField" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getNumerator" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="hashCode" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="intValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="longValue" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="negate" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="reciprocal" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="toString" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getInstance" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getOne" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getZero" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="readResolve" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getAvailableLocales" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getDefaultNumberFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getImproperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getProperInstance" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getWholeFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getWholeFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="getLength" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getRepresentation" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="toString" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getFitness" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getFirst" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getSecond" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="toString" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getElitismRate" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="nextGeneration" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getNumGenerations" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getCrossoverPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getCrossoverRate" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getGenerationsEvolved" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getMutationPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getMutationRate" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getRandomGenerator" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getSelectionPolicy" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getChromosomes" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getFittestChromosome" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getPopulationLimit" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getPopulationSize" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="iterator" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="toString" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="toString" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getArity" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="getAngle" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getAxis" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getMatrix" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getQ0" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getQ1" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getQ2" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getQ3" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="revert" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getA1" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getA2" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getA3" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="toString" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getAlpha" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getDelta" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getNorm" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getNorm1" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getNormInf" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getNormSq" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getX" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getY" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getZ" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="hashCode" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="isInfinite" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="isNaN" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="negate" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="normalize" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="orthogonal" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="toString" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getAvailableLocales" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getInstance" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getPrefix" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getSeparator" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="getSuffix" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getField" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getTrace" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="hashCode" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isSquare" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="toString" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="transpose" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDeterminant" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getFrobeniusNorm" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getNorm" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getTrace" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="hashCode" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="inverse" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isSingular" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isSquare" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="luDecompose" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="toString" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="transpose" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="hasNext" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="next" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="remove" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getL1Norm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getLInfNorm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getMaxIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getMaxValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getMinIndex" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getMinValue" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getNorm" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="iterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAbs" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAbsToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAcos" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAcosToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAsin" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAsinToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAtan" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAtanToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCbrt" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCbrtToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCeil" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCeilToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCos" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCosToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCosh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCoshToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapExp" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapExpToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapExpm1" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapExpm1ToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapFloor" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapFloorToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapInv" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapInvToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapLog" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapLog10" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapLog10ToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapLog1p" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapLog1pToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapLogToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapRint" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapRintToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSignum" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSignumToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSin" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSinToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSinh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSinhToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSqrt" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSqrtToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapTan" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapTanToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapTanh" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapTanhToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapUlp" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapUlpToSelf" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="sparseIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="toArray" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="unitVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="unitize" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copyOut" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDataRef" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copyOut" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDataRef" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDataRef" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDimension" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getField" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="hashCode" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapInv" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapInvToSelf" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="toArray" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDataRef" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDimension" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getL1Norm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getLInfNorm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getNorm" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="hashCode" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isInfinite" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isNaN" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAbsToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAcosToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAsinToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapAtanToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCbrtToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCeilToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCosToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapCoshToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapExpToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapExpm1ToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapFloorToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapInvToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapLog10ToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapLog1pToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapLogToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapRintToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSignumToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSinToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSinhToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapSqrtToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapTanToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapTanhToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapUlpToSelf" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="toArray" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="toString" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="unitVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="unitize" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getB" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getHouseholderVectorsRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getMainDiagonalRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSecondaryDiagonalRef" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getU" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getV" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isUpperBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="transformToLowerBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="transformToUpperBiDiagonal" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copyOut" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDataAsDoubleArray" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDataRef" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDeterminant" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getLUMatrix" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getNorm" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getPermutation" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRoundingMode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getScale" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getTrace" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="hashCode" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="inverse" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isSingular" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isSquare" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="luDecompose" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="toString" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="transpose" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="transpose" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getFrobeniusNorm" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getNorm" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="transpose" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getInverse" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isNonSingular" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDeterminant" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getL" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getLT" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSolver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="end" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="end" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="end" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="end" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getInverse" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isNonSingular" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getD" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDeterminant" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getImagEigenvalues" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRealEigenvalues" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSolver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getV" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getVT" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getInverse" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isNonSingular" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDeterminant" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getL" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getP" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getPivot" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSolver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getU" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getInverse" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isNonSingular" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDeterminant" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getL" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getP" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getPivot" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSolver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getU" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getConvertedMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getConvertedMatrix" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getIndex" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getValue" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="hasNext" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="next" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="remove" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDimension" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getEntries" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSparcity" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="hashCode" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isInfinite" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isNaN" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="sparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="toArray" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="unitVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="unitize" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getInverse" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isNonSingular" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getH" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getQ" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getQT" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getR" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSolver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copyOut" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDataRef" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getAvailableLocales" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getInstance" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getPrefix" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSeparator" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSuffix" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getInverse" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="isNonSingular" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getConditionNumber" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getNorm" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRank" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getS" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSingularValues" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSolver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getU" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getUT" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getV" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getVT" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getColumnDimension" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getRowDimension" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="copy" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getData" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getDimension" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getEntries" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getField" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="hashCode" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapInv" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="mapInvToSelf" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="toArray" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getHouseholderVectorsRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getMainDiagonalRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getQ" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getQT" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getSecondaryDiagonalRef" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="getT" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="transform" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="clearEventsHandlers" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="getEventTime" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="getEventsHandlers" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="getEventsStates" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="isEmpty" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="stop" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="getConvergence" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="getEventHandler" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="getEventTime" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="getMaxCheckInterval" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="getMaxIterationCount" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="stop" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="getHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getParametersDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getDimension" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getHandler" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="requiresDenseOutput" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="reset" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="copy" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getCurrentTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getInterpolatedDyDp" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getInterpolatedDyDpDot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getInterpolatedDyDy0" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getInterpolatedDyDy0Dot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getInterpolatedTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getInterpolatedY" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getInterpolatedYDot" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getPreviousTime" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="isForward" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="clearEventHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="clearStepHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getCurrentSignedStepsize" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getCurrentStepStart" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getEventHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getMaxEvaluations" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="getStepHandlers" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="end" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getNSteps" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getCurrentStepStart" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getMaxStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getMinStep" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="resetInternalState" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doCopy" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getOrder" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doCopy" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getOrder" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doCopy" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doFinalize" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getMaxGrowth" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getMinReduction" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getOrder" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getSafety" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doCopy" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doCopy" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="initializeArrays" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doCopy" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="getOrder" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doCopy" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doCopy" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="doCopy" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="copy" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="doCopy" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="doFinalize" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="finalizeStep" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="getCurrentTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="getInterpolatedDerivatives" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="getInterpolatedState" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="getInterpolatedTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="getPreviousTime" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="isForward" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="shift" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="getInstance" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="readResolve" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="requiresDenseOutput" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="reset" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="doCopy" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="doCopy" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="getInterpolatedStateVariation" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="requiresDenseOutput" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="reset" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="clearEventHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="clearStepHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getCurrentSignedStepsize" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getCurrentStepStart" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getEventHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getMaxEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getName" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getStepHandlers" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="requiresDenseOutput" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="resetEvaluations" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getFinalTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getInitialTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getInterpolatedState" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getInterpolatedTime" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="requiresDenseOutput" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="reset" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getDimension" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getDimension" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="requiresDenseOutput" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="reset" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getMaxGrowth" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getMinReduction" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getSafety" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="getStarterIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="getConvergenceChecker" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="getEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="getIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="getMaxEvaluations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="getMaxIterations" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="incrementIterationsCounter" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="jacobian" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="clearObservations" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getObservations" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getGuessedAmplitude" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getGuessedPhase" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getGuessedPulsation" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="guess" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="guessAOmega" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="guessPhi" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="sortObservations" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="fit" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="derivative" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getAmplitude" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getPhase" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getPulsation" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="fit" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getWeight" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getX" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="getY" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="doOptimize" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getChiSquare" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getConvergenceChecker" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getCovariances" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getJacobianEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getMaxEvaluations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getMaxIterations" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getRMS" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="guessParametersErrors" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="incrementIterationsCounter" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="updateJacobian" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="updateResidualsAndCost" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="doOptimize" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getConvergenceChecker" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getGradientEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getMaxEvaluations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="getMaxIterations" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="incrementIterationsCounter" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="doOptimize" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="doOptimize" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="qrDecomposition" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="doOptimize" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="doOptimize" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getMaxIterations" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="incrementIterationsCounter" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getCoefficients" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getRelationship" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getValue" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="hashCode" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getCoefficients" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getConstantTerm" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="hashCode" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="doOptimize" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="dropPhase1Objective" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getArtificialVariableOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getData" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getHeight" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getNumArtificialVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getNumDecisionVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getNumObjectiveFunctions" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getNumSlackVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getOriginalNumDecisionVariables" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getRhsOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getSlackVariableOffset" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getSolution" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="getWidth" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="hashCode" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="initializeColumnLabels" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="isOptimal" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="checkResultComputed" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="clearResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="getEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="getFunctionValue" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="getMaxEvaluations" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="getResult" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="getConvergenceChecker" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getGradientEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getMaxEvaluations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getMaxIterations" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getOptima" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getConvergenceChecker" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getJacobianEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getMaxEvaluations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getMaxIterations" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getOptima" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getConvergenceChecker" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getMaxEvaluations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getMaxIterations" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getOptima" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getFunctionValue" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getMaxEvaluations" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getOptima" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getOptimaValues" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getResult" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="resetAbsoluteAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="resetMaximalIterationCount" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="resetRelativeAccuracy" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getPoint" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getPointRef" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getValue" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getPoint" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getPointRef" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getValue" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="getValueRef" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="clear" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextBoolean" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextDouble" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextFloat" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextGaussian" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextInt" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextLong" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextBoolean" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextDouble" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextFloat" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextGaussian" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextInt" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextLong" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getRank" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getRootMatrix" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextVector" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getBinCount" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getBinStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getGeneratorUpperBounds" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getNextValue" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getSampleStats" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getUpperBounds" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="isLoaded" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextNormalizedDouble" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextBoolean" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextDouble" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextFloat" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextGaussian" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextInt" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextLong" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getRan" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getSecRan" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="reSeed" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="reSeedSecure" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextVector" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextNormalizedDouble" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="nextVector" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="closeReplayFile" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="computeDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getEmpiricalDistribution" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getMode" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getMu" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getNext" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getNextDigest" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getNextExponential" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getNextGaussian" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getNextReplay" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getNextUniform" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getSigma" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="getValuesFileURL" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="resetReplayFile" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="getCenter" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="getPoints" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="getPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="hashCode" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="toString" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="getCovarianceMatrix" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="getN" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="getCorrelationMatrix" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="getCorrelationPValues" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="getCorrelationStandardErrors" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="getCorrelationMatrix" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="getRankCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getN" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="checkEmpty" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getN" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getSumLogImpl" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getN" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getN" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getVarianceDirection" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="isBiasCorrected" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getN" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getN" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="isBiasCorrected" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="copy" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getN" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="isBiasCorrected" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="clear" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getN" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="hashCode" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getN" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="getResult" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="hashCode" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="clear" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="copy" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="getN" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="getResult" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="clear" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="copy" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="getN" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="getResult" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="copy" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="getQuantile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="clear" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="copy" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="getN" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="getResult" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="clear" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="copy" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="getN" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="getResult" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="clear" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="copy" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="getN" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="getResult" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="clear" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="copy" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="getN" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="getResult" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
         <Value name="clear" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="copy" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getResult" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="hashCode" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="copy" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="hashCode" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="createContributingStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeometricMean" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMax" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMean" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMin" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getN" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSecondMoment" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getStandardDeviation" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSum" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumOfLogs" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSummary" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumsq" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getVariance" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="clear" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="copy" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeometricMean" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeometricMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getKurtosis" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getKurtosisImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMax" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMaxImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMean" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMeanImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMin" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMinImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getN" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getPercentileImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSkewness" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSkewnessImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSortedValues" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getStandardDeviation" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSum" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumsq" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumsqImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getValues" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getVariance" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getVarianceImpl" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getWindowSize" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="removeMostRecentValue" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="toString" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="checkEmpty" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="clear" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getCovariance" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getDimension" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeoMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeometricMean" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMax" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMaxImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMean" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMeanImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMin" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMinImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getN" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getStandardDeviation" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSum" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumLog" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumLogImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumSq" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumsqImpl" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="hashCode" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="toString" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMax" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMean" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMin" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getN" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getStandardDeviation" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSum" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getVariance" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="hashCode" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="checkEmpty" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="clear" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="copy" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeoMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeometricMean" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMax" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMaxImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMean" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMeanImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMin" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMinImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getN" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSecondMoment" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getStandardDeviation" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSum" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumLogImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumOfLogs" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSummary" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumsq" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumsqImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getVariance" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getVarianceImpl" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="hashCode" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="toString" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="clear" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="copy" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getN" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getStandardDeviation" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getValues" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getWindowSize" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="toString" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="clear" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getCovariance" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getDimension" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeoMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeometricMean" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMax" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMaxImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMean" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMeanImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMin" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMinImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getN" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getStandardDeviation" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSum" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumLog" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumLogImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumSq" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumsqImpl" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="hashCode" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="toString" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="clear" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="copy" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeoMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getGeometricMean" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMax" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMaxImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMean" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMeanImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMin" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getMinImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getN" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getStandardDeviation" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSum" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumLogImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSummary" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumsq" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getSumsqImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getVariance" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="getVarianceImpl" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="hashCode" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="toString" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="getChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="getOneWayAnova" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="getTTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="getUnknownDistributionChiSquareTest" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="getPosition" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="getValue" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="getNanStrategy" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="getTiesStrategy" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="calculateBeta" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateBetaVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateResiduals" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateYVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="estimateRegressandVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="estimateRegressionParameters" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="estimateRegressionParametersStandardErrors" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="estimateRegressionParametersVariance" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="estimateResiduals" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateBeta" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateBetaVariance" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateYVariance" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getOmegaInverse" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateBeta" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateBetaVariance" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateHat" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="calculateYVariance" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="clear" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getIntercept" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getInterceptStdErr" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getMeanSquareError" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getN" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getR" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getRSquare" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getRegressionSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getSignificance" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getSlope" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getSlopeConfidenceInterval" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getSlopeStdErr" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getSumOfCrossProducts" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getSumSquaredErrors" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getTotalSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="getXSumSquares" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="clear" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="getSumFreq" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="hashCode" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="toString" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="valuesIterator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="clone" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="getArray" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="getDimensionSizes" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="isForward" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="bigDecimalValue" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="doubleValue" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getField" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getRoundingMode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getScale" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="hashCode" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getInstance" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getOne" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getZero" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="readResolve" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getDefaultNumberFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="hashCode" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="advance" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="hasNext" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="key" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="value" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="growTable" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="shouldGrowTable" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="size" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="advance" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="hasNext" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="key" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="value" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="growTable" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="shouldGrowTable" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="size" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="clear" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="contract" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="copy" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="expand" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getContractionCriteria" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getExpansionFactor" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getExpansionMode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getInternalLength" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getInternalValues" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getNumElements" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="getValues" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="hashCode" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="shouldContract" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="start" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="classes" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="clear" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="hashCode" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="transformers" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="resetAbsoluteAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="resetMaximalIterationCount" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="resetRelativeAccuracy" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getDimension1" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getDimension2" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getDuplicateAbscissa" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getArgument" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getArguments" source ="MathException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getLocalizedMessage" source ="MathException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getMessage" source ="MathException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getPattern" source ="MathException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="printStackTrace" source ="MathException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getArguments" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getLocalizedMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getMessage" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getPattern" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="printStackTrace" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getMaxEvaluations" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getMaxIterations" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="getContents" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "LCOM" description ="Lack of Cohesion of Methods">
      <Values per = "type" avg = "0,247" stddev = "0,301" max = "0,936">
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0,936"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0,929"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0,9"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0,892"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0,883"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,879"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0,868"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0,864"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,858"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0,857"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0,857"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,848"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0,838"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0,833"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0,833"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0,833"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0,828"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0,828"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0,825"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0,822"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0,814"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0,812"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,81"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0,807"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="0,781"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0,781"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0,778"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="0,771"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0,771"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0,769"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,755"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="0,75"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0,738"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0,722"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,714"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0,714"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0,714"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0,708"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0,69"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0,672"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0,667"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="0,667"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0,667"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0,667"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0,667"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0,667"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,667"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="0,667"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0,667"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0,641"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0,64"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0,625"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0,623"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0,614"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,606"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,6"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0,6"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0,6"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0,6"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,593"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0,593"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0,583"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0,583"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,583"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,583"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,583"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0,583"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0,573"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0,571"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,571"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0,562"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0,556"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,548"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,533"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="0,533"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,531"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0,529"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,524"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,5"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,5"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,5"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,5"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="0,5"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="0,5"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="0,5"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="0,5"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0,5"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="0,5"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,5"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,5"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0,5"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,5"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="0,5"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0,5"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0,5"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="0,5"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="0,5"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0,5"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="0,5"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0,486"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0,462"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,444"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,444"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="0,444"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0,419"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,417"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0,417"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0,417"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="0,409"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,4"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0,4"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,4"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="0,4"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,394"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0,38"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0,375"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,375"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="0,365"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,357"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0,35"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0,35"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0,333"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="0,333"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,333"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0,333"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="0,333"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="0,333"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0,3"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,3"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0,3"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0,267"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,267"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0,25"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0,25"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0,25"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0,25"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0,25"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0,25"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="0,25"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="0,25"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,25"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,25"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0,25"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0,25"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,25"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,25"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,25"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0,25"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0,233"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,208"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0,188"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0,167"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,167"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0,167"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,167"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0,14"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,125"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0,1"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "CE" description ="Efferent Coupling">
      <Values per = "packageFragment" avg = "7,526" stddev = "6,878" max = "38">
         <Value name="org.apache.commons.math.linear" package ="org.apache.commons.math.linear" value ="38"/>
         <Value name="org.apache.commons.math.distribution" package ="org.apache.commons.math.distribution" value ="24"/>
         <Value name="org.apache.commons.math.ode.nonstiff" package ="org.apache.commons.math.ode.nonstiff" value ="18"/>
         <Value name="org.apache.commons.math.optimization" package ="org.apache.commons.math.optimization" value ="16"/>
         <Value name="org.apache.commons.math.analysis.interpolation" package ="org.apache.commons.math.analysis.interpolation" value ="11"/>
         <Value name="org.apache.commons.math.analysis.solvers" package ="org.apache.commons.math.analysis.solvers" value ="10"/>
         <Value name="org.apache.commons.math.fraction" package ="org.apache.commons.math.fraction" value ="10"/>
         <Value name="org.apache.commons.math.stat.descriptive" package ="org.apache.commons.math.stat.descriptive" value ="10"/>
         <Value name="org.apache.commons.math.stat.descriptive.moment" package ="org.apache.commons.math.stat.descriptive.moment" value ="10"/>
         <Value name="org.apache.commons.math.util" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="org.apache.commons.math.analysis" package ="org.apache.commons.math.analysis" value ="9"/>
         <Value name="org.apache.commons.math.optimization.linear" package ="org.apache.commons.math.optimization.linear" value ="8"/>
         <Value name="org.apache.commons.math.random" package ="org.apache.commons.math.random" value ="8"/>
         <Value name="org.apache.commons.math.stat.inference" package ="org.apache.commons.math.stat.inference" value ="8"/>
         <Value name="org.apache.commons.math.ode" package ="org.apache.commons.math.ode" value ="7"/>
         <Value name="org.apache.commons.math.ode.sampling" package ="org.apache.commons.math.ode.sampling" value ="7"/>
         <Value name="org.apache.commons.math.analysis.integration" package ="org.apache.commons.math.analysis.integration" value ="6"/>
         <Value name="org.apache.commons.math.ode.jacobians" package ="org.apache.commons.math.ode.jacobians" value ="6"/>
         <Value name="org.apache.commons.math.optimization.fitting" package ="org.apache.commons.math.optimization.fitting" value ="6"/>
         <Value name="org.apache.commons.math.optimization.general" package ="org.apache.commons.math.optimization.general" value ="6"/>
         <Value name="org.apache.commons.math.analysis.polynomials" package ="org.apache.commons.math.analysis.polynomials" value ="5"/>
         <Value name="org.apache.commons.math.geometry" package ="org.apache.commons.math.geometry" value ="5"/>
         <Value name="org.apache.commons.math.transform" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="org.apache.commons.math" package ="org.apache.commons.math" value ="4"/>
         <Value name="org.apache.commons.math.complex" package ="org.apache.commons.math.complex" value ="4"/>
         <Value name="org.apache.commons.math.ode.events" package ="org.apache.commons.math.ode.events" value ="4"/>
         <Value name="org.apache.commons.math.stat.descriptive.summary" package ="org.apache.commons.math.stat.descriptive.summary" value ="4"/>
         <Value name="org.apache.commons.math.stat.regression" package ="org.apache.commons.math.stat.regression" value ="4"/>
         <Value name="org.apache.commons.math.estimation" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="org.apache.commons.math.optimization.direct" package ="org.apache.commons.math.optimization.direct" value ="3"/>
         <Value name="org.apache.commons.math.special" package ="org.apache.commons.math.special" value ="3"/>
         <Value name="org.apache.commons.math.stat.correlation" package ="org.apache.commons.math.stat.correlation" value ="3"/>
         <Value name="org.apache.commons.math.stat.descriptive.rank" package ="org.apache.commons.math.stat.descriptive.rank" value ="3"/>
         <Value name="org.apache.commons.math.genetics" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="org.apache.commons.math.optimization.univariate" package ="org.apache.commons.math.optimization.univariate" value ="2"/>
         <Value name="org.apache.commons.math.stat" package ="org.apache.commons.math.stat" value ="2"/>
         <Value name="org.apache.commons.math.stat.clustering" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="org.apache.commons.math.stat.ranking" package ="org.apache.commons.math.stat.ranking" value ="1"/>
      </Values>
   </Metric>
   <Metric id = "NSM" description ="Number of Static Methods">
      <Values per = "type" total = "346" avg = "1,021" stddev = "4,914" max = "63">
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="63"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="40"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="38"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="25"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="14"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="7"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="7"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="7"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="7"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="7"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="7"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="6"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="6"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="6"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="6"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="6"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="5"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="4"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="4"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="3"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="2"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="1"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="1"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "RMD" description ="Normalized Distance">
      <Values per = "packageFragment" avg = "0,355" stddev = "0,22" max = "0,778">
         <Value name="org.apache.commons.math.stat" package ="org.apache.commons.math.stat" value ="0,778"/>
         <Value name="org.apache.commons.math.special" package ="org.apache.commons.math.special" value ="0,75"/>
         <Value name="org.apache.commons.math" package ="org.apache.commons.math" value ="0,719"/>
         <Value name="org.apache.commons.math.complex" package ="org.apache.commons.math.complex" value ="0,667"/>
         <Value name="org.apache.commons.math.stat.descriptive.summary" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,667"/>
         <Value name="org.apache.commons.math.stat.descriptive.rank" package ="org.apache.commons.math.stat.descriptive.rank" value ="0,625"/>
         <Value name="org.apache.commons.math.ode.events" package ="org.apache.commons.math.ode.events" value ="0,596"/>
         <Value name="org.apache.commons.math.util" package ="org.apache.commons.math.util" value ="0,572"/>
         <Value name="org.apache.commons.math.genetics" package ="org.apache.commons.math.genetics" value ="0,571"/>
         <Value name="org.apache.commons.math.stat.descriptive.moment" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,565"/>
         <Value name="org.apache.commons.math.analysis.polynomials" package ="org.apache.commons.math.analysis.polynomials" value ="0,521"/>
         <Value name="org.apache.commons.math.ode.jacobians" package ="org.apache.commons.math.ode.jacobians" value ="0,455"/>
         <Value name="org.apache.commons.math.fraction" package ="org.apache.commons.math.fraction" value ="0,44"/>
         <Value name="org.apache.commons.math.ode.sampling" package ="org.apache.commons.math.ode.sampling" value ="0,431"/>
         <Value name="org.apache.commons.math.ode" package ="org.apache.commons.math.ode" value ="0,401"/>
         <Value name="org.apache.commons.math.stat.descriptive" package ="org.apache.commons.math.stat.descriptive" value ="0,393"/>
         <Value name="org.apache.commons.math.geometry" package ="org.apache.commons.math.geometry" value ="0,375"/>
         <Value name="org.apache.commons.math.ode.nonstiff" package ="org.apache.commons.math.ode.nonstiff" value ="0,365"/>
         <Value name="org.apache.commons.math.random" package ="org.apache.commons.math.random" value ="0,362"/>
         <Value name="org.apache.commons.math.optimization" package ="org.apache.commons.math.optimization" value ="0,351"/>
         <Value name="org.apache.commons.math.distribution" package ="org.apache.commons.math.distribution" value ="0,345"/>
         <Value name="org.apache.commons.math.analysis.integration" package ="org.apache.commons.math.analysis.integration" value ="0,333"/>
         <Value name="org.apache.commons.math.stat.ranking" package ="org.apache.commons.math.stat.ranking" value ="0,3"/>
         <Value name="org.apache.commons.math.stat.clustering" package ="org.apache.commons.math.stat.clustering" value ="0,25"/>
         <Value name="org.apache.commons.math.optimization.linear" package ="org.apache.commons.math.optimization.linear" value ="0,222"/>
         <Value name="org.apache.commons.math.stat.regression" package ="org.apache.commons.math.stat.regression" value ="0,2"/>
         <Value name="org.apache.commons.math.linear" package ="org.apache.commons.math.linear" value ="0,183"/>
         <Value name="org.apache.commons.math.stat.inference" package ="org.apache.commons.math.stat.inference" value ="0,172"/>
         <Value name="org.apache.commons.math.optimization.univariate" package ="org.apache.commons.math.optimization.univariate" value ="0,167"/>
         <Value name="org.apache.commons.math.analysis.interpolation" package ="org.apache.commons.math.analysis.interpolation" value ="0,147"/>
         <Value name="org.apache.commons.math.optimization.general" package ="org.apache.commons.math.optimization.general" value ="0,121"/>
         <Value name="org.apache.commons.math.analysis.solvers" package ="org.apache.commons.math.analysis.solvers" value ="0,103"/>
         <Value name="org.apache.commons.math.optimization.fitting" package ="org.apache.commons.math.optimization.fitting" value ="0,1"/>
         <Value name="org.apache.commons.math.analysis" package ="org.apache.commons.math.analysis" value ="0,092"/>
         <Value name="org.apache.commons.math.optimization.direct" package ="org.apache.commons.math.optimization.direct" value ="0,083"/>
         <Value name="org.apache.commons.math.estimation" package ="org.apache.commons.math.estimation" value ="0,056"/>
         <Value name="org.apache.commons.math.transform" package ="org.apache.commons.math.transform" value ="0,024"/>
         <Value name="org.apache.commons.math.stat.correlation" package ="org.apache.commons.math.stat.correlation" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "RMA" description ="Abstractness">
      <Values per = "packageFragment" avg = "0,272" stddev = "0,213" max = "1">
         <Value name="org.apache.commons.math.analysis" package ="org.apache.commons.math.analysis" value ="1"/>
         <Value name="org.apache.commons.math.distribution" package ="org.apache.commons.math.distribution" value ="0,595"/>
         <Value name="org.apache.commons.math.genetics" package ="org.apache.commons.math.genetics" value ="0,571"/>
         <Value name="org.apache.commons.math.ode" package ="org.apache.commons.math.ode" value ="0,5"/>
         <Value name="org.apache.commons.math.optimization.univariate" package ="org.apache.commons.math.optimization.univariate" value ="0,5"/>
         <Value name="org.apache.commons.math.ode.jacobians" package ="org.apache.commons.math.ode.jacobians" value ="0,455"/>
         <Value name="org.apache.commons.math.estimation" package ="org.apache.commons.math.estimation" value ="0,444"/>
         <Value name="org.apache.commons.math.ode.sampling" package ="org.apache.commons.math.ode.sampling" value ="0,444"/>
         <Value name="org.apache.commons.math.stat.inference" package ="org.apache.commons.math.stat.inference" value ="0,444"/>
         <Value name="org.apache.commons.math.stat.descriptive" package ="org.apache.commons.math.stat.descriptive" value ="0,438"/>
         <Value name="org.apache.commons.math.stat.regression" package ="org.apache.commons.math.stat.regression" value ="0,4"/>
         <Value name="org.apache.commons.math.linear" package ="org.apache.commons.math.linear" value ="0,348"/>
         <Value name="org.apache.commons.math.analysis.integration" package ="org.apache.commons.math.analysis.integration" value ="0,333"/>
         <Value name="org.apache.commons.math.optimization.direct" package ="org.apache.commons.math.optimization.direct" value ="0,333"/>
         <Value name="org.apache.commons.math.optimization.general" package ="org.apache.commons.math.optimization.general" value ="0,333"/>
         <Value name="org.apache.commons.math.random" package ="org.apache.commons.math.random" value ="0,318"/>
         <Value name="org.apache.commons.math.optimization" package ="org.apache.commons.math.optimization" value ="0,316"/>
         <Value name="org.apache.commons.math" package ="org.apache.commons.math" value ="0,267"/>
         <Value name="org.apache.commons.math.util" package ="org.apache.commons.math.util" value ="0,267"/>
         <Value name="org.apache.commons.math.ode.events" package ="org.apache.commons.math.ode.events" value ="0,25"/>
         <Value name="org.apache.commons.math.stat.clustering" package ="org.apache.commons.math.stat.clustering" value ="0,25"/>
         <Value name="org.apache.commons.math.analysis.interpolation" package ="org.apache.commons.math.analysis.interpolation" value ="0,231"/>
         <Value name="org.apache.commons.math.analysis.solvers" package ="org.apache.commons.math.analysis.solvers" value ="0,231"/>
         <Value name="org.apache.commons.math.optimization.linear" package ="org.apache.commons.math.optimization.linear" value ="0,222"/>
         <Value name="org.apache.commons.math.stat.ranking" package ="org.apache.commons.math.stat.ranking" value ="0,2"/>
         <Value name="org.apache.commons.math.analysis.polynomials" package ="org.apache.commons.math.analysis.polynomials" value ="0,167"/>
         <Value name="org.apache.commons.math.ode.nonstiff" package ="org.apache.commons.math.ode.nonstiff" value ="0,148"/>
         <Value name="org.apache.commons.math.transform" package ="org.apache.commons.math.transform" value ="0,143"/>
         <Value name="org.apache.commons.math.optimization.fitting" package ="org.apache.commons.math.optimization.fitting" value ="0,1"/>
         <Value name="org.apache.commons.math.fraction" package ="org.apache.commons.math.fraction" value ="0,083"/>
         <Value name="org.apache.commons.math.complex" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="org.apache.commons.math.geometry" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="org.apache.commons.math.special" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="org.apache.commons.math.stat" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="org.apache.commons.math.stat.correlation" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="org.apache.commons.math.stat.descriptive.moment" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="org.apache.commons.math.stat.descriptive.rank" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="org.apache.commons.math.stat.descriptive.summary" package ="org.apache.commons.math.stat.descriptive.summary" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "SIX" description ="Specialization Index">
      <Values per = "type" avg = "0,11" stddev = "0,283" max = "2">
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="2"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1,667"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1,6"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1,385"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1,333"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="1,165"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1,143"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="1,115"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1,091"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1,08"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0,787"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="0,75"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0,714"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="0,714"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,692"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="0,667"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0,647"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="0,647"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0,647"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,6"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0,6"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,562"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,562"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,5"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0,5"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0,5"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0,5"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="0,429"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,4"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,375"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,375"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,375"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0,375"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0,375"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,375"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,375"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0,353"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,333"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,333"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,333"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,333"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,3"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,3"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="0,3"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0,286"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,286"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0,286"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,273"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="0,25"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,25"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0,231"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="0,207"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="0,2"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="0,2"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="0,2"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="0,2"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0,182"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="0,182"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="0,167"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0,143"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0,143"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0,125"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="0,118"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="0,113"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="0,107"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0,091"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0,088"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0,083"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0,081"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="0,067"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="0,065"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="0,059"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0,059"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="0,054"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="0,05"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0,047"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0,046"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="0,037"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="0,03"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0,021"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="0"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="0"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="0"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="0"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="0"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="0"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="0"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="0"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "WMC" description ="Weighted methods per Class">
      <Values per = "type" total = "7975" avg = "23,525" stddev = "34,565" max = "254">
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="254"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="201"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="193"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="191"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="187"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="179"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="173"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="162"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="142"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="134"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="118"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="107"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="107"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="103"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="95"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="88"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="88"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="88"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="88"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="82"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="82"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="75"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="71"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="71"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="70"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="64"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="64"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="59"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="59"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="58"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="57"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="56"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="54"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="50"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="49"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="49"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="46"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="45"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="44"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="43"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="42"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="41"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="41"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="41"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="40"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="39"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="37"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="36"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="35"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="35"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="35"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="35"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="35"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="34"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="34"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="34"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="34"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="34"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="34"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="33"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="33"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="33"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="33"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="32"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="32"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="31"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="31"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="31"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="31"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="30"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="30"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="29"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="29"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="29"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="28"/>
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="28"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="28"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="27"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="27"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="27"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="27"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="27"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="27"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="27"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="27"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="27"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="27"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="26"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="26"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="25"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="25"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="25"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="25"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="25"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="24"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="24"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="24"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="23"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="23"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="23"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="23"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="22"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="22"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="22"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="22"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="22"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="22"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="22"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="21"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="21"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="21"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="21"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="21"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="20"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="20"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="20"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="20"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="20"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="20"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="19"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="19"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="19"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="19"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="19"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="19"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="19"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="19"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="18"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="18"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="18"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="18"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="18"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="18"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="18"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="18"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="18"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="17"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="17"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="17"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="17"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="17"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="17"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="17"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="17"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="17"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="17"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="17"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="17"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="16"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="16"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="16"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="16"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="16"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="16"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="16"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="15"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="15"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="15"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="15"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="15"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="15"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="15"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="15"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="14"/>
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="14"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="14"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="14"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="14"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="14"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="14"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="14"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="14"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="14"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="14"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="14"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="14"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="13"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="13"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="13"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="12"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="12"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="12"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="12"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="12"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="12"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="12"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="12"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="12"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="11"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="11"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="11"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="11"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="11"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="11"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="11"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="11"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="11"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="10"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="10"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="10"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="9"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="9"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="9"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="9"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="9"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="9"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="9"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="9"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="8"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="8"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="8"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="8"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="8"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="8"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="8"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="8"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="8"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="8"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="7"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="7"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="7"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="7"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="7"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="7"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="7"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="7"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="7"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="7"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="7"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="6"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="6"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="6"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="6"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="6"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="6"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="6"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="6"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="6"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="6"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="6"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="6"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="5"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="5"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="5"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="5"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="5"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="5"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="5"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="5"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="5"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="4"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="4"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="4"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="4"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="4"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="4"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="4"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="4"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="4"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="3"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="3"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="3"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="3"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="3"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="3"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="3"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="3"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="2"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="2"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="2"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="2"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="2"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="2"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="0"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="0"/>
      </Values>
   </Metric>
   <Metric id = "NSF" description ="Number of Static Attributes">
      <Values per = "type" total = "536" avg = "1,581" stddev = "3,675" max = "43">
         <Value name="DormandPrince853StepInterpolator" source ="DormandPrince853StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="43"/>
         <Value name="ComposableFunction" source ="ComposableFunction.java" package ="org.apache.commons.math.analysis" value ="27"/>
         <Value name="DormandPrince853Integrator" source ="DormandPrince853Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="20"/>
         <Value name="Fraction" source ="Fraction.java" package ="org.apache.commons.math.fraction" value ="18"/>
         <Value name="BigFraction" source ="BigFraction.java" package ="org.apache.commons.math.fraction" value ="17"/>
         <Value name="RotationOrder" source ="RotationOrder.java" package ="org.apache.commons.math.geometry" value ="12"/>
         <Value name="Vector3D" source ="Vector3D.java" package ="org.apache.commons.math.geometry" value ="12"/>
         <Value name="DormandPrince54StepInterpolator" source ="DormandPrince54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="12"/>
         <Value name="MathUtils" source ="MathUtils.java" package ="org.apache.commons.math.util" value ="12"/>
         <Value name="DormandPrince54Integrator" source ="DormandPrince54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="10"/>
         <Value name="StatUtils" source ="StatUtils.java" package ="org.apache.commons.math.stat" value ="10"/>
         <Value name="OpenIntToDoubleHashMap" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="OpenIntToFieldHashMap" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="10"/>
         <Value name="LegendreGaussIntegrator" source ="LegendreGaussIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="8"/>
         <Value name="BinaryFunction" source ="BinaryFunction.java" package ="org.apache.commons.math.analysis" value ="6"/>
         <Value name="Complex" source ="Complex.java" package ="org.apache.commons.math.complex" value ="6"/>
         <Value name="Array2DRowFieldMatrix" source ="Array2DRowFieldMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="Array2DRowRealMatrix" source ="Array2DRowRealMatrix.java" package ="org.apache.commons.math.linear" value ="6"/>
         <Value name="ValueServer" source ="ValueServer.java" package ="org.apache.commons.math.random" value ="6"/>
         <Value name="Gamma" source ="Gamma.java" package ="org.apache.commons.math.special" value ="6"/>
         <Value name="HighamHall54Integrator" source ="HighamHall54Integrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="5"/>
         <Value name="DescriptiveStatistics" source ="DescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="5"/>
         <Value name="FastFourierTransformer" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="5"/>
         <Value name="LoessInterpolator" source ="LoessInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="4"/>
         <Value name="PolynomialsUtils" source ="PolynomialsUtils.java" package ="org.apache.commons.math.analysis.polynomials" value ="4"/>
         <Value name="BrentSolver" source ="BrentSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="4"/>
         <Value name="Vector3DFormat" source ="Vector3DFormat.java" package ="org.apache.commons.math.geometry" value ="4"/>
         <Value name="BigMatrixImpl" source ="BigMatrixImpl.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="RealVectorFormat" source ="RealVectorFormat.java" package ="org.apache.commons.math.linear" value ="4"/>
         <Value name="MersenneTwister" source ="MersenneTwister.java" package ="org.apache.commons.math.random" value ="4"/>
         <Value name="TestUtils" source ="TestUtils.java" package ="org.apache.commons.math.stat.inference" value ="4"/>
         <Value name="AbstractIntegerDistribution" source ="AbstractIntegerDistribution.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="FDistributionImpl" source ="FDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="NormalDistributionImpl" source ="NormalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="PoissonDistributionImpl" source ="PoissonDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="3"/>
         <Value name="GaussNewtonEstimator" source ="GaussNewtonEstimator.java" package ="org.apache.commons.math.estimation" value ="3"/>
         <Value name="ArrayRealVector" source ="ArrayRealVector.java" package ="org.apache.commons.math.linear" value ="3"/>
         <Value name="ClassicalRungeKuttaIntegrator" source ="ClassicalRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="EulerIntegrator" source ="EulerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="GillIntegrator" source ="GillIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="GillStepInterpolator" source ="GillStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="MidpointIntegrator" source ="MidpointIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="ThreeEighthesIntegrator" source ="ThreeEighthesIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="3"/>
         <Value name="SemiVariance" source ="SemiVariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="3"/>
         <Value name="BigReal" source ="BigReal.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="ResizableDoubleArray" source ="ResizableDoubleArray.java" package ="org.apache.commons.math.util" value ="3"/>
         <Value name="MicrosphereInterpolator" source ="MicrosphereInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="2"/>
         <Value name="PolynomialFunction" source ="PolynomialFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="2"/>
         <Value name="LaguerreSolver" source ="LaguerreSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="2"/>
         <Value name="ComplexFormat" source ="ComplexFormat.java" package ="org.apache.commons.math.complex" value ="2"/>
         <Value name="BetaDistributionImpl" source ="BetaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="CauchyDistributionImpl" source ="CauchyDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ChiSquaredDistributionImpl" source ="ChiSquaredDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="ExponentialDistributionImpl" source ="ExponentialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="GammaDistributionImpl" source ="GammaDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="SaddlePointExpansion" source ="SaddlePointExpansion.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="TDistributionImpl" source ="TDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="WeibullDistributionImpl" source ="WeibullDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="2"/>
         <Value name="Rotation" source ="Rotation.java" package ="org.apache.commons.math.geometry" value ="2"/>
         <Value name="BlockFieldMatrix" source ="BlockFieldMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="BlockRealMatrix" source ="BlockRealMatrix.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="CholeskyDecompositionImpl" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="LUDecompositionImpl" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="OpenMapRealVector" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="2"/>
         <Value name="DirectSearchOptimizer" source ="DirectSearchOptimizer.java" package ="org.apache.commons.math.optimization.direct" value ="2"/>
         <Value name="SimplexTableau" source ="SimplexTableau.java" package ="org.apache.commons.math.optimization.linear" value ="2"/>
         <Value name="SimpleRealPointChecker" source ="SimpleRealPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleScalarValueChecker" source ="SimpleScalarValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialPointChecker" source ="SimpleVectorialPointChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="SimpleVectorialValueChecker" source ="SimpleVectorialValueChecker.java" package ="org.apache.commons.math.optimization" value ="2"/>
         <Value name="UniformRandomGenerator" source ="UniformRandomGenerator.java" package ="org.apache.commons.math.random" value ="2"/>
         <Value name="NaturalRanking" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="2"/>
         <Value name="FunctionEvaluationException" source ="FunctionEvaluationException.java" package ="org.apache.commons.math" value ="2"/>
         <Value name="UnivariateRealIntegratorImpl" source ="UnivariateRealIntegratorImpl.java" package ="org.apache.commons.math.analysis.integration" value ="1"/>
         <Value name="BicubicSplineInterpolatingFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="DividedDifferenceInterpolator" source ="DividedDifferenceInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="NevilleInterpolator" source ="NevilleInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="1"/>
         <Value name="UnivariateRealSolverUtils" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="LazyHolder" source ="UnivariateRealSolverUtils.java" package ="org.apache.commons.math.analysis.solvers" value ="1"/>
         <Value name="ComplexField" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="LazyHolder" source ="ComplexField.java" package ="org.apache.commons.math.complex" value ="1"/>
         <Value name="AbstractContinuousDistribution" source ="AbstractContinuousDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractDistribution" source ="AbstractDistribution.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="BinomialDistributionImpl" source ="BinomialDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="HypergeometricDistributionImpl" source ="HypergeometricDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="PascalDistributionImpl" source ="PascalDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="ZipfDistributionImpl" source ="ZipfDistributionImpl.java" package ="org.apache.commons.math.distribution" value ="1"/>
         <Value name="AbstractEstimator" source ="AbstractEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimatedParameter" source ="EstimatedParameter.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="EstimationException" source ="EstimationException.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="LevenbergMarquardtEstimator" source ="LevenbergMarquardtEstimator.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="WeightedMeasurement" source ="WeightedMeasurement.java" package ="org.apache.commons.math.estimation" value ="1"/>
         <Value name="AbstractFormat" source ="AbstractFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionField" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="LazyHolder" source ="BigFractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="BigFractionFormat" source ="BigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionConversionException" source ="FractionConversionException.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionField" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="LazyHolder" source ="FractionField.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="FractionFormat" source ="FractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperBigFractionFormat" source ="ProperBigFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="ProperFractionFormat" source ="ProperFractionFormat.java" package ="org.apache.commons.math.fraction" value ="1"/>
         <Value name="GeneticAlgorithm" source ="GeneticAlgorithm.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="InvalidRepresentationException" source ="InvalidRepresentationException.java" package ="org.apache.commons.math.genetics" value ="1"/>
         <Value name="CardanEulerSingularityException" source ="CardanEulerSingularityException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="NotARotationMatrixException" source ="NotARotationMatrixException.java" package ="org.apache.commons.math.geometry" value ="1"/>
         <Value name="ArrayFieldVector" source ="ArrayFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="Solver" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="InvalidMatrixException" source ="InvalidMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixIndexException" source ="MatrixIndexException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="MatrixVisitorException" source ="MatrixVisitorException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NonSquareMatrixException" source ="NonSquareMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotPositiveDefiniteMatrixException" source ="NotPositiveDefiniteMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="NotSymmetricMatrixException" source ="NotSymmetricMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="OpenMapRealMatrix" source ="OpenMapRealMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="RealMatrixImpl" source ="RealMatrixImpl.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SingularMatrixException" source ="SingularMatrixException.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldMatrix" source ="SparseFieldMatrix.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="SparseFieldVector" source ="SparseFieldVector.java" package ="org.apache.commons.math.linear" value ="1"/>
         <Value name="EventException" source ="EventException.java" package ="org.apache.commons.math.ode.events" value ="1"/>
         <Value name="AdamsNordsieckTransformer" source ="AdamsNordsieckTransformer.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ClassicalRungeKuttaStepInterpolator" source ="ClassicalRungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="EulerStepInterpolator" source ="EulerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GraggBulirschStoerIntegrator" source ="GraggBulirschStoerIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="GraggBulirschStoerStepInterpolator" source ="GraggBulirschStoerStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="HighamHall54StepInterpolator" source ="HighamHall54StepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="MidpointStepInterpolator" source ="MidpointStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="ThreeEighthesStepInterpolator" source ="ThreeEighthesStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="1"/>
         <Value name="LazyHolder" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="DummyStepInterpolator" source ="DummyStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="NordsieckStepInterpolator" source ="NordsieckStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="1"/>
         <Value name="ContinuousOutputModel" source ="ContinuousOutputModel.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="DerivativeException" source ="DerivativeException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="IntegratorException" source ="IntegratorException.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="InitializationCompletedMarkerException" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="1"/>
         <Value name="WeightedObservedPoint" source ="WeightedObservedPoint.java" package ="org.apache.commons.math.optimization.fitting" value ="1"/>
         <Value name="AbstractLeastSquaresOptimizer" source ="AbstractLeastSquaresOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractScalarDifferentiableOptimizer" source ="AbstractScalarDifferentiableOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="1"/>
         <Value name="AbstractLinearOptimizer" source ="AbstractLinearOptimizer.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearConstraint" source ="LinearConstraint.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="LinearObjectiveFunction" source ="LinearObjectiveFunction.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="NoFeasibleSolutionException" source ="NoFeasibleSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="SimplexSolver" source ="SimplexSolver.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="UnboundedSolutionException" source ="UnboundedSolutionException.java" package ="org.apache.commons.math.optimization.linear" value ="1"/>
         <Value name="BrentOptimizer" source ="BrentOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="1"/>
         <Value name="MultiStartDifferentiableMultivariateVectorialOptimizer" source ="MultiStartDifferentiableMultivariateVectorialOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="MultiStartUnivariateRealOptimizer" source ="MultiStartUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="OptimizationException" source ="OptimizationException.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="RealPointValuePair" source ="RealPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="VectorialPointValuePair" source ="VectorialPointValuePair.java" package ="org.apache.commons.math.optimization" value ="1"/>
         <Value name="EmpiricalDistributionImpl" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="JDKRandomGenerator" source ="JDKRandomGenerator.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomAdaptor" source ="RandomAdaptor.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="RandomDataImpl" source ="RandomDataImpl.java" package ="org.apache.commons.math.random" value ="1"/>
         <Value name="Beta" source ="Beta.java" package ="org.apache.commons.math.special" value ="1"/>
         <Value name="Cluster" source ="Cluster.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="EuclideanIntegerPoint" source ="EuclideanIntegerPoint.java" package ="org.apache.commons.math.stat.clustering" value ="1"/>
         <Value name="FirstMoment" source ="FirstMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="FourthMoment" source ="FourthMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="GeometricMean" source ="GeometricMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Kurtosis" source ="Kurtosis.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Mean" source ="Mean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="SecondMoment" source ="SecondMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Skewness" source ="Skewness.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="StandardDeviation" source ="StandardDeviation.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="ThirdMoment" source ="ThirdMoment.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Variance" source ="Variance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="VectorialCovariance" source ="VectorialCovariance.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="VectorialMean" source ="VectorialMean.java" package ="org.apache.commons.math.stat.descriptive.moment" value ="1"/>
         <Value name="Max" source ="Max.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Median" source ="Median.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Min" source ="Min.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Percentile" source ="Percentile.java" package ="org.apache.commons.math.stat.descriptive.rank" value ="1"/>
         <Value name="Product" source ="Product.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="Sum" source ="Sum.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfLogs" source ="SumOfLogs.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="SumOfSquares" source ="SumOfSquares.java" package ="org.apache.commons.math.stat.descriptive.summary" value ="1"/>
         <Value name="AggregateSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="AggregatingSummaryStatistics" source ="AggregateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="MultivariateSummaryStatistics" source ="MultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="StatisticalSummaryValues" source ="StatisticalSummaryValues.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SummaryStatistics" source ="SummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedDescriptiveStatistics" source ="SynchronizedDescriptiveStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedMultivariateSummaryStatistics" source ="SynchronizedMultivariateSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="SynchronizedSummaryStatistics" source ="SynchronizedSummaryStatistics.java" package ="org.apache.commons.math.stat.descriptive" value ="1"/>
         <Value name="TTestImpl" source ="TTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="1"/>
         <Value name="SimpleRegression" source ="SimpleRegression.java" package ="org.apache.commons.math.stat.regression" value ="1"/>
         <Value name="Frequency" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="NaturalComparator" source ="Frequency.java" package ="org.apache.commons.math.stat" value ="1"/>
         <Value name="RootsOfUnity" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="1"/>
         <Value name="BigRealField" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="LazyHolder" source ="BigRealField.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="CompositeFormat" source ="CompositeFormat.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ContinuedFraction" source ="ContinuedFraction.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="DefaultTransformer" source ="DefaultTransformer.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="TransformerMap" source ="TransformerMap.java" package ="org.apache.commons.math.util" value ="1"/>
         <Value name="ArgumentOutsideDomainException" source ="ArgumentOutsideDomainException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="ConvergenceException" source ="ConvergenceException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="DimensionMismatchException" source ="DimensionMismatchException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="DuplicateSampleAbscissaException" source ="DuplicateSampleAbscissaException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathConfigurationException" source ="MathConfigurationException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathException" source ="MathException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MathRuntimeException" source ="MathRuntimeException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxEvaluationsExceededException" source ="MaxEvaluationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MaxIterationsExceededException" source ="MaxIterationsExceededException.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="MessagesResources_fr" source ="MessagesResources_fr.java" package ="org.apache.commons.math" value ="1"/>
         <Value name="RombergIntegrator" source ="RombergIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="SimpsonIntegrator" source ="SimpsonIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="TrapezoidIntegrator" source ="TrapezoidIntegrator.java" package ="org.apache.commons.math.analysis.integration" value ="0"/>
         <Value name="BicubicSplineFunction" source ="BicubicSplineInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereInterpolatingFunction" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="MicrosphereSurfaceElement" source ="MicrosphereInterpolatingFunction.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SmoothingBicubicSplineInterpolator" source ="SmoothingBicubicSplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="SplineInterpolator" source ="SplineInterpolator.java" package ="org.apache.commons.math.analysis.interpolation" value ="0"/>
         <Value name="PolynomialFunctionLagrangeForm" source ="PolynomialFunctionLagrangeForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialFunctionNewtonForm" source ="PolynomialFunctionNewtonForm.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="PolynomialSplineFunction" source ="PolynomialSplineFunction.java" package ="org.apache.commons.math.analysis.polynomials" value ="0"/>
         <Value name="BisectionSolver" source ="BisectionSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="MullerSolver" source ="MullerSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="NewtonSolver" source ="NewtonSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="RiddersSolver" source ="RiddersSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="SecantSolver" source ="SecantSolver.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactory" source ="UnivariateRealSolverFactory.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverFactoryImpl" source ="UnivariateRealSolverFactoryImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="UnivariateRealSolverImpl" source ="UnivariateRealSolverImpl.java" package ="org.apache.commons.math.analysis.solvers" value ="0"/>
         <Value name="ComplexUtils" source ="ComplexUtils.java" package ="org.apache.commons.math.complex" value ="0"/>
         <Value name="SimpleEstimationProblem" source ="SimpleEstimationProblem.java" package ="org.apache.commons.math.estimation" value ="0"/>
         <Value name="AbstractListChromosome" source ="AbstractListChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="BinaryChromosome" source ="BinaryChromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="BinaryMutation" source ="BinaryMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="Chromosome" source ="Chromosome.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ChromosomePair" source ="ChromosomePair.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ElitisticListPopulation" source ="ElitisticListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="FixedGenerationCount" source ="FixedGenerationCount.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="ListPopulation" source ="ListPopulation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="OnePointCrossover" source ="OnePointCrossover.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="RandomKey" source ="RandomKey.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="RandomKeyMutation" source ="RandomKeyMutation.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="TournamentSelection" source ="TournamentSelection.java" package ="org.apache.commons.math.genetics" value ="0"/>
         <Value name="AbstractFieldMatrix" source ="AbstractFieldMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="AbstractRealMatrix" source ="AbstractRealMatrix.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="AbstractRealVector" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EntryImpl" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SparseEntryIterator" source ="AbstractRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BiDiagonalTransformer" source ="BiDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="CholeskyDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixChangingVisitor" source ="DefaultFieldMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultFieldMatrixPreservingVisitor" source ="DefaultFieldMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixChangingVisitor" source ="DefaultRealMatrixChangingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="DefaultRealMatrixPreservingVisitor" source ="DefaultRealMatrixPreservingVisitor.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="EigenDecompositionImpl" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="EigenDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FieldLUDecompositionImpl" source ="FieldLUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="LUDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="MatrixUtils" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="BigFractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="FractionMatrixConverter" source ="MatrixUtils.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapEntry" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="OpenMapSparseIterator" source ="OpenMapRealVector.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="QRDecompositionImpl" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="QRDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="SingularValueDecompositionImpl" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="Solver" source ="SingularValueDecompositionImpl.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="TriDiagonalTransformer" source ="TriDiagonalTransformer.java" package ="org.apache.commons.math.linear" value ="0"/>
         <Value name="CombinedEventsManager" source ="CombinedEventsManager.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="EventState" source ="EventState.java" package ="org.apache.commons.math.ode.events" value ="0"/>
         <Value name="FirstOrderIntegratorWithJacobians" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="EventHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="FiniteDifferencesWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="MappingWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepHandlerWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="StepInterpolatorWrapper" source ="FirstOrderIntegratorWithJacobians.java" package ="org.apache.commons.math.ode.jacobians" value ="0"/>
         <Value name="AdamsBashforthIntegrator" source ="AdamsBashforthIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsIntegrator" source ="AdamsIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdamsMoultonIntegrator" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="Corrector" source ="AdamsMoultonIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AdaptiveStepsizeIntegrator" source ="AdaptiveStepsizeIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="EmbeddedRungeKuttaIntegrator" source ="EmbeddedRungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaIntegrator" source ="RungeKuttaIntegrator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="RungeKuttaStepInterpolator" source ="RungeKuttaStepInterpolator.java" package ="org.apache.commons.math.ode.nonstiff" value ="0"/>
         <Value name="AbstractStepInterpolator" source ="AbstractStepInterpolator.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="DummyStepHandler" source ="DummyStepHandler.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="StepNormalizer" source ="StepNormalizer.java" package ="org.apache.commons.math.ode.sampling" value ="0"/>
         <Value name="AbstractIntegrator" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="EndTimeChecker" source ="AbstractIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="FirstOrderConverter" source ="FirstOrderConverter.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="MultistepIntegrator" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="CountingDifferentialEquations" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="NordsieckInitializer" source ="MultistepIntegrator.java" package ="org.apache.commons.math.ode" value ="0"/>
         <Value name="MultiDirectional" source ="MultiDirectional.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="NelderMead" source ="NelderMead.java" package ="org.apache.commons.math.optimization.direct" value ="0"/>
         <Value name="CurveFitter" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="TheoreticalValuesFunction" source ="CurveFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicCoefficientsGuesser" source ="HarmonicCoefficientsGuesser.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFitter" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricHarmonicFunction" source ="HarmonicFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="HarmonicFunction" source ="HarmonicFunction.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="PolynomialFitter" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="ParametricPolynomial" source ="PolynomialFitter.java" package ="org.apache.commons.math.optimization.fitting" value ="0"/>
         <Value name="GaussNewtonOptimizer" source ="GaussNewtonOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LevenbergMarquardtOptimizer" source ="LevenbergMarquardtOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="NonLinearConjugateGradientOptimizer" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="IdentityPreconditioner" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="LineSearchFunction" source ="NonLinearConjugateGradientOptimizer.java" package ="org.apache.commons.math.optimization.general" value ="0"/>
         <Value name="AbstractUnivariateRealOptimizer" source ="AbstractUnivariateRealOptimizer.java" package ="org.apache.commons.math.optimization.univariate" value ="0"/>
         <Value name="LeastSquaresConverter" source ="LeastSquaresConverter.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartDifferentiableMultivariateRealOptimizer" source ="MultiStartDifferentiableMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="MultiStartMultivariateRealOptimizer" source ="MultiStartMultivariateRealOptimizer.java" package ="org.apache.commons.math.optimization" value ="0"/>
         <Value name="AbstractRandomGenerator" source ="AbstractRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="BitsStreamGenerator" source ="BitsStreamGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="CorrelatedRandomVectorGenerator" source ="CorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="ArrayDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="DataAdapterFactory" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="StreamDataAdapter" source ="EmpiricalDistributionImpl.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="GaussianRandomGenerator" source ="GaussianRandomGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UncorrelatedRandomVectorGenerator" source ="UncorrelatedRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="UnitSphereRandomVectorGenerator" source ="UnitSphereRandomVectorGenerator.java" package ="org.apache.commons.math.random" value ="0"/>
         <Value name="Erf" source ="Erf.java" package ="org.apache.commons.math.special" value ="0"/>
         <Value name="KMeansPlusPlusClusterer" source ="KMeansPlusPlusClusterer.java" package ="org.apache.commons.math.stat.clustering" value ="0"/>
         <Value name="Covariance" source ="Covariance.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="PearsonsCorrelation" source ="PearsonsCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="SpearmansCorrelation" source ="SpearmansCorrelation.java" package ="org.apache.commons.math.stat.correlation" value ="0"/>
         <Value name="AbstractStorelessUnivariateStatistic" source ="AbstractStorelessUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="AbstractUnivariateStatistic" source ="AbstractUnivariateStatistic.java" package ="org.apache.commons.math.stat.descriptive" value ="0"/>
         <Value name="ChiSquareTestImpl" source ="ChiSquareTestImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="OneWayAnovaImpl" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="AnovaStats" source ="OneWayAnovaImpl.java" package ="org.apache.commons.math.stat.inference" value ="0"/>
         <Value name="IntDoublePair" source ="NaturalRanking.java" package ="org.apache.commons.math.stat.ranking" value ="0"/>
         <Value name="AbstractMultipleLinearRegression" source ="AbstractMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="GLSMultipleLinearRegression" source ="GLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="OLSMultipleLinearRegression" source ="OLSMultipleLinearRegression.java" package ="org.apache.commons.math.stat.regression" value ="0"/>
         <Value name="FastCosineTransformer" source ="FastCosineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="MultiDimensionalComplexMatrix" source ="FastFourierTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastHadamardTransformer" source ="FastHadamardTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="FastSineTransformer" source ="FastSineTransformer.java" package ="org.apache.commons.math.transform" value ="0"/>
         <Value name="Iterator" source ="OpenIntToDoubleHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="Iterator" source ="OpenIntToFieldHashMap.java" package ="org.apache.commons.math.util" value ="0"/>
         <Value name="ConvergingAlgorithmImpl" source ="ConvergingAlgorithmImpl.java" package ="org.apache.commons.math" value ="0"/>
      </Values>
   </Metric>
   </Metrics>
