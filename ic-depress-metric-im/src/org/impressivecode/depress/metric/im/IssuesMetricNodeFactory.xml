<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="./im.png" type="Manipulator">
    <name>Issues Metric</name>

    <shortDescription>
        Issues Metric, ImpressiveCode DePress Plugin Framework.
    </shortDescription>

    <fullDescription>
        <intro>
            <p>
                Issues Metric in particular links issue reports with modification (commit message) reports. As a linking
                algorithm we use simple matching approach. Additionally we compute number of issues
                and number of unique
                issues. The plugin itself is simple but using KNIME we are easily able to extend its functionality.
                For instance using native row flter plugin we can
                include only bug issues and thus we can compute
                <u>number
                    of post release bugs</u>
                    metric. In first step raw data are being extracted from external systems (SCM and ITS). In next
                    step row filter is being executed: first time in order to include
                    issues which have type set as 'bug' and
                    second time in order to include those which have resolution set as 'fixed'. In the
                    fourth step filtered
                    data and raw data from SCM are used
                    as input source in Issues Metric plugin.
            </p>
            <p>
                Please check workflow examples
                <a href="https://github.com/ImpressiveCode/ic-depress/tree/master/ic-depress-metric-im/examples">here</a>
                or inside plugin jar.
                <br />
                Copyright (c) ImpressiveCode,
                <a href="https://github.com/ImpressiveCode/ic-depress">DePress Project</a>
            </p>
        </intro>
    </fullDescription>

    <ports>
        <inPort index="0" name="SCM Data">Change history data could be retrieved from any Source Repository (e.g. GIT or SVN
            Adapter plugin). It should consist at least from Class (RowId, type string) and Marker (string) column.
        </inPort>
        <inPort index="1" name="ITS Data">Issue Tracking System data, could be retrieved from any ITS extension, should
            consists at least from IssueId column.
        </inPort>
        <outPort index="0" name="Metric results">Data table with computed Number Of Issues Metric.</outPort>
    </ports>
</knimeNode>
