<!--
RSS generated by JIRA (4.4.5#665-sha1:422aeadac7e4462fb4ae63fce804ff78c4258dd6) at Fri May 11 21:15:06 UTC 2012

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?jqlQuery=project+%3D+MATH+AND+issuetype+%3D+Bug+AND+priority+in+%28Blocker%2C+Critical%2C+Major%2C+Minor%29+AND+resolution+in+%28Fixed%2C+Later%29+AND+affectedVersion+%3D+12313444+AND+status+in+%28Reopened%2C+Resolved%2C+Closed%29&tempMax=1000&field=key&field=summary
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="https://issues.apache.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>ASF JIRA</title>
        <link>https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=project+%3D+MATH+AND+issuetype+%3D+Bug+AND+priority+in+%28Blocker%2C+Critical%2C+Major%2C+Minor%29+AND+resolution+in+%28Fixed%2C+Later%29+AND+affectedVersion+%3D+12313444+AND+status+in+%28Reopened%2C+Resolved%2C+Closed%29</link>
        <description>An XML representation of a search request</description>
                <language>en-uk</language>
                        <issue start="0" end="42" total="42"/>
                <build-info>
            <version>4.4.5</version>
            <build-number>665</build-number>
            <build-date>15-02-2012</build-date>
        </build-info>
<item>
            <title>[MATH-724] RandomDataImpl.nextInt does not distribute uniformly for negative lower bound</title>
                <link>https://issues.apache.org/jira/browse/MATH-724</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;When using the RandomDataImpl.nextInt function to get a uniform sample in a &lt;span class=&quot;error&quot;&gt;&amp;#91;lower, upper&amp;#93;&lt;/span&gt; interval, when the lower value is less than zero, the output is not uniformly distributed, as the lowest value is practically never returned.&lt;/p&gt;

&lt;p&gt;See the attached NextIntUniformTest.java file. It uses a &lt;span class=&quot;error&quot;&gt;&amp;#91;-3, 5&amp;#93;&lt;/span&gt; interval. For several values between 0 and 1, testNextIntUniform1 prints the return value of RandomDataImpl.nextInt (as double and as int). We see that -2 through 5 are returned several times. The -3 value however, is only returned for 0.0, and is thus under-respresented in the integer samples. The output of test method testNextIntUniform2 also clearly shows that value -3 is never sampled.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12534797">MATH-724</key>
            <summary>RandomDataImpl.nextInt does not distribute uniformly for negative lower bound</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="dhendriks">Dennis Hendriks</reporter>
                        <labels>
                    </labels>
                <created>Mon, 12 Dec 2011 15:03:41 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:27 +0000</updated>
                    <resolved>Tue, 20 Dec 2011 21:14:16 +0000</resolved>
                            <version>1.0</version>
                <version>1.1</version>
                <version>1.2</version>
                <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13167518" author="dhendriks" created="Mon, 12 Dec 2011 15:04:41 +0000"  >&lt;p&gt;NextIntUniformTest.java: see issue description&lt;/p&gt;</comment>
                    <comment id="13167594" author="psteitz" created="Mon, 12 Dec 2011 16:49:17 +0000"  >&lt;p&gt;Thanks for reporting this. The problem is in the rounding, which does not work correctly for negative values.  My first inclination is to test for negative lower bound and just shift the interval in that case.  Any better ideas?&lt;/p&gt;</comment>
                    <comment id="13168218" author="dhendriks" created="Tue, 13 Dec 2011 08:23:11 +0000"  >&lt;p&gt;math-724.patch: it first scales the [0..1) interval to [0..length), then discretizes it, and finally shifts it to &lt;span class=&quot;error&quot;&gt;&amp;#91;lower, upper&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;It may be a good idea to also add some tests for cases such as &lt;span class=&quot;error&quot;&gt;&amp;#91;0,3&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;3,5&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;-3,5&amp;#93;&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;&amp;#91;-5, -3&amp;#93;&lt;/span&gt;, and see if the distribution of sampled values is uniform. It seems RandomDataTest.testNextInt does this using chiSquare, but since I&apos;m not familiar with that, I&apos;m not sure how to add more tests for the other lower/upper bound pairs...&lt;/p&gt;</comment>
                    <comment id="13168225" author="dhendriks" created="Tue, 13 Dec 2011 08:33:52 +0000"  >&lt;p&gt;I just ran the unit tests with my patch applied, an the following test, in RandomDataTest:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@Test
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testNextIntExtremeValues() {
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x = randomData.nextInt(&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MIN_VALUE, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MAX_VALUE);
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; y = randomData.nextInt(&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MIN_VALUE, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MAX_VALUE);
        Assert.assertFalse(x == y);
    }&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;fails, as does testNextLongExtremeValues. Both x and y become equal to Integer.MIN_VALUE, making x == y to become true, causing the assertion to fail...&lt;/p&gt;</comment>
                    <comment id="13168249" author="dhendriks" created="Tue, 13 Dec 2011 09:14:05 +0000"  >&lt;p&gt;Also note that RandomDataImpl.nextUniform uses a similar scale/shift method to transform the range. It may thus suffer from the same failure in case of extreme values...&lt;/p&gt;</comment>
                    <comment id="13169384" author="dhendriks" created="Wed, 14 Dec 2011 14:16:39 +0000"  >&lt;p&gt;math-724-v2.patch: 2nd patch.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think all unit tests work now, including the ones for the Integer.MIN_VALUE to Integer.MAX_VALUE interval.&lt;/li&gt;
	&lt;li&gt;The original problem was that negative values were rounded up by the conversion from double to int, while positive numbers were rounded down. By using floor, we first round the numbers down, and then convert to integer, thus ensuring a proper uniform distribution.&lt;/li&gt;
	&lt;li&gt;Test cases for negative values are still missing... Could someone else add them?&lt;/li&gt;
	&lt;li&gt;RandomDataImpl.nextUniform: I haven&apos;t changed this, as the change that I used for integers does not have the desired effect for doubles... This may be caused by the fact that Double.MIN_VALUE is more negative than Double.MAX_VALUE is positive, but I&apos;m not really sure. Maybe it is not even an issue for the nextUniform method?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13169406" author="erans" created="Wed, 14 Dec 2011 14:41:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt; the fact that Double.MIN_VALUE is more negative &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#MIN_VALUE&quot;&gt;Double.Min_VALUE&lt;/a&gt; is a &lt;em&gt;positive&lt;/em&gt; number.&lt;/p&gt;</comment>
                    <comment id="13170025" author="dhendriks" created="Thu, 15 Dec 2011 08:23:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;Double.Min_VALUE is a positive number.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oops...&lt;/p&gt;

&lt;p&gt;OK, I uploaded a third version of the patch (math-724-v3.patch), which also applies the new formula for nextUniform. I included two test files (NextUniformTest3.java and NextIntTest3.java), that show the results for nextInt and nextUniform, for both the old and new formulas. As for as I can see, the new formula works equally well or better in all cases. Also, all existing unit tests pass.&lt;/p&gt;</comment>
                    <comment id="13173508" author="psteitz" created="Tue, 20 Dec 2011 21:14:16 +0000"  >&lt;p&gt;Thanks for reporting and diagnosing this, Dennis.&lt;/p&gt;

&lt;p&gt;Slightly modified version of the third patch (just removing unecessary parens), along with tests, committed in r1221490.  The &quot;negativeToPositiveRange&quot; tests fail before the fix.  The change to nextUniform is also needed to prevent overflows. I changed the relevant test cases to use the TestUtils chisquare test, which is more straightforward and has better output.  This was added after the original versions of these tests were written.  Others in this class should be similarly updated.  Patches welcome to further tidy the tests, but this issue can be resolved.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12507485" name="NextIntTest3.java" size="5847" author="dhendriks" created="Thu, 15 Dec 2011 08:23:17 +0000" />
                    <attachment id="12507005" name="NextIntUniformTest.java" size="2779" author="dhendriks" created="Mon, 12 Dec 2011 15:04:41 +0000" />
                    <attachment id="12507486" name="NextUniformTest3.java" size="5778" author="dhendriks" created="Thu, 15 Dec 2011 08:23:17 +0000" />
                    <attachment id="12507355" name="math-724-v2.patch" size="1754" author="dhendriks" created="Wed, 14 Dec 2011 14:16:39 +0000" />
                    <attachment id="12507487" name="math-724-v3.patch" size="1942" author="dhendriks" created="Thu, 15 Dec 2011 08:23:17 +0000" />
                    <attachment id="12507147" name="math-724.patch" size="1532" author="dhendriks" created="Tue, 13 Dec 2011 08:23:11 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 12 Dec 2011 16:49:17 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-723] BitStreamGenerators (MersenneTwister, Well generators) do not clear normal deviate cache on setSeed</title>
                <link>https://issues.apache.org/jira/browse/MATH-723</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The BitStream generators generate normal deviates (for nextGaussian) in pairs, caching the last value generated. When reseeded, the cache should be cleared; otherwise seeding two generators with the same value is not guaranteed to generate the same sequence.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12534683">MATH-723</key>
            <summary>BitStreamGenerators (MersenneTwister, Well generators) do not clear normal deviate cache on setSeed</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="psteitz">Phil Steitz</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Sun, 11 Dec 2011 21:03:37 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:48 +0000</updated>
                    <resolved>Sun, 11 Dec 2011 21:59:41 +0000</resolved>
                            <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13167220" author="psteitz" created="Sun, 11 Dec 2011 21:59:41 +0000"  >&lt;p&gt;Fixed in r1213087.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-719] Strange deprecations in API</title>
                <link>https://issues.apache.org/jira/browse/MATH-719</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;Sorry if this doesn&apos;t belong here. I couldn&apos;t find any sort of mailing list or other feedback mechanism on the website.&lt;/p&gt;

&lt;p&gt;RealMatrix has some very odd deprecations. In particular inverse(), getDeterminant() and isSingular(). The last has the message:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Deprecated. as of release 2.0, replaced by the boolean negation of new LUDecompositionImpl(m).getSolver().isNonSingular()&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s an implementation, not an interface. The whole point of having an interface is that &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I can query whether a matrix is singular withou having to know about LUDecompositions&lt;/li&gt;
	&lt;li&gt;You guys can change the implementation of isSingular() if something better pops up without us guys having to change our code.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m not using these methods now, because they&apos;re deprecated, but I&apos;ve basically recreated them in as static methods in a utility class. Wouldn&apos;t it be much better to just put code from the deprecation message into the method and remove the deprecation?&lt;/p&gt;
</description>
                <environment></environment>
            <key id="12534055">MATH-719</key>
            <summary>Strange deprecations in API</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="7">Later</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="pbloem">Peter Bloem</reporter>
                        <labels>
                        <label>api-change</label>
                        <label>deprecated</label>
                    </labels>
                <created>Tue, 6 Dec 2011 17:07:24 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:38 +0000</updated>
                    <resolved>Mon, 23 Jan 2012 11:28:07 +0000</resolved>
                            <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13163737" author="erans" created="Tue, 6 Dec 2011 18:50:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;Sorry if this doesn&apos;t belong here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Indeed, you&apos;d better bring this kind of issue to the &quot;dev&quot; ML. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
The more so that there have been recent discussions about changing the matrix API and decisions ought to be made quite soon now.&lt;/p&gt;</comment>
                    <comment id="13163786" author="pbloem" created="Tue, 6 Dec 2011 20:07:17 +0000"  >&lt;p&gt;Ah, so there is a mailing list. I guess I should have looked a little harder. I&apos;ll bring it up there.&lt;/p&gt;</comment>
                    <comment id="13191118" author="erans" created="Mon, 23 Jan 2012 11:28:07 +0000"  >&lt;p&gt;It is unlikely that we can come up with a new design before the release of v3.0.&lt;br/&gt;
This must be thoroughly discussed first on the &quot;dev&quot; ML, together with other matrix interface issues.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 6 Dec 2011 18:50:10 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-692] Cumulative probability and inverse cumulative probability inconsistencies</title>
                <link>https://issues.apache.org/jira/browse/MATH-692</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;There are some inconsistencies in the documentation and implementation of functions regarding cumulative probabilities and inverse cumulative probabilities. More precisely, &apos;&amp;lt;&apos; and &apos;&amp;lt;=&apos; are not used in a consistent way.&lt;/p&gt;

&lt;p&gt;Besides I would move the function inverseCumulativeProbability(double) to the interface Distribution. A true inverse of the distribution function does neither exist for Distribution nor for ContinuosDistribution. Thus we need to define the inverse in terms of quantiles anyway, and this can already be done for Distribution.&lt;/p&gt;

&lt;p&gt;On the whole I would declare the (inverse) cumulative probability functions in the basic distribution interfaces as follows:&lt;/p&gt;

&lt;p&gt;Distribution:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;cumulativeProbability(double x): returns P(X &amp;lt;= x)&lt;/li&gt;
	&lt;li&gt;cumulativeProbability(double x0, double x1): returns P(x0 &amp;lt; X &amp;lt;= x1) &lt;span class=&quot;error&quot;&gt;&amp;#91;see also 1)&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;inverseCumulativeProbability(double p):&lt;br/&gt;
  returns the quantile function inf{x in R | P(X&amp;lt;=x) &amp;gt;= p} &lt;span class=&quot;error&quot;&gt;&amp;#91;see also 2), 3), and 4)&amp;#93;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;1) An aternative definition could be P(x0 &amp;lt;= X &amp;lt;= x1). But this requires to put the function probability(double x) or another cumulative probability function into the interface Distribution in order be able to calculate P(x0 &amp;lt;= X &amp;lt;= x1) in AbstractDistribution.&lt;br/&gt;
2) This definition is stricter than the definition in ContinuousDistribution, because the definition there does not specify what to do if there are multiple x satisfying P(X&amp;lt;=x) = p.&lt;br/&gt;
3) A modification could be defined for p=0: Returning sup{x in R | P(X&amp;lt;=x) = 0} would yield the infimum of the distribution&apos;s support instead of a mandatory -infinity.&lt;br/&gt;
4) This affects issue &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-540&quot; title=&quot;AbstractIntegerDistribution.inverseCumulativeProbability(...) Bug&quot;&gt;&lt;del&gt;MATH-540&lt;/del&gt;&lt;/a&gt;. I&apos;d prefere the definition from above for the following reasons:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This definition simplifies inverse transform sampling (as mentioned in the other issue).&lt;/li&gt;
	&lt;li&gt;It is the standard textbook definition for the quantile function.&lt;/li&gt;
	&lt;li&gt;For integer distributions it has the advantage that the result doesn&apos;t change when switching to &quot;x in Z&quot;, i.e. the result is independent of considering the intergers as sole set or as part of the reals.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ContinuousDistribution:&lt;br/&gt;
nothing to be added regarding (inverse) cumulative probability functions&lt;/p&gt;

&lt;p&gt;IntegerDistribution:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;cumulativeProbability(int x): returns P(X &amp;lt;= x)&lt;/li&gt;
	&lt;li&gt;cumulativeProbability(int x0, int x1): returns P(x0 &amp;lt; X &amp;lt;= x1) &lt;span class=&quot;error&quot;&gt;&amp;#91;see also 1) above&amp;#93;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
            <key id="12527632">MATH-692</key>
            <summary>Cumulative probability and inverse cumulative probability inconsistencies</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="cwinter">Christian Winter</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Oct 2011 18:01:57 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:26 +0000</updated>
                    <resolved>Thu, 2 Feb 2012 06:45:59 +0000</resolved>
                            <version>1.0</version>
                <version>1.1</version>
                <version>1.2</version>
                <version>1.3</version>
                <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                <version>2.2.1</version>
                <version>3.0</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13131245" author="psteitz" created="Thu, 20 Oct 2011 01:13:06 +0000"  >&lt;p&gt;Thanks for raising this issue, Christian - especially now as we finalize the 3.0 API.&lt;/p&gt;

&lt;p&gt;I am +1 for these changes.  I agree that the inf-based definition of inverse cum is more standard and we are in a position now make the change, so I say lets do it.  I am also +1 on the move of this up to the distribution interface.  The reason we did not include it there originally was that we thought we might implement distributions for which we could not define inverses.  That has not happened in the last 8 years, so I think its safe enough to push it up.&lt;/p&gt;

&lt;p&gt;The code, test, user guide and doc changes for this have to be done carefully.  Patches most welcome.&lt;/p&gt;

&lt;p&gt;Is everyone else OK with this change?&lt;/p&gt;</comment>
                    <comment id="13131402" author="celestin" created="Thu, 20 Oct 2011 06:09:32 +0000"  >&lt;p&gt;I have neither used nor developed this part of CM, so my view on this is of but little value. Having said that, anything improving consistency can only be desirable, especially at this stage. So I&apos;m all for it, and will be soon available (when I&apos;m done on SYMMLQ) for an (novice on these issues) help.&lt;/p&gt;

&lt;p&gt;S&#233;bastien&lt;/p&gt;</comment>
                    <comment id="13131407" author="mikl" created="Thu, 20 Oct 2011 06:26:53 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="13133440" author="cwinter" created="Sat, 22 Oct 2011 17:10:35 +0000"  >&lt;p&gt;Thanks for the feedback to all. S&#233;bastien, thanks for offering your help. If you like and find time for it, you could implement AbstractDistribution.inverseCumulativeProbability(double p).&lt;/p&gt;

&lt;p&gt;I will provide some patches next week, but adjusting AbstractContinuousDistribution.inverseCumulativeProbability(double p) will take some more time.&lt;/p&gt;

&lt;p&gt;After thinking a little more about the structure of the interfaces, I&apos;d like to put the function probability(double x) to Distribution anyway (independently of the thought in point 1) above).&lt;/p&gt;

&lt;p&gt;Are there any preferences on P(x0 &amp;lt;= X &amp;lt;= x1) or P(x0 &amp;lt; X &amp;lt;= x1) for cumulativeProbability(double x0, double x1)?&lt;/p&gt;</comment>
                    <comment id="13133464" author="psteitz" created="Sat, 22 Oct 2011 20:24:40 +0000"  >&lt;p&gt;I am not sure it is really makes sense to add probability(double x) to the Distribution interface.  It would have to be defined as density (referring to the distribution function) to make sense in the continuous case, since defined as p(X = x) it would in most cases be identically 0 for continuous distributions.&lt;/p&gt;

&lt;p&gt;Regarding the cum definition, I am fine with P(x0 &amp;lt; X &amp;lt;= x1).&lt;/p&gt;</comment>
                    <comment id="13133594" author="celestin" created="Sun, 23 Oct 2011 08:39:52 +0000"  >&lt;p&gt;Happy to help on the inverse cumulative probability. You will have to be patient and forgieving with me, though, as I discover this part of CM.&lt;/p&gt;

&lt;p&gt;As for the definition, I think that one of the bounds should be excluded, so that these cumulative probabilities can be summed&lt;br/&gt;
P(a &amp;lt; X &amp;lt;= c) = P(a &amp;lt; X &amp;lt;= b) + P(b &amp;lt; X &amp;lt;= c),&lt;br/&gt;
even in the case of discrete PDFs.&lt;/p&gt;

&lt;p&gt;Whether the lower or upper bound should be excluded is another matter. I usually work with continuous pdfs, so I don&apos;t know if there is a common practice in the probability community. If there is none, I would tend to chose the following definition&lt;br/&gt;
P(x0 &amp;lt;= X &amp;lt; x1)&lt;br/&gt;
(sorry Phil!), because it would be consistent with the way things are usually indexed in java (a&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.. a&lt;span class=&quot;error&quot;&gt;&amp;#91;a.length-1&amp;#93;&lt;/span&gt;). See also &lt;tt&gt;org.apache.commons.math.util.MultidimensionalCounter&lt;/tt&gt;. Although this type of consistency is not an absolute requirement, I think it is nice for the user to have such simple principle: &quot;lower bound always included, upper bound always excluded&quot;. Appart from this small point, I really have no objection to any choice.&lt;/p&gt;</comment>
                    <comment id="13133665" author="psteitz" created="Sun, 23 Oct 2011 15:22:44 +0000"  >&lt;p&gt;Have a look at the default implementation of cum(x0,x1) now in AbstractDistribution.  I think the incorrectness in the documentation there may have been what triggered Christian to raise this issue.  The equation cum(a,b) = F(b) - F(a) where F is the distribution function is natural and what the impl there is trying to do.  In the discrete case, this equation fails, however, unless you define the cum to exclude the &lt;b&gt;lower&lt;/b&gt; endpoint.  That&apos;s why P(x0 &amp;lt; X &amp;lt;= x1) is a better definition.&lt;/p&gt;</comment>
                    <comment id="13133668" author="celestin" created="Sun, 23 Oct 2011 15:31:27 +0000"  >&lt;p&gt;OK, Phil, it makes perfect sense.&lt;/p&gt;</comment>
                    <comment id="13133718" author="cwinter" created="Sun, 23 Oct 2011 19:57:58 +0000"  >&lt;p&gt;Good, the definition of cum(x0,x1) will be P(x0 &amp;lt; X &amp;lt;= x1). Phil, you are right: cum(x0,x1) in AbstractDistribution was a reason for raising this issue. Another reason was cum(int x0, int x1) in AbstractIntegerDistribution.&lt;/p&gt;

&lt;p&gt;The idea behind probability(double x) is in fact to define it as p(X = x) and to return 0 for continuous distributions. This function would be useful for discrete distributions not inheriting from IntergerDistribution and for distributions being composed of discrete and continuous parts.&lt;/p&gt;</comment>
                    <comment id="13133745" author="psteitz" created="Sun, 23 Oct 2011 20:59:59 +0000"  >&lt;p&gt;I guess I am OK with pushing p&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; up.  See related post to follow in commons-dev. &lt;/p&gt;</comment>
                    <comment id="13136853" author="celestin" created="Thu, 27 Oct 2011 07:07:31 +0000"  >&lt;p&gt;Hi Christian,&lt;br/&gt;
I&apos;ve started looking into this issue. As I said, you will have to be patient with me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;br/&gt;
I can see there already is a default implementation of &lt;tt&gt;AbstractContinuousDistribution.inverseCumulativeProbability&lt;/tt&gt;. So what exactly would you like me to do? Is this implementation fragile? Would you like me to improve robustness? Provide full testing?&lt;/p&gt;

&lt;p&gt;I think there might be issues when the PDF falls down to zero in a range (in which case the cum exhibits a plateau). The returned value might differ from the mathematical definition you proposed. Is this what you want me to work on? Have you already identified other issues?&lt;/p&gt;

&lt;p&gt;Best regards,&lt;br/&gt;
S&#233;bastien&lt;/p&gt;</comment>
                    <comment id="13138795" author="cwinter" created="Fri, 28 Oct 2011 21:36:45 +0000"  >&lt;p&gt;Hi S&#233;bastien,&lt;/p&gt;

&lt;p&gt;the problem with the plateau is indeed one issue which needs to be solved.&lt;/p&gt;

&lt;p&gt;Additionally, AbstractDistribution will need an implementation of inverseCumulativeProbability. In fact both implementations should be the same except for the solver to be used. Thus inverseCumulativeProbability should be implemented just once in AbstractDistribution, and invoking the solver should be put to a separate procedure so that it can be overridden in AbstractContinuousDistribution.&lt;/p&gt;

&lt;p&gt;A third point is the choice of the solvers. For AbstractDistribution we need a solver which works even for discontinuous cdfs (BisectionSolver can do the job, but maybe the implementations of the faster IllinoisSolver, PegasusSolver, BrentSolver, or another solver can cope with discontinuities, too). For AbstractContinuousDistribution it would be beneficial to use a DifferentiableUnivariateRealSolver. However, the NewtonSolver cannot be used due to uncertainty of convergence and an alternative doesn&apos;t seem to exist by now. So we have to choose one of the other solvers for now.&lt;/p&gt;

&lt;p&gt;As all these points are interdependent, I guess it&apos;s best to solve them as a whole. If you like, you can do this.&lt;/p&gt;

&lt;p&gt;Best Regards,&lt;br/&gt;
Christian&lt;/p&gt;</comment>
                    <comment id="13138835" author="cwinter" created="Fri, 28 Oct 2011 22:02:18 +0000"  >&lt;p&gt;Another point for discussion:&lt;br/&gt;
I&apos;d like to introduce&lt;br/&gt;
getDomainBracket(double p): returns double[]&lt;br/&gt;
to AbstractDistribution as helper function for inverseCumulativeProbability. This allows to avoid searching a bracket where a bracket can be specified directly.&lt;br/&gt;
The function getDomainBracket could be made abstract (which means to remove getInitialDomain, getDomainLowerBound, and getDomainUpperBound as these functions aren&apos;t needed any more), or it could have a default implementation (according to the corresponding part of the current implementation of inverseCumulativeProbability) which uses getInitialDomain, getDomainLowerBound, and getDomainUpperBound. However, getInitialDomain, getDomainLowerBound, and getDomainUpperBound should not be abstract in the latter case. Otherwise a derived class would be forced to implement something it potentially doesn&apos;t use. Thus the functions getInitialDomain, getDomainLowerBound, and getDomainUpperBound should have default implementations which either return default values (0, -infinity, +infinity) or throw an exception saying something like &quot;has to be implemented&quot;.&lt;/p&gt;</comment>
                    <comment id="13139105" author="celestin" created="Sat, 29 Oct 2011 04:23:08 +0000"  >&lt;p&gt;Hi Christian,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi S&#233;bastien,&lt;/p&gt;

&lt;p&gt;the problem with the plateau is indeed one issue which needs to be solved.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;m working on it...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Additionally, AbstractDistribution will need an implementation of inverseCumulativeProbability. In fact both implementations should be the same except for the solver to be used. Thus inverseCumulativeProbability should be implemented just once in AbstractDistribution, and invoking the solver should be put to a separate procedure so that it can be overridden in AbstractContinuousDistribution.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;OK, for now, I&apos;m concentrating on making the current impl in &lt;tt&gt;AbstractContinuousDistribution&lt;/tt&gt; more robust. The other impl should be easier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A third point is the choice of the solvers. For AbstractDistribution we need a solver which works even for discontinuous cdfs (BisectionSolver can do the job, but maybe the implementations of the faster IllinoisSolver, PegasusSolver, BrentSolver, or another solver can cope with discontinuities, too). For AbstractContinuousDistribution it would be beneficial to use a DifferentiableUnivariateRealSolver. However, the NewtonSolver cannot be used due to uncertainty of convergence and an alternative doesn&apos;t seem to exist by now. So we have to choose one of the other solvers for now.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The current implementation uses a Brent solver. I think the solver itself is only one side of the issue. The other point is the algorithm used to bracket the solution, in order to ensure that the result is consistent with the definition of the cumprob. As for the &lt;tt&gt;DifferentiableUnivariateRealSolver&lt;/tt&gt;, I&apos;m not too sure. I guess it depends on what is meant by &quot;continuous distribution&quot;. For me, it means that the random variable takes values in a continuous set, and possibly its distribution is defined by a density. However, in my view, nothing prevents occurences of Dirac functions, in which case the cum sum is only piecewise C1. It&apos;s all a matter of definition, of course, and I&apos;ll ask the question on the forum to check whether or not people want to allow for such a situation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As all these points are interdependent, I guess it&apos;s best to solve them as a whole. If you like, you can do this.&lt;/p&gt;

&lt;p&gt;Best Regards,&lt;br/&gt;
Christian&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, I&apos;m very interested.&lt;/p&gt;

&lt;p&gt;Best regards,&lt;br/&gt;
S&#233;bastien&lt;/p&gt;</comment>
                    <comment id="13144630" author="celestin" created="Sat, 5 Nov 2011 08:29:02 +0000"  >&lt;p&gt;Please note that &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-699&quot; title=&quot;inverseCumulativeDistribution fails with cumulative distribution having a plateau&quot;&gt;&lt;del&gt;MATH-699&lt;/del&gt;&lt;/a&gt; has been created specifically to handle plateaux.&lt;/p&gt;

&lt;p&gt;S&#233;bastien&lt;/p&gt;</comment>
                    <comment id="13146535" author="cwinter" created="Tue, 8 Nov 2011 20:28:17 +0000"  >&lt;p&gt;Here is the first patch for this issue (unfortunately with some delay). It adjusts the distributions with real domain to the definitions in this issue, and it mainly changes documentations.&lt;/p&gt;

&lt;p&gt;I could not move inverseCumulativeProbability(double) up to Distribution because there would be a conflict with IntegerDistribution.inverseCumulativeProbability(double): This method returns int. This problem will be removed by solving issue &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-703&quot; title=&quot;Splitting up the distribution hierarchy&quot;&gt;&lt;del&gt;MATH-703&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The implementation of inverseCumulativeProbability(double) is not changed as S&#233;bastien is working on this.&lt;/p&gt;

&lt;p&gt;I will provide the patch for the integer distributions as soon as I have adjusted the test data to the new inequalities and reverified the adjusted test data.&lt;/p&gt;</comment>
                    <comment id="13146823" author="celestin" created="Wed, 9 Nov 2011 07:22:46 +0000"  >&lt;p&gt;All,&lt;br/&gt;
since I&apos;m already working on this package, I&apos;m happy to commit the patch on behalf of Christian. However, since I&apos;m a relatively new committer, I would feel more confident if one of the &quot;old, wise committers&quot; could double check the svn log afterwards.&lt;/p&gt;

&lt;p&gt;Best,&lt;br/&gt;
S&#233;bastien&lt;/p&gt;</comment>
                    <comment id="13147115" author="psteitz" created="Wed, 9 Nov 2011 15:48:10 +0000"  >&lt;p&gt;Hey, that&apos;s how it always works &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &lt;/p&gt;

&lt;p&gt;I don&apos;t know about &quot;wise&quot; but I certainly qualify as &quot;old&quot; by any standard, so will have a look once you have reviewed and committed.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                    <comment id="13147514" author="celestin" created="Thu, 10 Nov 2011 06:23:39 +0000"  >&lt;p&gt;Patch &lt;tt&gt;Math-692_realDomain_patch1.patch&lt;/tt&gt; (20111108) applied in rev 1200179, with minor modifications (mostly checkstyle fixes).&lt;br/&gt;
Thanks Christian!&lt;/p&gt;</comment>
                    <comment id="13162487" author="cwinter" created="Sun, 4 Dec 2011 21:02:48 +0000"  >&lt;p&gt;As mentioned by S&#233;bastien in &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-699&quot; title=&quot;inverseCumulativeDistribution fails with cumulative distribution having a plateau&quot;&gt;&lt;del&gt;MATH-699&lt;/del&gt;&lt;/a&gt;, the implementation of &lt;tt&gt;IntegerDistribution.inverseCumulativeProbability(double p)&lt;/tt&gt; can benefit from the ideas which came up for &lt;tt&gt;RealDistribution.inverseCumulativeProbability(double p)&lt;/tt&gt; in that thread.&lt;/p&gt;

&lt;p&gt;Thus I will remove &lt;tt&gt;getDomainLowerBound(double p)&lt;/tt&gt; and &lt;tt&gt;getDomainUpperBound(double p)&lt;/tt&gt; from the integer distributions. I checked that all current implementations of the lower/upper bound methods provide the whole support of the distribution as starting bracket. This means that using &lt;tt&gt;getSupportLowerBound()&lt;/tt&gt; and &lt;tt&gt;getSupportUpperBound()&lt;/tt&gt; for the starting bracket won&apos;t degrade the performance of the current distribution implementations. However, a user might want the improve the performance of his distribution implementations by providing a more targeted starting bracket for probability &lt;tt&gt;p&lt;/tt&gt;. Thus I will swap the solving step to a protected function &lt;tt&gt;solveInverseCumulativeProbability(double p, int lower, int upper)&lt;/tt&gt;, so that it gets easy to override &lt;tt&gt;inverseCumulativeProbability&lt;/tt&gt; with an implementation which finds a better starting bracket.&lt;/p&gt;

&lt;p&gt;Furthermore, Phil&apos;s idea with Chebyshev&apos;s inequality can be applied to the generic implementation of &lt;tt&gt;inverseCumulativeProbability&lt;/tt&gt; in order to get a better starting bracket.&lt;/p&gt;</comment>
                    <comment id="13162639" author="celestin" created="Mon, 5 Dec 2011 06:51:59 +0000"  >&lt;p&gt;Hi Christian,&lt;br/&gt;
If you agree with that, I suggest that you also take care of &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-718&quot; title=&quot;inverseCumulativeProbability of BinomialDistribution returns wrong value for large trials.&quot;&gt;MATH-718&lt;/a&gt;, as the two issues seem to be very much connected.&lt;br/&gt;
S&#233;bastien&lt;/p&gt;</comment>
                    <comment id="13170588" author="cwinter" created="Thu, 15 Dec 2011 23:44:09 +0000"  >&lt;p&gt;Hi S&#233;bastien,&lt;/p&gt;

&lt;p&gt;my changes in the integer distributions don&apos;t solve &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-718&quot; title=&quot;inverseCumulativeProbability of BinomialDistribution returns wrong value for large trials.&quot;&gt;MATH-718&lt;/a&gt;. Instead I found a probably related problem with the Pascal distribution.&lt;/p&gt;

&lt;p&gt;The integer distribution patch for this issue still isn&apos;t ready. I will provide it next week.&lt;/p&gt;

&lt;p&gt;Christian&lt;/p&gt;</comment>
                    <comment id="13172699" author="cwinter" created="Mon, 19 Dec 2011 22:47:34 +0000"  >&lt;p&gt;This is the patch which adjusts the integer distributions to the agreements above.&lt;/p&gt;

&lt;p&gt;The changes to the test cases for the random generators may be unexpected. But these changes initially were triggered by adjusting &lt;tt&gt;RandomDataTest.checkNextPoissonConsistency(double)&lt;/tt&gt; to the new contract for integer distributions. Then some random generator tests failed due to chance. While adjusting their seeds, I found some other tests with a high failure probability. Thus I also set some failure probabilities to 0.01 in order to find suitable seeds more quickly.&lt;/p&gt;

&lt;p&gt;My next task on this issue is to adjust the user guid.&lt;/p&gt;</comment>
                    <comment id="13173481" author="celestin" created="Tue, 20 Dec 2011 20:27:19 +0000"  >&lt;p&gt;Hi Christian,&lt;br/&gt;
thanks for this contribution. I am away for a few days, but am very happy to commit this patch as soon as I am back, if you are not in too much of a hurry.&lt;br/&gt;
Thanks again,&lt;br/&gt;
S&#233;bastien&lt;/p&gt;</comment>
                    <comment id="13177903" author="celestin" created="Sat, 31 Dec 2011 05:25:04 +0000"  >&lt;p&gt;Well, we&apos;ve recently run into some troubles with SVN, but it seems everything is working fine again. Patch {{&lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-692&quot; title=&quot;Cumulative probability and inverse cumulative probability inconsistencies&quot;&gt;&lt;del&gt;MATH-692&lt;/del&gt;&lt;/a&gt;_integerDomain_patch1.patch}} (with minor checkstyle changes) committed in revision &lt;tt&gt;1226041&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Please do not forget to run &lt;tt&gt;mvn clean; mvn site:site&lt;/tt&gt; and check the reports (in particular, &lt;tt&gt;checkstyle&lt;/tt&gt;) prior to submitting a patch!&lt;/p&gt;

&lt;p&gt;Thanks for this contribution.&lt;/p&gt;</comment>
                    <comment id="13177915" author="celestin" created="Sat, 31 Dec 2011 08:39:23 +0000"  >&lt;p&gt;The committed patch actually causes failure of &lt;tt&gt;Well1024Test&lt;/tt&gt; in &lt;tt&gt;o.a.c.m.random&lt;/tt&gt;.&lt;/p&gt;</comment>
                    <comment id="13178047" author="cwinter" created="Sat, 31 Dec 2011 17:01:41 +0000"  >&lt;p&gt;Thanks for committing the patch, S&#233;bastien. I see you already changed the seed in &lt;tt&gt;Well1024aTest&lt;/tt&gt;. This hopefully removes the failure.&lt;/p&gt;

&lt;p&gt;I&apos;ll have a look into Maven to prepare a better patch next time. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13178048" author="celestin" created="Sat, 31 Dec 2011 17:11:34 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I see you already changed the seed in Well1024aTest.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes I did, but is this really how we want &lt;tt&gt;Well2004aTest&lt;/tt&gt; to pass?&lt;/p&gt;</comment>
                    <comment id="13178481" author="cwinter" created="Mon, 2 Jan 2012 17:51:59 +0000"  >&lt;p&gt;I guess there is no alternative to this way of making probabilistic test cases pass. However, I understand your bad feeling with this kind of failure fixing. The problem is that probabilistic tests are quiet fuzzy: Neither a passed test nor a failed test provides a clear answer whether something is right or wrong in the implementation. There is just a high chance to pass such a test with a correct implementation. The chance for failure increases with an erroneous implementation due to systematic deviations in the generated data. These chances tell whether it is easy to find a seed which passes the tests or not. Thus difficulties in finding a suitable seed are an indicator for problems in the code.&lt;/p&gt;</comment>
                    <comment id="13178508" author="celestin" created="Mon, 2 Jan 2012 18:53:57 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Thus difficulties in finding a suitable seed are an indicator for problems in the code.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s exactly the point I&apos;ve raised on the mailing-list: out of three seeds (100, 1000 and 1001), only one works. Of course, I would not dare to call that representative statistics, but I&apos;m wondering whether or not we should be worried...&lt;/p&gt;</comment>
                    <comment id="13198562" author="celestin" created="Thu, 2 Feb 2012 06:45:59 +0000"  >&lt;p&gt;The issue about selection of an appropriate seed has been raised elsewhere. No definitive answer has been provided so far, so I suggest we consider this issue as solved for the time being.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12507992" name="MATH-692_integerDomain_patch1.patch" size="56779" author="cwinter" created="Mon, 19 Dec 2011 22:47:34 +0000" />
                    <attachment id="12502956" name="Math-692_realDomain_patch1.patch" size="26367" author="cwinter" created="Tue, 8 Nov 2011 20:28:17 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 20 Oct 2011 01:13:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-654] ValueServer not deterministic for a fixed random number seed</title>
                <link>https://issues.apache.org/jira/browse/MATH-654</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;I have built an agent-based model using the Apache Commons Math library, which has come in handy.&lt;/p&gt;

&lt;p&gt;The ValueServer seemed particularly helpful, as explained at:&lt;br/&gt;
&lt;a href=&quot;http://commons.apache.org/math/userguide/random.html&quot;&gt;http://commons.apache.org/math/userguide/random.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My simulation needs repeatable randomness, so I used this form of the ValueServer constructor:&lt;/p&gt;

&lt;p&gt;    ValueServer(RandomData randomData) &lt;br/&gt;
    Construct a ValueServer instance using a RandomData as its source of random data.&lt;br/&gt;
    // &lt;a href=&quot;http://commons.apache.org/math/api-2.2/org/apache/commons/math/random/ValueServer.html&quot;&gt;http://commons.apache.org/math/api-2.2/org/apache/commons/math/random/ValueServer.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, in my simulation, I found that the ValueServer did not act deterministically if I supplied the same random number seed.&lt;/p&gt;

&lt;p&gt;I have not inspected the source code, but I suspect that the ValueServer is not using the `randomData` generator correctly. If it was, then it should be deterministic.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12520774">MATH-654</key>
            <summary>ValueServer not deterministic for a fixed random number seed</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="psteitz">Phil Steitz</assignee>
                                <reporter username="d.james">David James</reporter>
                        <labels>
                    </labels>
                <created>Tue, 30 Aug 2011 17:23:19 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:32 +0000</updated>
                    <resolved>Thu, 1 Sep 2011 00:14:02 +0000</resolved>
                            <version>1.1</version>
                <version>1.2</version>
                <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13094002" author="psteitz" created="Tue, 30 Aug 2011 19:00:38 +0000"  >&lt;p&gt;Thanks for reporting this.  I assume you are using DIGEST_MODE.  If this is the case and you are comfortable compiling the code in trunk, the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-634&quot; title=&quot;EmpiricalDistributionImpl should use a pluggable RandomGenerator&quot;&gt;&lt;del&gt;MATH-634&lt;/del&gt;&lt;/a&gt; enables a workaround for this.  Using the reseed method added to EmpiricalDistributionImpl in trunk, you can use ValueServer&apos;s getEmpiricalDistribution to get the distribution and then invoke reseed.  Unfortunately, this method does not exist in any released version yet.&lt;/p&gt;

&lt;p&gt;The problem is that ValueServer#getNextDigest (what it does for getNext in DIGEST_MODE) delegates to EmpiricalDistributionImpl#getNextValue.  EmpiricalDistributionImpl has its own RandomData instance.  To fix this issue, EmpiricalDistirbutionImpl should add a constructor taking a RandomData and ValueServer should provide this.&lt;/p&gt;</comment>
                    <comment id="13095018" author="psteitz" created="Thu, 1 Sep 2011 00:14:02 +0000"  >&lt;p&gt;Fixed in r1163875. ValueServer now exposes a reSeed method that when supplied a fixed seed will generate a fixed sequence in any stochastic mode. The RandomDataImpl that it uses internally is passed to the EmpiricalDistributionImpl it creates when used in DIGEST_MODE.  The changes for this issue include an incompatible (vs. 2.x) change: the constructor for EmpiricalDistributionImpl that previously took a RandomData now takes a RandomDataImpl.  The plan for 3.0 is to merge these.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 30 Aug 2011 19:00:38 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-640] AbstractRandomGenerator nextInt() and nextLong() default implementations generate only positive values</title>
                <link>https://issues.apache.org/jira/browse/MATH-640</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The javadoc for these methods (and what is specified in the RandomGenerator interface) says that all int / long values should be in the range of these methods.  The default implementations provided in this class do not generate negative values.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12517683">MATH-640</key>
            <summary>AbstractRandomGenerator nextInt() and nextLong() default implementations generate only positive values</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="psteitz">Phil Steitz</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Tue, 2 Aug 2011 19:06:35 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:52 +0000</updated>
                    <resolved>Wed, 3 Aug 2011 04:17:43 +0000</resolved>
                            <version>1.1</version>
                <version>1.2</version>
                <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13078573" author="psteitz" created="Wed, 3 Aug 2011 04:17:43 +0000"  >&lt;p&gt;Fixed in r1153338&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-618] Complex Add and Subtract handle NaN arguments differently, but javadoc contracts are the same</title>
                <link>https://issues.apache.org/jira/browse/MATH-618</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;For both Complex add and subtract, the javadoc states that&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;* If either &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; or &amp;lt;code&amp;gt;rhs&amp;lt;/code&amp;gt; has a NaN value in either part,
     * {@link #NaN} is returned; otherwise Inifinite and NaN values are
     * returned in the parts of the result according to the rules &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;
     * {@link java.lang.&lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;} arithmetic&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Subtract includes an isNaN test and returns Complex.NaN if either complex argument isNaN; but add omits this test.  The test should be added to the add implementation (actually restored, since this looks like a code merge problem going back to 1.1).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12513980">MATH-618</key>
            <summary>Complex Add and Subtract handle NaN arguments differently, but javadoc contracts are the same</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Jul 2011 20:23:43 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:27 +0000</updated>
                    <resolved>Thu, 14 Jul 2011 06:08:54 +0000</resolved>
                            <version>1.2</version>
                <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13065070" author="psteitz" created="Thu, 14 Jul 2011 06:08:54 +0000"  >&lt;p&gt;Fixed in r1146573&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-588] Weighted Mean evaluation may not have optimal numerics</title>
                <link>https://issues.apache.org/jira/browse/MATH-588</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;I recently got this in a test run&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;testWeightedConsistency(org.apache.commons.math.stat.descriptive.moment.MeanTest)  Time elapsed: 0 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
java.lang.AssertionError: expected:&amp;lt;0.002282165958997601&amp;gt; but was:&amp;lt;0.002282165958997157&amp;gt;
	at org.junit.Assert.fail(Assert.java:91)
	at org.junit.Assert.failNotEquals(Assert.java:645)
	at org.junit.Assert.assertEquals(Assert.java:441)
	at org.apache.commons.math.TestUtils.assertRelativelyEquals(TestUtils.java:178)
	at org.apache.commons.math.TestUtils.assertRelativelyEquals(TestUtils.java:153)
	at org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testWeightedConsistency(UnivariateStatisticAbstractTest.java:170)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The correction formula used to compute the unweighted mean may not be appropriate or optimal in the presence of weights:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// Compute initial estimate using definitional formula
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; sumw = sum.evaluate(weights,begin,length);
&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; xbarw = sum.evaluate(values, weights, begin, length) / sumw;

&lt;span class=&quot;code-comment&quot;&gt;// Compute correction factor in second pass
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; correction = 0;
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = begin; i &amp;lt; begin + length; i++) {
  correction += weights[i] * (values[i] - xbarw);
}
&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; xbarw + (correction/sumw);&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
            <key id="12510061">MATH-588</key>
            <summary>Weighted Mean evaluation may not have optimal numerics</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Sun, 12 Jun 2011 18:19:07 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:31 +0000</updated>
                    <resolved>Sun, 5 Feb 2012 19:54:50 +0000</resolved>
                            <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13200835" author="tn" created="Sun, 5 Feb 2012 19:54:51 +0000"  >&lt;p&gt;Fixed it in r1240790.&lt;/p&gt;

&lt;p&gt;There was a too strict equality test using an relative error of 10-14 which resulted in certain unforunate cases of an absolute error of 10-18.&lt;/p&gt;</comment>
                    <comment id="13200902" author="tn" created="Sun, 5 Feb 2012 21:17:31 +0000"  >&lt;p&gt;Corrected the equality test in r1240795 as it was leading to failure. In fact the test can range from very small to very large values which really requires a relative error estimate.&lt;/p&gt;

&lt;p&gt;The test is problematic in general, as it may contain values from very different scales (due to its random nature), leading to unavoidable precision errors in the above formula.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 5 Feb 2012 19:54:51 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-575] Exceptions in genetics package or not consistent with the rest of [math]</title>
                <link>https://issues.apache.org/jira/browse/MATH-575</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;InvalidRepresentationException is checked and non-localized.  This exception should be placed in the &lt;span class=&quot;error&quot;&gt;&amp;#91;math&amp;#93;&lt;/span&gt; hierarchy.  The AbstractListChromosome constructor also throws a non-localised IAE, which should be replaced by an appropriate &lt;span class=&quot;error&quot;&gt;&amp;#91;math&amp;#93;&lt;/span&gt; exception.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12507228">MATH-575</key>
            <summary>Exceptions in genetics package or not consistent with the rest of [math]</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="tn">Thomas Neidhart</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Sat, 14 May 2011 16:40:34 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:54 +0000</updated>
                    <resolved>Thu, 2 Feb 2012 11:12:52 +0000</resolved>
                            <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13191560" author="tn" created="Mon, 23 Jan 2012 22:30:24 +0000"  >&lt;p&gt;Phil started to work on this issue in r1135025.&lt;/p&gt;

&lt;p&gt;In r1235038 additional cleanups have been performed:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;add localized messages for all exceptions&lt;/li&gt;
	&lt;li&gt;add @throws to javadoc where appropriate&lt;/li&gt;
	&lt;li&gt;add final to method parameters&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What is missing:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Phil mentioned that InvalidRepresentationException should be placed into &lt;span class=&quot;error&quot;&gt;&amp;#91;math&amp;#93;&lt;/span&gt;, although I am not sure why, as it is not used outside the genetics package&lt;/li&gt;
	&lt;li&gt;add more custom exception classes specific to the genetics package (optional). By now mostly MathIllegalArgumentException or other appropriate ones have been used.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13191602" author="erans" created="Mon, 23 Jan 2012 23:16:46 +0000"  >&lt;p&gt;Thanks for working on this, but before you do start to make modifications, please assign the issue to yourself!&lt;/p&gt;

&lt;p&gt;For the changes themselves, I don&apos;t agree with the creation of those many localized messages: We have been trying to rationalize and reduce the number of those, by removing duplicates and combining several ones to convey the full explanation of the problem. See my reply to the commit message.&lt;/p&gt;</comment>
                    <comment id="13192047" author="tn" created="Tue, 24 Jan 2012 10:18:27 +0000"  >&lt;p&gt;Fixed in r1235197.&lt;/p&gt;

&lt;p&gt;Thanks for your suggestions!&lt;/p&gt;</comment>
                    <comment id="13198672" author="erans" created="Thu, 2 Feb 2012 10:34:38 +0000"  >&lt;p&gt;Thomas,&lt;br/&gt;
Could please check whether this issue is resolved? And if it is, mark it so? Thanks.&lt;/p&gt;</comment>
                    <comment id="13198680" author="tn" created="Thu, 2 Feb 2012 10:47:58 +0000"  >&lt;p&gt;As from the original issue description, Phil intended to move the InvalidRepresentationException to the general o.a.c.m.exceptions package. I am not sure about this, that&apos;s why I kept it aside for the time being. If we agree on keeping it in the genetics package we can resolve this issue.&lt;/p&gt;</comment>
                    <comment id="13198689" author="erans" created="Thu, 2 Feb 2012 11:08:31 +0000"  >&lt;p&gt;Phil had always been opposed to having all exceptions grouped in their own package; so I doubt that he meant to move that one over there... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Here, the description just indicates that the exception should become &lt;em&gt;unchecked&lt;/em&gt; and that the &quot;detailed message&quot; should be an element from the &quot;LocalizedFormats&quot; enum (i.e. derive from one of the base CM exceptions).&lt;/p&gt;</comment>
                    <comment id="13198691" author="tn" created="Thu, 2 Feb 2012 11:12:52 +0000"  >&lt;p&gt;Ah ok, that makes it clear. When reading hierarchy I was just thinking in terms of packages rather than class hierarchy.&lt;/p&gt;

&lt;p&gt;Thus, I resolve this issue.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 23 Jan 2012 22:30:24 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-555] MathUtils round method should propagate rather than wrap Runitme exceptions</title>
                <link>https://issues.apache.org/jira/browse/MATH-555</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;MathUtils.round(double, int, int) can generate IllegalArgumentException or ArithmeticException.  Instead of wrapping these exceptions in MathRuntimeException, the conditions under which these exceptions can be thrown should be documented and the exceptions should be propagated directly to the caller.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12503246">MATH-555</key>
            <summary>MathUtils round method should propagate rather than wrap Runitme exceptions</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Mon, 4 Apr 2011 04:13:04 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:43 +0000</updated>
                    <resolved>Mon, 4 Apr 2011 04:53:13 +0000</resolved>
                            <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13015280" author="psteitz" created="Mon, 4 Apr 2011 04:53:13 +0000"  >&lt;p&gt;Fixed in trunk in r1088473&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-540] AbstractIntegerDistribution.inverseCumulativeProbability(...) Bug</title>
                <link>https://issues.apache.org/jira/browse/MATH-540</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The AbstractIntegerDistribution.inverseCumulativeProbability(...) function attempts to decrement the lower bound of discrete distributions to values that go below the lower bound.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12500531">MATH-540</key>
            <summary>AbstractIntegerDistribution.inverseCumulativeProbability(...) Bug</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ole">Ole Ersoy</reporter>
                        <labels>
                    </labels>
                <created>Sun, 6 Mar 2011 00:43:45 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:36 +0000</updated>
                    <resolved>Sun, 12 Jun 2011 05:58:50 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13003097" author="psteitz" created="Sun, 6 Mar 2011 05:32:11 +0000"  >&lt;p&gt;I don&apos;t think this is a bug.  Per the javadoc, the contract for inverse cum is&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;/**
 * For a random variable {@code X} whose values are distributed according
 * to &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; distribution, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; method returns the largest {@code x}, such
 * that {@code P(X &amp;lt; x) &amp;lt; p}.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This implies that if the first non-zero mass point has probability greater than p, the right value to return is one less than that value, which is whet the method will do.  Your example distribution throws NPE when trying to compute probabilities outside of its domain of support. &lt;/p&gt;</comment>
                    <comment id="13003103" author="ole" created="Sun, 6 Mar 2011 05:58:44 +0000"  >&lt;p&gt;I&apos;m looking at it like this.  I have very simple distribution like the one provided (Four sided dice).  I&apos;m trying to write a simulation that draws values of x for a a set of uniform 0-1 probabilities.  So I&apos;m expecting:&lt;/p&gt;

&lt;p&gt;0 When p is less than or equal to 0.25&lt;br/&gt;
1 When p is greater than 0.25 but less than or equal to 0.50&lt;br/&gt;
2 When p is greater than 0.50 but less than or equal to 0.75&lt;br/&gt;
3 When p is greater than 0.75 but less than or equal to 1.0&lt;/p&gt;

&lt;p&gt;So for the line &lt;/p&gt;

&lt;p&gt;int neverSucceeds = d.inverseCumulativeProbability(0.0001);&lt;/p&gt;

&lt;p&gt;I&apos;m really expecting 0 to be returned.&lt;/p&gt;

&lt;p&gt;Make sense?&lt;/p&gt;</comment>
                    <comment id="13003107" author="psteitz" created="Sun, 6 Mar 2011 06:39:30 +0000"  >&lt;p&gt;I see now that there actually does appear to be an error in the javadoc.  The implementation really returns the largest x such that p(X &amp;lt;= x) &amp;lt;= p.  In the discrete case, &amp;lt;= matters and I think both inequalities in the javadoc should be changed.&lt;/p&gt;

&lt;p&gt;In your example, if the probability distribution vanishes outside 0, 1, 2, 3 and puts .25 mass on each of these values, the inverse cumulative probability function evaluated at .0001 should be -1, as this is the largest value such that &lt;br/&gt;
p(X &amp;lt;= x) &amp;lt;= .0001.&lt;/p&gt;

&lt;p&gt;If you fix your distribution so that both probability and cumulativeProbability return correct values (rather than throwing NPEs) outside of the mass values, you should get -1 returned.&lt;/p&gt;</comment>
                    <comment id="13003178" author="psteitz" created="Sun, 6 Mar 2011 15:16:09 +0000"  >&lt;p&gt;Reading your last comment a little more carefully, it looks like what you are trying to do is implement sampling.  IIUC, something like what you are suggesting should work - you just have an off-by-one problem vis-s-vis the contract of inverse cumulative probabilities as we define them.  I would be +1 for adding direct support for sampling from discrete distributions, but we should open a separate ticket for that.&lt;/p&gt;</comment>
                    <comment id="13003191" author="ole" created="Sun, 6 Mar 2011 17:36:01 +0000"  >&lt;p&gt;OK - I&apos;ll close this one and open a separate ticket.&lt;/p&gt;</comment>
                    <comment id="13003215" author="psteitz" created="Sun, 6 Mar 2011 22:05:34 +0000"  >&lt;p&gt;There is a javadoc bug that needs to be fixed here&lt;/p&gt;</comment>
                    <comment id="13003254" author="ole" created="Mon, 7 Mar 2011 03:41:05 +0000"  >&lt;p&gt;Ooops - Thanks.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;...inverse cumulative probability function evaluated at .0001 should be -1, as this is the largest value such that &lt;br/&gt;
p(X &amp;lt;= x) &amp;lt;= .0001.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It seems to me that users would be better served if it returned 0 and that it is also correct to do so.&lt;/p&gt;

&lt;p&gt;In the definition we say &quot;For a random variables X whose values are distributed according to this distribution...&quot;.&lt;/p&gt;

&lt;p&gt;Suppose the distribution was for a six sided dice.  One could assert that the distribution is only defined for the values 1,2,3,4,5,6.  In this case the inverseCumulativeDistribution returns 0, but that does not have any meaning.  So now developers are forced to define the meaning of 0 for a six sided dice implementation.  &lt;/p&gt;

&lt;p&gt;In Grad school we were taught the the inverse cumulative distribution is for sampling.  So for a six sided dice uniform probabilities less than 1/6 would return 1, less than 2/6 would return 2, etc.&lt;/p&gt;

&lt;p&gt;With the current implementation for values less than 1/6 we get 0 which is meaningless, and the only time we get 6 is when the uniform probability argument is 1.&lt;/p&gt;

&lt;p&gt;So if someone mistakenly tries to use the inverseCumulativeProbability function for sampling the results are going to be wacked.  What is the use case for the inverseCumulativeProbability the way it is right now?&lt;/p&gt;</comment>
                    <comment id="13003369" author="psteitz" created="Mon, 7 Mar 2011 14:39:20 +0000"  >&lt;p&gt;You have a choice in defining the inverse cum whether to define it the way we have or to use and inf rather than a sup.  We can implement sampling using the current impl.  We just need to take into account the way the inverse cum is defined in AbstractIntegerDistribution.  &lt;/p&gt;</comment>
                    <comment id="13003414" author="ole" created="Mon, 7 Mar 2011 16:10:34 +0000"  >&lt;p&gt;OK - I think it&apos;s starting to make more sense to me now.  So when implementing sampling we just add one to the value returned by inverseCumulativeDistribution, unless the uniform probability argument is 1?&lt;/p&gt;</comment>
                    <comment id="13003468" author="psteitz" created="Mon, 7 Mar 2011 17:53:41 +0000"  >&lt;p&gt;I am sorry.  I forgot that we had in fact already implemented this in version 2.2. See AbstractIntegerDistribution#sample.  The base class implementation delegates to RandomDataImpl#nextInversionDeviate (adding one per the last comment).&lt;/p&gt;</comment>
                    <comment id="13003578" author="psteitz" created="Mon, 7 Mar 2011 20:38:50 +0000"  >&lt;p&gt;Sorry for the noise. I closed the wrong ticket.  Still need to fix the javadoc to match behavior and user guide.&lt;/p&gt;</comment>
                    <comment id="13048250" author="psteitz" created="Sun, 12 Jun 2011 05:58:50 +0000"  >&lt;p&gt;Javadoc fixed in trunk r1134866&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12472763" name="DummyDiscreteDistribution.java" size="2325" author="ole" created="Sun, 6 Mar 2011 00:45:04 +0000" />
                    <attachment id="12472764" name="DummyDiscreteDistributionTest.java" size="603" author="ole" created="Sun, 6 Mar 2011 00:45:04 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 6 Mar 2011 05:32:11 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-506] The static field ChiSquareTestImpl.distribution serves no purpose</title>
                <link>https://issues.apache.org/jira/browse/MATH-506</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The static field ChiSquareTestImpl.distribution serves no purpose.&lt;/p&gt;

&lt;p&gt;There is a setter for it, but in every case where the field is used, it is first overwritten with a new value.&lt;/p&gt;

&lt;p&gt;The field and the setter should be removed, and the methods that create a new instance should create a local variable instead.&lt;/p&gt;

&lt;p&gt;For Math 2.1, the field can be removed and the setter deprecated.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12497371">MATH-506</key>
            <summary>The static field ChiSquareTestImpl.distribution serves no purpose</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="psteitz">Phil Steitz</assignee>
                                <reporter username="sebb@apache.org">Sebb</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Feb 2011 18:38:01 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:41 +0000</updated>
                    <resolved>Sat, 20 Aug 2011 21:14:57 +0000</resolved>
                            <version>1.2</version>
                <version>2.0</version>
                <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12990893" author="psteitz" created="Sat, 5 Feb 2011 02:56:06 +0000"  >&lt;p&gt;Agreed.  Since the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-349&quot; title=&quot;Dangerous code in &amp;quot;PoissonDistributionImpl&amp;quot;&quot;&gt;&lt;del&gt;MATH-349&lt;/del&gt;&lt;/a&gt; this instance field is unnecessary.&lt;/p&gt;</comment>
                    <comment id="12990898" author="psteitz" created="Sat, 5 Feb 2011 03:16:53 +0000"  >&lt;p&gt;See the discussion in &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-349&quot; title=&quot;Dangerous code in &amp;quot;PoissonDistributionImpl&amp;quot;&quot;&gt;&lt;del&gt;MATH-349&lt;/del&gt;&lt;/a&gt; where it was decided to remove the distribution pluggability in 3.0.  In 2.x, the distribution is pluggable and the instance field is useful.  The 3.0 code in trunk removes the pluggability and makes the field useless.&lt;/p&gt;</comment>
                    <comment id="12990973" author="sebb@apache.org" created="Sat, 5 Feb 2011 12:42:21 +0000"  >&lt;p&gt;Sorry - I thought I had checked the 2.x implementation as well, but obviously not, as it does use the field.&lt;/p&gt;

&lt;p&gt;However, we should still deprecate the setter in 2.2, as it is removed in 3.0 - OK?&lt;/p&gt;</comment>
                    <comment id="12990981" author="sebb@apache.org" created="Sat, 5 Feb 2011 13:23:45 +0000"  >&lt;p&gt;Just tried removing the field and setter in 3.0, and found that the constructors rely on the setter (which is a separate bug, as the setter is not final - but easily fixable if required).&lt;/p&gt;

&lt;p&gt;The fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-349&quot; title=&quot;Dangerous code in &amp;quot;PoissonDistributionImpl&amp;quot;&quot;&gt;&lt;del&gt;MATH-349&lt;/del&gt;&lt;/a&gt; merely removed deprecated code.&lt;/p&gt;

&lt;p&gt;It replaced &quot;distribution.setDegreesOfFreedom(dof)&quot; with &quot;distribution = new ChiSquaredDistributionImpl(dof)&quot; which is how the field became useless.&lt;/p&gt;

&lt;p&gt;There are two constructors which still create values for the distribution field.&lt;/p&gt;

&lt;p&gt;I don&apos;t know enough about the Math to know whether there would be any use cases for having additional methods that used a distribution provided by the class instance, rather than calculated by the individual methods (as at present).&lt;/p&gt;

&lt;p&gt;If there is no need for external provision of the distribution degree of freedom, then the constructor with parameter can be dropped.&lt;/p&gt;

&lt;p&gt;Otherwise, we need to add some methods that can use the provided distribution (which should be a final instance field).&lt;/p&gt;

&lt;p&gt;In any case, I think the setter needs to be dropped from 3.x&lt;/p&gt;</comment>
                    <comment id="12990995" author="psteitz" created="Sat, 5 Feb 2011 14:52:21 +0000"  >&lt;p&gt;The instance field was there originally so that different ChiSquareDistribution implementations could be provided at construction time or via a setter (making the underlying ChiSquareDistribution pluggable).  &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-349&quot; title=&quot;Dangerous code in &amp;quot;PoissonDistributionImpl&amp;quot;&quot;&gt;&lt;del&gt;MATH-349&lt;/del&gt;&lt;/a&gt; pointed to a different problem related to mutability of implementation instances.  The simplest solution to both problems is to eliminate the pluggability, which the change in &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-349&quot; title=&quot;Dangerous code in &amp;quot;PoissonDistributionImpl&amp;quot;&quot;&gt;&lt;del&gt;MATH-349&lt;/del&gt;&lt;/a&gt; does for this class.  The degrees of freedom are always computed from the data, so there is no need for the constructor that takes a distribution instance as argument.  Both the constructor and setter can be deprecated in 2.2 and removed in 3.0 unless we want to keep pluggability, which would require&lt;/p&gt;

&lt;p&gt;1) making the distribution field final (so removing the setter)&lt;br/&gt;
2) copying, rather than referencing the actual parameter provided to the constructor&lt;/p&gt;

&lt;p&gt;I am on the fence on this.  Maybe others can chime in (next week &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12991006" author="sebb@apache.org" created="Sat, 5 Feb 2011 15:30:17 +0000"  >&lt;p&gt;OK, I see now, thanks!&lt;/p&gt;</comment>
                    <comment id="13088272" author="psteitz" created="Sat, 20 Aug 2011 21:14:57 +0000"  >&lt;p&gt;I removed the field (hence eliminating pluggability) in r1159916.  As of 3.0, the distribution classes are immutable, so to support pluggability a factory or class name rather than a distribution instance would have to be provided.  There is only one implementation provided by &lt;span class=&quot;error&quot;&gt;&amp;#91;math&amp;#93;&lt;/span&gt;, so I do not see this as worth the effort and complexity to retain.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 5 Feb 2011 02:56:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-505] TestUtils is thread-hostile</title>
                <link>https://issues.apache.org/jira/browse/MATH-505</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;TestUtils has several mutable static fields which are not synchronised, or volatile.&lt;/p&gt;

&lt;p&gt;If one of the fields is updated by thread A, there is no guarantee that thread B will see the full update - it may see a partially updated object.&lt;/p&gt;

&lt;p&gt;Furthermore, at least some of the static fields reference a mutable object, which can be changed whilst another thread is using it.&lt;/p&gt;

&lt;p&gt;As far as I can tell, this class must only ever be used by a single thread otherwise the results will be unpredictable.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12497270">MATH-505</key>
            <summary>TestUtils is thread-hostile</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="sebb@apache.org">Sebb</assignee>
                                <reporter username="sebb@apache.org">Sebb</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Feb 2011 00:28:56 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:40 +0000</updated>
                    <resolved>Tue, 1 Feb 2011 18:58:30 +0000</resolved>
                            <version>1.2</version>
                <version>2.0</version>
                <version>2.1</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12988978" author="psteitz" created="Tue, 1 Feb 2011 00:49:14 +0000"  >&lt;p&gt;What fields, exactly?&lt;/p&gt;</comment>
                    <comment id="12988980" author="sebb@apache.org" created="Tue, 1 Feb 2011 01:01:44 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;/** Singleton TTest instance using &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; implementation. */
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; TTest tTest = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TTestImpl();

/** Singleton ChiSquareTest instance using &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; implementation. */
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; ChiSquareTest chiSquareTest =
        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ChiSquareTestImpl();

/** Singleton ChiSquareTest instance using &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; implementation. */
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; UnknownDistributionChiSquareTest unknownDistributionChiSquareTest =
        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ChiSquareTestImpl();

/** Singleton OneWayAnova instance using &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; implementation. */
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; OneWayAnova oneWayAnova =
        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; OneWayAnovaImpl();&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of the above may be changed by set methods. There is no synch.&lt;/p&gt;</comment>
                    <comment id="12988986" author="psteitz" created="Tue, 1 Feb 2011 01:12:36 +0000"  >&lt;p&gt;OK, I was looking at the wrong TestUtils &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The reason for this strange-looking setup is to allow the implementations to be pluggable at runtime.  &quot;Hostile&quot; is a harsh word, but this class is certainly &lt;b&gt;not&lt;/b&gt; threadsafe.  Ideas / patches to achieve the design goal with less &quot;hostility&quot; would be appreciated.&lt;/p&gt;

&lt;p&gt;I would have to double-check, but I don&apos;t think that there is any test instance state used by the methods in this class. &lt;/p&gt;</comment>
                    <comment id="12989013" author="sebb@apache.org" created="Tue, 1 Feb 2011 02:33:29 +0000"  >&lt;p&gt;By thread-hostile, I mean that it is not possible in general for two different threads to use the class safely.&lt;br/&gt;
If one thread changes any of the static fields, there is no way of knowing how the methods called by the other thread will behave. This is partly because the values are not safely published currently, but even if they were, the threads don&apos;t know what settings will be used as they can be changed at any time by another thread.&lt;/p&gt;

&lt;p&gt;In general, any class which relies on mutable static state for its behaviour is thread-hostile.&lt;br/&gt;
The shared state cannot simultaneously satisfy two threads needing different behaviour.&lt;/p&gt;

&lt;p&gt;I think the only safe way for two threads to use the class as it stands is if they both synchronize on the class.&lt;br/&gt;
This will ensure safe publication of any field changes, and enforce serial usage which can guarantee the setting that will be used (but the lock will have to be held for the set call as well).&lt;/p&gt;

&lt;p&gt;ChiSquareTestImpl has a non-final instance field which means its value won&apos;t necessarily be safely published.&lt;br/&gt;
The field also has a setter which could be invoked by one thread while another was using it.&lt;/p&gt;

&lt;p&gt;TTestImpl is immutable (has no fields), and OneWayAnovaImpl can be made immutable, but other implementations of the interfaces might exist which are not immutable.&lt;/p&gt;

&lt;p&gt;The simplest way to make the class thread-safe would be to convert all the methods and fields from static to instance, but I don&apos;t know if that is acceptable.&lt;/p&gt;</comment>
                    <comment id="12989039" author="psteitz" created="Tue, 1 Feb 2011 05:14:52 +0000"  >&lt;p&gt;Making the methods instance sort of defeats the purpose of the class.  None of the instance data in any of the static singletons is actually used or depended on by the methods of this class.  You are correct though that if one thread changes the impl for one of the singletons while another is using the class, the other could see a different than expected impl.  I think the practical likelihood of this is pretty much nil, as it is hard to imagine an application supplying two different implementations for the tests and wanting different threads to use different impls.  Personally, I would be happy just documenting the fact that the class is not threadsafe and if concurrent threads want to plug in different implementations, they need to synchronize on the class.  If this is not acceptable, my next preference would be to remove the pluggability - i.e., make the singletons final or get rid of them altogether, creating instances as needed for static method calls.  There is no initialization overhead creating the test classes.&lt;/p&gt;</comment>
                    <comment id="12989071" author="joehni" created="Tue, 1 Feb 2011 07:15:44 +0000"  >&lt;p&gt;@Phil: Please also keep in mind that M3 supports now (currently optional) parallel execution and it might be no longer a proper assumption that all tests are executed serially.&lt;/p&gt;</comment>
                    <comment id="12989188" author="sebb@apache.org" created="Tue, 1 Feb 2011 12:53:41 +0000"  >&lt;p&gt;There is another possible option, which would be to fix the default implementations, and create new static methods that took an extra parameter for the implementation to be used.&lt;/p&gt;

&lt;p&gt;At present, changes to the static fields are not guaranteed to be published correctly. Making them volatile would fix this, but would not help with concurrent access.&lt;/p&gt;</comment>
                    <comment id="12989232" author="psteitz" created="Tue, 1 Feb 2011 15:02:19 +0000"  >&lt;p&gt;Thanks, Joerg.  There should be no problems with the unit tests unless and until we introduce different tests that actually test the pluggability.  &lt;/p&gt;

&lt;p&gt;I thought about the additional parameter option, Sebb; but that again defeats the purpose of this &quot;convenience class&quot; - you might as well just instantiate the implementation and use it.&lt;/p&gt;

&lt;p&gt;I think the best solution is to just make the fields final and drop the getters and setters.  This is consistent with StatUtils.  So we should document the &quot;hostility&quot; issues in 2.2 and deprecate there and drop in 3.0.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 1 Feb 2011 00:49:14 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-484] events detection in ODE solvers is too complex and not robust</title>
                <link>https://issues.apache.org/jira/browse/MATH-484</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;All ODE solvers support multiple events detection since a long time. Events are specified by users by implementing the EventHandler interface. Events occur when the g(t, y) function evaluates to 0. When an event occurs, the solver step is shortened to make sure the event is located at the end of the step, and the event is triggered by calling the eventOccurred method in the user defined implementation class. Depending on the return value of this method, integration can continue, it can be stopped, or the state vector can be reset.&lt;/p&gt;

&lt;p&gt;Some ODE solvers are adaptive step size solvers. They can modify step size to match an integration error setting, increasing step size when error is low (thus reducing computing costs) or reducing step size when error is high (thus fulfilling accuracy requirements).&lt;/p&gt;

&lt;p&gt;The step adaptations due to events on one side and due to adaptive step size solvers are quite intricate by now, due to numerous fixes (&lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-161&quot; title=&quot;patch for Mantissa&quot;&gt;&lt;del&gt;MATH-161&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-213&quot; title=&quot;FirstOrderIntegrator.integrate does not give back integration stop time when an event handler stops integration&quot;&gt;&lt;del&gt;MATH-213&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-322&quot; title=&quot;during ODE integration, the last event in a pair of very close event may not be detected&quot;&gt;&lt;del&gt;MATH-322&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-358&quot; title=&quot;ODE integrator goes past specified end of integration range&quot;&gt;&lt;del&gt;MATH-358&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-421&quot; title=&quot;restarting an ODE solver that has been stopped by an event doesn&amp;#39;t work&quot;&gt;&lt;del&gt;MATH-421&lt;/del&gt;&lt;/a&gt; and also during standard maintenance - see for example r781157). The code is very difficult to maintain. It seems each bug fix introduces new bugs (r781157/&lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-322&quot; title=&quot;during ODE integration, the last event in a pair of very close event may not be detected&quot;&gt;&lt;del&gt;MATH-322&lt;/del&gt;&lt;/a&gt;) or tighten the link between adaptive step size and event detection (&lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-388&quot; title=&quot;ODE integrator: different size needed for state vector and tolerance error vector dimension&quot;&gt;&lt;del&gt;MATH-388&lt;/del&gt;&lt;/a&gt;/r927202).&lt;/p&gt;

&lt;p&gt;A new bug discovered recently on an external library using a slightly modified version of this code could not be retroffitted into commons-math, despite the same problem is present. At the beginning of EventState.evaluateStep, the initial step may be exactly 0 thus preventing root solving, but preventing this size to drop to 0 would reopen &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-388&quot; title=&quot;ODE integrator: different size needed for state vector and tolerance error vector dimension&quot;&gt;&lt;del&gt;MATH-388&lt;/del&gt;&lt;/a&gt;. I could not fix both bugs at the same time.&lt;/p&gt;

&lt;p&gt;So it is now time to untangle events detection and adaptive step size, simplify code, and remove some inefficiency (event root solving is always done twice, once before step truncation and another time after truncation, of course with slightly different results, events shortened steps induce high computation load until the integrator recovers its optimal pace again, steps are rejected even when the event does not requires it ...).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12495935">MATH-484</key>
            <summary>events detection in ODE solvers is too complex and not robust</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="luc">Luc Maisonobe</assignee>
                                <reporter username="luc">Luc Maisonobe</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Jan 2011 20:49:51 +0000</created>
                <updated>Wed, 23 Mar 2011 20:35:01 +0000</updated>
                    <resolved>Mon, 14 Feb 2011 14:20:29 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12984395" author="luc" created="Thu, 20 Jan 2011 20:57:36 +0000"  >&lt;p&gt;fixed in subversion repository as of r1061507 for branch 2.X and as of r1061508 for trunk&lt;/p&gt;</comment>
                    <comment id="12994291" author="luc" created="Mon, 14 Feb 2011 13:39:23 +0000"  >&lt;p&gt;The fix introduced in r1061507 fails in several cases. If several events of the same type occur within a single long step, only the first one is triggered. If several events of different types occur during a backward integration, they are triggered in the wrong order (i.e. they are triggered in forward occurrence time order instead of backward).&lt;/p&gt;</comment>
                    <comment id="12994307" author="luc" created="Mon, 14 Feb 2011 14:20:29 +0000"  >&lt;p&gt;fixed in subversion repository as of r1070498 for branch 2.X and r1070499 for trunk&lt;/p&gt;</comment>
                    <comment id="13010404" author="luc" created="Wed, 23 Mar 2011 20:35:01 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-481] MathUtils.equals(double x, double y) disagrees with Javadoc</title>
                <link>https://issues.apache.org/jira/browse/MATH-481</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;MathUtils.equals(double x, double y) disagrees with Javadoc.&lt;/p&gt;

&lt;p&gt;The Javadoc says:&lt;/p&gt;

&lt;p&gt;Returns true iff they are equal as defined by  {@link #equals(double,double,int)}&lt;/p&gt;

&lt;p&gt;However, the code actually uses == and checks for NaN:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; x, &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; y) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.isNaN(x) &amp;amp;&amp;amp; &lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.isNaN(y)) || x == y;
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method is deprecated, but it should probably still be consistent with its documentation.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12495806">MATH-481</key>
            <summary>MathUtils.equals(double x, double y) disagrees with Javadoc</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="sebb@apache.org">Sebb</reporter>
                        <labels>
                    </labels>
                <created>Mon, 17 Jan 2011 17:15:41 +0000</created>
                <updated>Wed, 23 Mar 2011 20:33:40 +0000</updated>
                    <resolved>Mon, 17 Jan 2011 22:39:52 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12982908" author="erans" created="Mon, 17 Jan 2011 22:39:52 +0000"  >&lt;p&gt;Corrected Javadoc in revision 1060117.&lt;/p&gt;</comment>
                    <comment id="13010400" author="luc" created="Wed, 23 Mar 2011 20:33:40 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 17 Jan 2011 22:39:52 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-465] Incorrect matrix rank via SVD</title>
                <link>https://issues.apache.org/jira/browse/MATH-465</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The getRank() function of SingularValueDecompositionImpl does not work properly. This problem is probably related to the numerical stability problems mentioned in &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-327&quot;&gt;MATH-327&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-320&quot;&gt;MATH-320&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example call with the standard matrix from R (rank 2):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;TestSVDRank.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.math.linear.Array2DRowRealMatrix;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.math.linear.RealMatrix;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.math.linear.SingularValueDecomposition;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.math.linear.SingularValueDecompositionImpl;

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class TestSVDRank {
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) {
		&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;[][] d = { { 1, 1, 1 }, { 0, 0, 0 }, { 1, 2, 3 } };
		RealMatrix m = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Array2DRowRealMatrix(d);
		SingularValueDecomposition svd = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SingularValueDecompositionImpl(m);
		&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; r = svd.getRank();
		&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;Rank: &quot;&lt;/span&gt;+r);
	}
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;The rank is computed as 3. This problem also occurs for larger matrices. I discovered the problem when trying to replace the corresponding JAMA method.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Windows XP Prof. Vs. 2002&lt;/p&gt;</environment>
            <key id="12494744">MATH-465</key>
            <summary>Incorrect matrix rank via SVD</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="marisa">Marisa Thoma</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 Jan 2011 17:34:41 +0000</created>
                <updated>Sat, 24 Mar 2012 16:17:03 +0000</updated>
                    <resolved>Wed, 20 Jul 2011 12:20:51 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12982138" author="psteitz" created="Sat, 15 Jan 2011 17:21:26 +0000"  >&lt;p&gt;Thanks for reporting this.  Looks like it could as you suggest be related to &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-327&quot; title=&quot; Maximal number of iterations (540) exceeded&quot;&gt;&lt;del&gt;MATH-327&lt;/del&gt;&lt;/a&gt;.  &lt;/p&gt;</comment>
                    <comment id="12982139" author="psteitz" created="Sat, 15 Jan 2011 17:22:52 +0000"  >&lt;p&gt;For now, pushing to 3.0.  If we get a fix for this and &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-327&quot; title=&quot; Maximal number of iterations (540) exceeded&quot;&gt;&lt;del&gt;MATH-327&lt;/del&gt;&lt;/a&gt; before 3.0 is ready, I may propose a 2.2.1 to include it.&lt;/p&gt;</comment>
                    <comment id="13054046" author="gsteri1" created="Thu, 23 Jun 2011 19:20:03 +0000"  >&lt;p&gt;My apologies if I am missing something, but here is what I noticed about the SVD. &lt;/p&gt;

&lt;p&gt;On lines 124-127 of SingularValueDecompositionImpl we have:&lt;/p&gt;

&lt;p&gt;        for (int i = 0; i &amp;lt; p; i++) {
            singularValues[i] = FastMath.sqrt(FastMath.abs(singularValues[i]));
        }&lt;/p&gt;

&lt;p&gt;This is potentially the offending line. First is the problem of negative eigenvalues. Negative variance in the principal components should probably be dealt with explicitly? Perhaps by throwing a MathException? Second, and the issue which this bug report deals with, is taking a square root of a very small number (&amp;lt;1) will return a larger number. If you apply the threshold test in getRank() (final double threshold = FastMath.max(m, n) * FastMath.ulp(singularValues&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;) )  prior to taking the square root, I believe this problem would be resolved. More importantly, philosophically, you test for zero variance. This is the appropriate test.&lt;/p&gt;

&lt;p&gt;Also, rank could be precalculated in the above loop. &lt;/p&gt;</comment>
                    <comment id="13068317" author="luc" created="Wed, 20 Jul 2011 12:20:51 +0000"  >&lt;p&gt;Fixed in subversion repository as of r1148714.&lt;/p&gt;

&lt;p&gt;This issue was fixed by changing SVD implementation according to issue &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-611&quot; title=&quot;A fast and stable SVD implementation from JAMA&quot;&gt;&lt;del&gt;MATH-611&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                                <inwardlinks description="is part of">
                            <issuelink>
            <issuekey id="12512945">MATH-611</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 15 Jan 2011 17:21:26 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-464] LegendreGaussIntegrator ignores defaultMaximalIterationCount and does 38 million iterations</title>
                <link>https://issues.apache.org/jira/browse/MATH-464</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The following code results in count = 37801710 which is effectively an infinite loop for typical functions we are using&lt;br/&gt;
(in GeoGebra)&lt;/p&gt;

&lt;p&gt;The argument defaultMaximalIterationCount = 100 is being ignored&lt;/p&gt;

&lt;p&gt;This is the version we are using:&lt;br/&gt;
&lt;a href=&quot;http://www.geogebra.org/trac/browser/trunk/geogebra/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java&quot;&gt;http://www.geogebra.org/trac/browser/trunk/geogebra/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    	LegendreGaussIntegrator gauss = new LegendreGaussIntegrator(5, 100);&lt;/p&gt;

&lt;p&gt;	try {
		double result = gauss.integrate(new testFun(), -10, 0.32462367623786328);
	} catch (Exception ee) {
		ee.printStackTrace();
	}&lt;/p&gt;



&lt;p&gt;class testFun implements UnivariateRealFunction {&lt;/p&gt;

&lt;p&gt;    public double value(double x) throws FunctionEvaluationException {
    	count ++;
        if (x&amp;gt;=0 &amp;amp;&amp;amp; x&amp;lt;=5) return 0.2; else return 0;
    }&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;</description>
                <environment></environment>
            <key id="12494345">MATH-464</key>
            <summary>LegendreGaussIntegrator ignores defaultMaximalIterationCount and does 38 million iterations</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priority_critical.gif">Critical</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="murkle">Michael Borcherds</reporter>
                        <labels>
                    </labels>
                <created>Fri, 31 Dec 2010 07:00:42 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:48 +0000</updated>
                    <resolved>Tue, 23 Aug 2011 22:37:41 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                          <timeoriginalestimate seconds="10800">3h</timeoriginalestimate>
                    <timeestimate seconds="10800">3h</timeestimate>
                                  <comments>
                    <comment id="12981497" author="psteitz" created="Thu, 13 Jan 2011 21:37:15 +0000"  >&lt;p&gt;Thanks for reporting this.&lt;/p&gt;

&lt;p&gt;The problem here is not with the iteration count.  In the example above, only 26 iterations are executed and the method returns the correct value.  What is causing the number of function evaluations to be so large is that each iteration involves multiple function evaluations.   I need to dig more deeply into the algorithm to determine what (if anything) the problem is, but what is causing the high number of function evaluations is the following&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// prepare next iteration
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; ratio = FastMath.min(4, FastMath.pow(delta / limit, 0.5 / abscissas.length));
n = FastMath.max((&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) (ratio * n), n + 1);&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example, delta / limit becomes large, causing n to increase rapidly.  As n increases, the number of function evaluations increases.&lt;/p&gt;</comment>
                    <comment id="12981731" author="psteitz" created="Fri, 14 Jan 2011 12:06:14 +0000"  >&lt;p&gt;I am now thinking that this is not a bug, but a consequence of the fact that the integrand in the example is not at all well-approximated by a polynomial.  With a small-enough stepsize, the algorithm does converge, but requiring the large number of function evaluations above.  Here are some stepsize values for the example and the associated absolute error:&lt;/p&gt;

&lt;p&gt;n 8 error 0.05738431110184819&lt;br/&gt;
n 28 error 0.027423287634332688&lt;br/&gt;
n 100 error 8.62162720248888E-5&lt;br/&gt;
n 249 error 5.308122631570711E-4&lt;br/&gt;
n 650 error 4.3582615516528367E-4&lt;br/&gt;
n 1641 error 2.519984967931377E-4&lt;br/&gt;
n 3829 error 5.838605030586419E-5&lt;br/&gt;
...&lt;br/&gt;
 n 1102593 error 6.71416523906343E-8&lt;/p&gt;

&lt;p&gt;The last entry is from the last (26th) iteration.  I haven&apos;t verified the rationale for the updating formula for n above, but it does appear warranted in this case to increase n quickly as large n (= small stepsize) is required to get a decent estimate of the integral using Gaussian quadrature.&lt;/p&gt;</comment>
                    <comment id="12981754" author="luc" created="Fri, 14 Jan 2011 13:40:51 +0000"  >&lt;p&gt;Perhaps we should also provide higher order formulas, using either a fixed set of precomputed constants or a way to compute the coefficients for any order.&lt;/p&gt;</comment>
                    <comment id="12982133" author="psteitz" created="Sat, 15 Jan 2011 16:56:44 +0000"  >&lt;p&gt;Moving to 3.0.  I don&apos;t think this is a bug, but points to a couple of possible enhancements:&lt;/p&gt;

&lt;p&gt;1) higher order formulas (+0 on this suggestion from Luc - IMO the example and others like it are not suitable for Legendre-Gauss)&lt;br/&gt;
2) bound on the number of function evaluations (I vaguely recall us talking about this elsewhere, but can&apos;t find the reference.  If anyone else can, pls add.)&lt;/p&gt;</comment>
                    <comment id="13017945" author="luc" created="Sat, 9 Apr 2011 19:48:23 +0000"  >&lt;p&gt;We restarted a thread about this a few days after the previous comment on this issue.&lt;br/&gt;
The thread can be read here: &lt;a href=&quot;http://markmail.org/thread/rnazrggnnuehz4qv&quot;&gt;http://markmail.org/thread/rnazrggnnuehz4qv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think adding maxEvaluations while still preserving the existing maxIterations would be fine.&lt;/p&gt;</comment>
                    <comment id="13068347" author="luc" created="Wed, 20 Jul 2011 13:04:47 +0000"  >&lt;p&gt;Coming back to this issue.&lt;/p&gt;

&lt;p&gt;I would propose to follow the same pattern we used for root solvers: adding a maxEval parameter in the top level integrate interface declaration. So we would have the same kind of configuration, with tolerances set at integrator/solver level and maxEval and function pointer passed at integrate/solve method call.&lt;/p&gt;

&lt;p&gt;Since we are just in the phase we change interfaces, this would be a good time to add this parameter.&lt;/p&gt;

&lt;p&gt;Does this seems reasonable ?&lt;/p&gt;</comment>
                    <comment id="13083502" author="psteitz" created="Thu, 11 Aug 2011 20:36:21 +0000"  >&lt;p&gt;+1 for your suggestion, Luc.  Lets try to get this into 3.0.&lt;/p&gt;</comment>
                    <comment id="13089832" author="luc" created="Tue, 23 Aug 2011 22:37:41 +0000"  >&lt;p&gt;Fixed in subversion repository as of r1160914.&lt;/p&gt;

&lt;p&gt;The API of the integrators has been changed for consistency with solvers API. Now the main convergence parameters are set in the constructor and remain fixed, but a maximal number of function evaluation must be provided at each call to the integration method.&lt;/p&gt;

&lt;p&gt;Thanks for the report&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 13 Jan 2011 21:37:15 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-453] RealVector Javadoc refers to non-existent package org.apache.commons.math.analysis.function</title>
                <link>https://issues.apache.org/jira/browse/MATH-453</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;RealVector Javadoc refers to non-existent package org.apache.commons.math.analysis.function.&lt;/p&gt;

&lt;p&gt;As this explains how to recode deprecated method calls, it ought to be corrected before release.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12492117">MATH-453</key>
            <summary>RealVector Javadoc refers to non-existent package org.apache.commons.math.analysis.function</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="erans">Gilles</assignee>
                                <reporter username="sebb@apache.org">Sebb</reporter>
                        <labels>
                    </labels>
                <created>Mon, 6 Dec 2010 02:01:08 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:32 +0000</updated>
                    <resolved>Mon, 6 Dec 2010 12:53:56 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12967175" author="erans" created="Mon, 6 Dec 2010 12:53:56 +0000"  >&lt;p&gt;Removed references to the &lt;tt&gt;analysis.function&lt;/tt&gt; package (revision 1042610).&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 6 Dec 2010 12:53:56 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-434] SimplexSolver returns unfeasible solution</title>
                <link>https://issues.apache.org/jira/browse/MATH-434</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The SimplexSolver is returning an unfeasible solution:&lt;/p&gt;

&lt;p&gt;import java.util.ArrayList;&lt;br/&gt;
import java.text.DecimalFormat;&lt;br/&gt;
import org.apache.commons.math.linear.ArrayRealVector;&lt;br/&gt;
import org.apache.commons.math.optimization.GoalType;&lt;br/&gt;
import org.apache.commons.math.optimization.OptimizationException;&lt;br/&gt;
import org.apache.commons.math.optimization.linear.*;&lt;/p&gt;

&lt;p&gt;public class SimplexSolverBug {&lt;/p&gt;

&lt;p&gt;    public static void main(String[] args) throws OptimizationException {&lt;/p&gt;

&lt;p&gt;        LinearObjectiveFunction c = new LinearObjectiveFunction(new double[]{0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d}, 0.0d);&lt;/p&gt;

&lt;p&gt;        ArrayList&amp;lt;LinearConstraint&amp;gt; cnsts = new ArrayList&amp;lt;LinearConstraint&amp;gt;(5);&lt;br/&gt;
        LinearConstraint cnst;&lt;br/&gt;
        cnst = new LinearConstraint(new double[] {1.0d, -0.1d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.EQ, -0.1d);&lt;br/&gt;
        cnsts.add(cnst);&lt;br/&gt;
        cnst = new LinearConstraint(new double[] {1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, -1e-18d);&lt;br/&gt;
        cnsts.add(cnst);&lt;br/&gt;
        cnst = new LinearConstraint(new double[] {0.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d);&lt;br/&gt;
        cnsts.add(cnst);&lt;br/&gt;
        cnst = new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 1.0d, 0.0d, -0.0128588d, 1e-5d}, Relationship.EQ, 0.0d);&lt;br/&gt;
        cnsts.add(cnst);&lt;br/&gt;
        cnst = new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 0.0d, 1.0d, 1e-5d, -0.0128586d}, Relationship.EQ, 1e-10d);&lt;br/&gt;
        cnsts.add(cnst);&lt;br/&gt;
        cnst = new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, -1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d);&lt;br/&gt;
        cnsts.add(cnst);&lt;br/&gt;
        cnst = new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d);&lt;br/&gt;
        cnsts.add(cnst);&lt;br/&gt;
        cnst = new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, -1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d);&lt;br/&gt;
        cnsts.add(cnst);&lt;br/&gt;
        cnst = new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, 1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d);&lt;br/&gt;
        cnsts.add(cnst);&lt;/p&gt;

&lt;p&gt;        DecimalFormat df = new java.text.DecimalFormat(&quot;0.#####E0&quot;);&lt;/p&gt;

&lt;p&gt;        System.out.println(&quot;Constraints:&quot;);&lt;br/&gt;
        for(LinearConstraint con : cnsts) {
            for (int i = 0; i &amp;lt; con.getCoefficients().getDimension(); ++i)
                System.out.print(df.format(con.getCoefficients().getData()[i]) + &quot; &quot;);
            System.out.println(con.getRelationship() + &quot; &quot; + con.getValue());
        }&lt;/p&gt;

&lt;p&gt;        SimplexSolver simplex = new SimplexSolver(1e-7);&lt;br/&gt;
        double[] sol = simplex.optimize(c, cnsts, GoalType.MINIMIZE, false).getPointRef();&lt;br/&gt;
        System.out.println(&quot;Solution:\n&quot; + new ArrayRealVector(sol));&lt;br/&gt;
        System.out.println(&quot;Second constraint is violated!&quot;);&lt;br/&gt;
    }&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;It&apos;s an odd problem, but something I ran across.  I tracked the problem to the getPivotRow routine in SimplexSolver.  It was choosing a pivot that resulted in a negative right-hand-side.  I recommend a fix by replacing&lt;br/&gt;
                ...&lt;br/&gt;
                if (MathUtils.equals(ratio, minRatio, epsilon)) {&lt;br/&gt;
                ...&lt;br/&gt;
with&lt;br/&gt;
                ...&lt;br/&gt;
                if (MathUtils.equals(ratio, minRatio, Math.abs(epsilon/entry))) {&lt;br/&gt;
                ...&lt;/p&gt;

&lt;p&gt;I believe this would be more appropriate (and at least resolves this particular problem).&lt;/p&gt;

&lt;p&gt;Also, you may want to consider making a change in getPivotColumn to replace&lt;br/&gt;
            ...&lt;br/&gt;
            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) &amp;lt; 0) {&lt;br/&gt;
            ...&lt;br/&gt;
with&lt;br/&gt;
            ...&lt;br/&gt;
            if (tableau.getEntry(0, i) &amp;lt; minValue) &lt;br/&gt;
            ...&lt;br/&gt;
because I don&apos;t see the point of biasing earlier columns when multiple entries are within epsilon of each other.  Why not pick the absolute smallest.  I don&apos;t know that any problem can result from doing it the other way, but the latter may be a safer bet.&lt;/p&gt;

&lt;p&gt;VERY IMPORTANT: I discovered another bug that occurs when not restricting to non-negatives.  In SimplexTableu::getSolution(), &lt;br/&gt;
          ...          &lt;br/&gt;
          if (basicRows.contains(basicRow)) &lt;br/&gt;
              // if multiple variables can take a given value&lt;br/&gt;
              // then we choose the first and set the rest equal to 0&lt;br/&gt;
              coefficients&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; = 0;&lt;br/&gt;
          ...&lt;br/&gt;
should be&lt;br/&gt;
          ...          &lt;br/&gt;
          if (basicRows.contains(basicRow)) {&lt;br/&gt;
              // if multiple variables can take a given value&lt;br/&gt;
              // then we choose the first and set the rest equal to 0&lt;br/&gt;
              coefficients&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; = (restrictToNonNegative ? 0 : -mostNegative);&lt;br/&gt;
          ...&lt;br/&gt;
If necessary, I can give an example of where this bug causes a problem, but it should be fairly obvious why this was wrong.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12479313">MATH-434</key>
            <summary>SimplexSolver returns unfeasible solution</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="wmwitzel">Wayne Witzel</reporter>
                        <labels>
                    </labels>
                <created>Sun, 7 Nov 2010 03:55:32 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:29 +0000</updated>
                    <resolved>Sat, 9 Apr 2011 19:21:59 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12929443" author="wmwitzel" created="Mon, 8 Nov 2010 03:30:34 +0000"  >&lt;p&gt;My original suggested fix had a potential for overflow errors (since minRatio is initialized to Double.MAX_VALUE).  Also, I added another suggestion and pointed out another bug which leads to invalid solutions.&lt;/p&gt;</comment>
                    <comment id="12929508" author="erans" created="Mon, 8 Nov 2010 08:52:39 +0000"  >&lt;p&gt;Could you attach unit tests that demonstrate each problem?  Thank you.&lt;/p&gt;</comment>
                    <comment id="12931688" author="wmwitzel" created="Sat, 13 Nov 2010 15:45:43 +0000"  >&lt;p&gt;I&apos;ll try to send some examples soon.  I&apos;m noticing more problems with the right-hand-side going negative and want to cover all bases (as much as possible).&lt;/p&gt;</comment>
                    <comment id="12931848" author="wmwitzel" created="Sun, 14 Nov 2010 18:03:46 +0000"  >&lt;p&gt;Code, and resulting output, that illustrates issues with the SimplexSolver.&lt;/p&gt;</comment>
                    <comment id="12975154" author="psteitz" created="Sun, 26 Dec 2010 20:02:06 +0000"  >&lt;p&gt;Pushing out to 3.0.&lt;/p&gt;</comment>
                    <comment id="12980570" author="bmccann" created="Wed, 12 Jan 2011 05:49:30 +0000"  >&lt;p&gt;Hey, sorry I took so long to look at this.  I&apos;ve had very little time and am not working on this stuff anymore.  I&apos;m honestly not going to be able to look at this stuff much moving forward, so hopefully there&apos;s a Commons Math contributor that can act as a reviewer.&lt;/p&gt;

&lt;p&gt;When you say it&apos;s choosing a pivot with a negative RHS, I&apos;m assuming that means it&apos;s not within the epsilon?&lt;br/&gt;
Why would it be more appropriate to divide by the entry?  I&apos;m not sure I see why you&apos;d want to use a bigger epsilon when the entry is 0.1 and a smaller epsilon when the entry is 10.  Maybe we should just make the default epsilon smaller?  I&apos;m no expert with floating point math so I&apos;m not real sure how to set the epsilon and just made up a value.&lt;br/&gt;
...&lt;br/&gt;
if (MathUtils.equals(ratio, minRatio, epsilon)) {&lt;br/&gt;
...&lt;br/&gt;
with&lt;br/&gt;
...&lt;br/&gt;
if (MathUtils.equals(ratio, minRatio, Math.abs(epsilon/entry))) {&lt;/p&gt;</comment>
                    <comment id="13015234" author="tn" created="Sun, 3 Apr 2011 22:24:36 +0000"  >&lt;p&gt;Attached a patch for the reported problems.&lt;br/&gt;
The problems can be split into two groups:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;wrong solution calculation with negative&lt;br/&gt;
   variables&lt;/li&gt;
	&lt;li&gt;failing to select an appropriate pivot&lt;br/&gt;
   row when values are below a given &lt;br/&gt;
   epsilon&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The patch addresses both problems:&lt;/p&gt;

&lt;p&gt; 1. fix in SimplexTableau.getSolution()&lt;br/&gt;
 2. use BigReal for arbitrary precision  &lt;br/&gt;
    support when selecting the pivot row&lt;/p&gt;

&lt;p&gt;Additionally, 4 test cases are included, as well as a minor typo fix for a method name.&lt;/p&gt;

&lt;p&gt;The fixed epsilon is also used in some other places of the code, this may also create problems under certain circumstances. So if this patch is accepted, the other places could also be adapted.&lt;/p&gt;</comment>
                    <comment id="13015549" author="luc" created="Mon, 4 Apr 2011 19:00:31 +0000"  >&lt;p&gt;Thanks Thomas.&lt;/p&gt;

&lt;p&gt;I had a look at the patch. I&apos;m not a big fan of using BigReal, mainly when we don&apos;t specify a scale and we don&apos;t link it to the choice for epsilon. Also reading back Ben comments, I wonder if we should not replace epsilon by an integer number of ulps with a default set to a very small value (say something like 10 ulps).&lt;/p&gt;

&lt;p&gt;What problem did you see in the accuracy of the variables to use BigReal ?&lt;/p&gt;</comment>
                    <comment id="13015626" author="tn" created="Mon, 4 Apr 2011 21:24:30 +0000"  >&lt;p&gt;Hi Luc,&lt;/p&gt;

&lt;p&gt;my initial idea was to use an epsilon that is adjusted to the magnitude of the respective value used for comparison. To be honest, I was not aware of &lt;span class=&quot;error&quot;&gt;&amp;#91;Math,FastMath&amp;#93;&lt;/span&gt;.ulp, therefore I went with BigReal/BigDecimal to circumvent the problem in another way (by using an arbitrary precision datatype). After reading your comment, I investigated more into the problem, e.g. using &lt;a href=&quot;http://www.cygnus-software.com/papers/comparingfloats/Comparing%20floating%20point%20numbers.htm&quot;&gt;http://www.cygnus-software.com/papers/comparingfloats/Comparing%20floating%20point%20numbers.htm&lt;/a&gt;, and addressed it (hopefully correct) in the way you proposed.&lt;/p&gt;

&lt;p&gt;Though, I had to split up the epsilon test into two categories:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;general comparison of floating-point values: using ulp, as values can be arbitrarily small&lt;/li&gt;
	&lt;li&gt;algorithm convergence check: using a standard epsilon, as the algorithm may not converge due to limited precision of&lt;br/&gt;
    the double datatype otherwise&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Please find attached my updated patch, any comments are welcome (e.g. I was unsure whether to expose the maxUlps parameter in the constructor, or to use a generic comparison epsilon, e.g. using FastMath.ulp(1d) instead of one adjusted to the current value in question).&lt;/p&gt;</comment>
                    <comment id="13015628" author="tn" created="Mon, 4 Apr 2011 21:25:24 +0000"  >&lt;p&gt;updated patch, incorporating comments from luc&lt;/p&gt;</comment>
                    <comment id="13015853" author="erans" created="Tue, 5 Apr 2011 10:56:51 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Pardon the possibly na&#239;ve questions.&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In &quot;SimplexTableau&quot;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Why not use directly &quot;equals(double, double, int)&quot; from &quot;MathUtils&quot; instead of computing an epsilon with &quot;getEpsilon&quot;?&lt;/li&gt;
	&lt;li&gt;Why is the &quot;isOptimal&quot; method not using the adjusted &quot;epsilon&quot; (at line 385)?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13015875" author="tn" created="Tue, 5 Apr 2011 11:32:04 +0000"  >&lt;p&gt;hmm, I feel a bit stupid now, as I have re-implemented MathUtils.equals(double, double, int) but in a mediocre way. So all calls to getEpsilon should be replaced with the equivalent MathUtils.equals.&lt;/p&gt;

&lt;p&gt;for the isOptimal:&lt;/p&gt;

&lt;p&gt;the idea was to have a user-defined threshold for the convergence criteria, which defaults to the original value of 1e-6. Using the same adjusted epsilon would possibly lead to more iterations as before. As the feasibility check in SimplexSolver.solvePhase1 has to use a static epsilon for convergence reasons, I thought to use the same epsilon in isOptimal makes sense for symmetry reasons (use the same epsilon to check for convergence /feasibility).&lt;/p&gt;

&lt;p&gt;But it&apos;s good that you raise these points, because I was hesitating myself what is the best way to go forward, as I am also not considering myself a floating-point expert. I am mainly interested in the simplex algorithm, that&apos;s why I have chosen to provide a patch for this (very nice) implementation of it.&lt;/p&gt;</comment>
                    <comment id="13017940" author="luc" created="Sat, 9 Apr 2011 19:21:59 +0000"  >&lt;p&gt;Fixed in subversion repository as of r1090656.&lt;br/&gt;
Path applied with a very small change: adding the maxUlps parameter to the detailed constructor.&lt;/p&gt;

&lt;p&gt;Thanks for the report and thanks for the patch.&lt;/p&gt;</comment>
                    <comment id="13018415" author="tn" created="Mon, 11 Apr 2011 16:21:00 +0000"  >&lt;p&gt;Thanks for accepting the patch. The comparison using maxUlps has already been adapted according to &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-557&quot; title=&quot;add a compareTo method to MathUtils that use a number of ulps for equality tolerance&quot;&gt;&lt;del&gt;MATH-557&lt;/del&gt;&lt;/a&gt;, but it was missing for SimplexTableau. The cleanup patch fixes this and also renames the test names for similarity.&lt;/p&gt;</comment>
                    <comment id="13018464" author="luc" created="Mon, 11 Apr 2011 17:59:29 +0000"  >&lt;p&gt;Cleanup patch applied.&lt;/p&gt;

&lt;p&gt;thanks again&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12476012" name="MATH-434-cleanup.patch" size="3785" author="tn" created="Mon, 11 Apr 2011 16:21:00 +0000" />
                    <attachment id="12475430" name="MATH-434-version2.patch" size="18314" author="tn" created="Mon, 4 Apr 2011 21:25:23 +0000" />
                    <attachment id="12475332" name="MATH-434.patch" size="9498" author="tn" created="Sun, 3 Apr 2011 22:24:36 +0000" />
                    <attachment id="12459563" name="SimplexSolverIssues.java" size="8863" author="wmwitzel" created="Sun, 14 Nov 2010 18:03:46 +0000" />
                    <attachment id="12459565" name="SimplexSolverIssuesOutput.txt" size="1967" author="wmwitzel" created="Sun, 14 Nov 2010 18:04:57 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 8 Nov 2010 08:52:39 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-429] KMeansPlusPlusClusterer breaks by division by zero</title>
                <link>https://issues.apache.org/jira/browse/MATH-429</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;For a certain space, KMeansPlusPlusClusterer  breaks. This is a blocker because this space occurs in our domain. &lt;/p&gt;</description>
                <environment>&lt;p&gt;Java, Windows&lt;/p&gt;</environment>
            <key id="12478052">MATH-429</key>
            <summary>KMeansPlusPlusClusterer breaks by division by zero</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priority_blocker.gif">Blocker</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="erikvaningen">Erik van Ingen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Oct 2010 08:01:54 +0000</created>
                <updated>Wed, 23 Mar 2011 20:25:46 +0000</updated>
                    <resolved>Sat, 23 Oct 2010 19:35:26 +0000</resolved>
                            <version>2.1</version>
                                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                          <timeoriginalestimate seconds="10800">3h</timeoriginalestimate>
                    <timeestimate seconds="10800">3h</timeestimate>
                                  <comments>
                    <comment id="12923797" author="erikvaningen" created="Fri, 22 Oct 2010 08:04:12 +0000"  >&lt;p&gt;The testcase which breaks KMeansPlusPlusClusterer&lt;/p&gt;</comment>
                    <comment id="12923906" author="luc" created="Fri, 22 Oct 2010 16:48:17 +0000"  >&lt;p&gt;You have encountered one classical problem with k-means: at some stage (here at the first iteration), one of the clusters becomes empty.&lt;br/&gt;
This case is currently no handled by commons-math (which is a bug, so we have to fix it).&lt;br/&gt;
When a cluster is empty, a new centroid must be defined from the other clusters. There are different strategies:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;take the point farthest from any cluster&lt;/li&gt;
	&lt;li&gt;select a random point from the cluster with the largest distance variance&lt;/li&gt;
	&lt;li&gt;select a random point from the cluster with the largest number of points&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;My prefered choice would be 2, what do other people think ?&lt;/p&gt;</comment>
                    <comment id="12924063" author="jwcarman" created="Fri, 22 Oct 2010 22:32:16 +0000"  >&lt;p&gt;How about make it configurable?  Take a look at how the Mallet project did it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mallet.cs.umass.edu/api/cc/mallet/cluster/KMeans.html&quot;&gt;http://mallet.cs.umass.edu/api/cc/mallet/cluster/KMeans.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, I have suggested that they try to enter the Incubator here at the ASF and they seem somewhat receptive to the idea!&lt;/p&gt;</comment>
                    <comment id="12924233" author="luc" created="Sat, 23 Oct 2010 19:35:26 +0000"  >&lt;p&gt;Fixed in subversion repository as of r1026666 for branche 2.X and as of r1026667 for trunk.&lt;br/&gt;
Users can now choose among four different strategies to deal with empty clusters:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;split the cluster with largest distance variance,&lt;/li&gt;
	&lt;li&gt;split the cluster with largest number of points,&lt;/li&gt;
	&lt;li&gt;create a cluster around the point farthest from its centroid,&lt;/li&gt;
	&lt;li&gt;generate an error&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The default is to split according to largest variance.&lt;/p&gt;

&lt;p&gt;Thanks for reporting the issue.&lt;/p&gt;</comment>
                    <comment id="13010386" author="luc" created="Wed, 23 Mar 2011 20:25:46 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12457825" name="KMeansPlusPlusClustererTest.java" size="3097" author="erikvaningen" created="Fri, 22 Oct 2010 08:04:12 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 22 Oct 2010 16:48:17 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-421] restarting an ODE solver that has been stopped by an event doesn&apos;t work</title>
                <link>https://issues.apache.org/jira/browse/MATH-421</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;If an ODE solver is setup with an EventHandler that return STOP when the even is triggered, the integrators stops (which is exactly the expected behavior).&lt;br/&gt;
If however the user want to restart the solver from the final state reached at the event with the same configuration (expecting the event to be triggered again at a later time), then the integrator may fail to start. It can get stuck at the previous event.&lt;/p&gt;

&lt;p&gt;The occurrence of the bug depends on the residual sign of the g function which is not exactly 0, it depends on the convergence of the first event.&lt;/p&gt;

&lt;p&gt;As this use case is fairly general, event occurring less than epsilon after the solver start in the first step should be ignored, where epsilon is the convergence threshold of the event. The sign of the g function should be evaluated after this initial ignore zone, not exactly at beginning (if there are no event at the very beginning g(t0) and g(t0+epsilon) have the same sign, so this does not hurt ; if there is an event at the very beginning, g(t0) and g(t0+epsilon) have opposite signs and we want to start with the second one. Of course, the sign of epsilon depend on the integration direction (forward or backward).&lt;/p&gt;</description>
                <environment>&lt;p&gt;Linux&lt;/p&gt;</environment>
            <key id="12475435">MATH-421</key>
            <summary>restarting an ODE solver that has been stopped by an event doesn&apos;t work</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="luc">Luc Maisonobe</assignee>
                                <reporter username="luc">Luc Maisonobe</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Sep 2010 18:24:56 +0000</created>
                <updated>Wed, 23 Mar 2011 20:23:12 +0000</updated>
                    <resolved>Wed, 29 Sep 2010 19:51:49 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12916264" author="luc" created="Wed, 29 Sep 2010 19:51:49 +0000"  >&lt;p&gt;Fixed in subversion repository, as of r1002827 for branch 2.X and 1002829 for trunk (3.0)&lt;/p&gt;</comment>
                    <comment id="13010382" author="luc" created="Wed, 23 Mar 2011 20:23:12 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-414] ConvergenceException in NormalDistributionImpl.cumulativeProbability()</title>
                <link>https://issues.apache.org/jira/browse/MATH-414</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;I get a ConvergenceException in  NormalDistributionImpl.cumulativeProbability() for very large/small parameters including Infinity, -Infinity.&lt;br/&gt;
For instance in the following code:&lt;/p&gt;

&lt;p&gt;	@Test&lt;br/&gt;
	public void testCumulative() {&lt;br/&gt;
		final NormalDistribution nd = new NormalDistributionImpl();&lt;br/&gt;
		for (int i = 0; i &amp;lt; 500; i++) {&lt;br/&gt;
			final double val = Math.exp&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;;&lt;br/&gt;
			try {
				System.out.println(&quot;val = &quot; + val + &quot; cumulative = &quot; + nd.cumulativeProbability(val));
			} catch (MathException e) {
				e.printStackTrace();
				fail();
			}&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;In version 2.0, I get no exception. &lt;/p&gt;

&lt;p&gt;My suggestion is to change in the implementation of cumulativeProbability(double) to catch all ConvergenceException (and return for very large and very small values), not just MaxIterationsExceededException.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Jdk 1.6.&lt;/p&gt;</environment>
            <key id="12472930">MATH-414</key>
            <summary>ConvergenceException in NormalDistributionImpl.cumulativeProbability()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="gustav.ryd">Gustav Ryd</reporter>
                        <labels>
                    </labels>
                <created>Tue, 31 Aug 2010 11:01:44 +0000</created>
                <updated>Wed, 23 Mar 2011 20:20:43 +0000</updated>
                    <resolved>Tue, 30 Nov 2010 11:57:23 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                          <timeoriginalestimate seconds="7200">2h</timeoriginalestimate>
                    <timeestimate seconds="7200">2h</timeestimate>
                                  <comments>
                    <comment id="12935656" author="psteitz" created="Thu, 25 Nov 2010 06:22:18 +0000"  >&lt;p&gt;The difference between 2.0 and 2.1 is due to the changes in ContinuedFraction included in the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-282&quot; title=&quot;ChiSquaredDistributionImpl.cumulativeProbability &amp;gt; 1&quot;&gt;&lt;del&gt;MATH-282&lt;/del&gt;&lt;/a&gt;.  For very large values, continued fractions are diverging to NaN. The suggested fix will work, but at this point, I wonder if we should just move the top-coding out of the catch - i.e., test the arguments and return 0 or 1 for extreme values without attempting the approximation.&lt;/p&gt;</comment>
                    <comment id="12936097" author="psteitz" created="Fri, 26 Nov 2010 21:17:57 +0000"  >&lt;p&gt;I am leaning toward adding top-coding outside of the catch.  Based on the inequality p(Z &amp;gt; t) &amp;lt; exp(-t^2/2) derived in &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; and Double.MIN_VALUE  = 2^-1074, I get that tail probabilities are not distinguishable from 0 for |t| &amp;gt; 39, so I propose that we top-code at 40 outside the catch.  Appreciate others checking my arithmetic.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://www.johndcook.com/normalbounds.pdf&quot;&gt;http://www.johndcook.com/normalbounds.pdf&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12964534" author="luc" created="Sun, 28 Nov 2010 11:13:46 +0000"  >&lt;p&gt;Your suggestion seems good to me.&lt;br/&gt;
I&apos;ve check exp(-t^2/2) becomes lower than Double.MIN_VALUE/2 (i.e. rounds to 0) when |t|&amp;gt; 38.604&lt;/p&gt;</comment>
                    <comment id="12965210" author="psteitz" created="Tue, 30 Nov 2010 11:57:23 +0000"  >&lt;p&gt;Fixed in r1040471&lt;/p&gt;</comment>
                    <comment id="13010374" author="luc" created="Wed, 23 Mar 2011 20:20:43 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 25 Nov 2010 06:22:18 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-411] Multiple Regression newSampleData methods inconsistently create / omit intercepts</title>
                <link>https://issues.apache.org/jira/browse/MATH-411</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The newSampleData(double[], nrows, ncols) method used in the unit tests adds a unitary column to the design matrix, resulting in an intercept term being estimated among the regression parameters.  The other newSampleData methods do not do this, forcing users to add the column of &quot;1&quot;s to estimate models with intercept.  Behavior should be consistent and users should not have to add the column.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12472796">MATH-411</key>
            <summary>Multiple Regression newSampleData methods inconsistently create / omit intercepts</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Sat, 28 Aug 2010 22:14:32 +0000</created>
                <updated>Wed, 23 Mar 2011 20:20:06 +0000</updated>
                    <resolved>Mon, 13 Sep 2010 02:04:01 +0000</resolved>
                            <version>2.0</version>
                <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12907051" author="psteitz" created="Wed, 8 Sep 2010 01:30:51 +0000"  >&lt;p&gt;Fixed in r993574.  Modified multiple regression newSample methods to ensure that by default in all cases, regression models are estimated with intercept terms.  Prior to the fix for this issue,  newXSampleData(double[][]), newSampleData(double[], double[][]) and newSampleData(double[], double[][], double[][]) all required columns of &quot;1&apos;s  to be inserted into the x[][] arrays to create a model with an intercept term;while newSampleData(double[], int, int) created a model including an intercept term without requiring the unitary column.  All methods have  been changed to eliminate the need for users to add unitary columns to specify regression models.&lt;/p&gt;

&lt;p&gt;Leaving open until &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-409&quot; title=&quot;Multiple Regression API should allow specification of whether or not to estimate intercept term&quot;&gt;&lt;del&gt;MATH-409&lt;/del&gt;&lt;/a&gt; is resolved. &lt;/p&gt;</comment>
                    <comment id="13010372" author="luc" created="Wed, 23 Mar 2011 20:20:06 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12472346">MATH-409</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 23 Mar 2011 20:20:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-409] Multiple Regression API should allow specification of whether or not to estimate intercept term</title>
                <link>https://issues.apache.org/jira/browse/MATH-409</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The OLS and GLS regression APIs should support estimating models including intercepts using design matrices including only variable data.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12472346">MATH-409</key>
            <summary>Multiple Regression API should allow specification of whether or not to estimate intercept term</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Tue, 24 Aug 2010 09:55:32 +0000</created>
                <updated>Wed, 23 Mar 2011 20:19:13 +0000</updated>
                    <resolved>Mon, 13 Sep 2010 02:02:43 +0000</resolved>
                            <version>2.0</version>
                <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12908587" author="psteitz" created="Mon, 13 Sep 2010 02:02:43 +0000"  >&lt;p&gt;Fixed in r996404 (both trunk and 2.x branch)&lt;/p&gt;</comment>
                    <comment id="13010370" author="luc" created="Wed, 23 Mar 2011 20:19:13 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                <outwardlinks description="blocks">
                            <issuelink>
            <issuekey id="12472796">MATH-411</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 23 Mar 2011 20:19:13 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-408] GLSMultipleLinearRegression has no nontrivial validation tests</title>
                <link>https://issues.apache.org/jira/browse/MATH-408</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;There are no non-trivial tests verifying the computations for GLSMultipleLinearRegression.  Tests verifying computations against analytically determined models, R or some other reference package / datasets should be added to ensure that the statistics reported by this class are valid.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12472222">MATH-408</key>
            <summary>GLSMultipleLinearRegression has no nontrivial validation tests</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 Aug 2010 03:11:23 +0000</created>
                <updated>Wed, 23 Mar 2011 20:18:48 +0000</updated>
                    <resolved>Sun, 12 Dec 2010 21:49:44 +0000</resolved>
                            <version>2.0</version>
                <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12970663" author="psteitz" created="Sun, 12 Dec 2010 21:49:44 +0000"  >&lt;p&gt;Added a non-trivial test in r1044935.  While still not really a full verification test, it does at least verify that the GLS impl provided does better than OLS for models with error structure conforming to its covariance matrix.&lt;/p&gt;</comment>
                    <comment id="13010369" author="luc" created="Wed, 23 Mar 2011 20:18:48 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 23 Mar 2011 20:18:48 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-407] Documentation improvements for multiple regression classes</title>
                <link>https://issues.apache.org/jira/browse/MATH-407</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The user guide examples showing how to set up and estimate linear models using OLS and GLS multiple regression need to be updated to reflect changes in the API.  The javadoc for these classes and user guide descriptions also need to be improved to make it clear how to estimate a model with an intercept term.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12472221">MATH-407</key>
            <summary>Documentation improvements for multiple regression classes</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="psteitz">Phil Steitz</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 Aug 2010 03:07:08 +0000</created>
                <updated>Wed, 23 Mar 2011 20:18:29 +0000</updated>
                    <resolved>Mon, 20 Sep 2010 01:57:59 +0000</resolved>
                            <version>2.0</version>
                <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12912307" author="psteitz" created="Mon, 20 Sep 2010 01:57:59 +0000"  >&lt;p&gt;Fixed in r998761&lt;/p&gt;</comment>
                    <comment id="13010368" author="luc" created="Wed, 23 Mar 2011 20:18:29 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 23 Mar 2011 20:18:29 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-406] Wrong weight handling in Levenberg-Marquardt</title>
                <link>https://issues.apache.org/jira/browse/MATH-406</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;A comparison with a Fortran version of Levenberg-Marquardt reveals that when observations have different weights, the 2.1 version reaches a value of the function which does not necessary correspond to the minimum&lt;/p&gt;</description>
                <environment></environment>
            <key id="12471625">MATH-406</key>
            <summary>Wrong weight handling in Levenberg-Marquardt</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="dimpbx">Dimitri Pourbaix</assignee>
                                <reporter username="dimpbx">Dimitri Pourbaix</reporter>
                        <labels>
                    </labels>
                <created>Sat, 14 Aug 2010 21:57:56 +0000</created>
                <updated>Wed, 23 Mar 2011 20:18:04 +0000</updated>
                    <resolved>Sat, 14 Aug 2010 22:02:03 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>Nightly Builds</fixVersion>
                                        <due>Sun, 15 Aug 2010 00:00:00 +0000</due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12898649" author="dimpbx" created="Sat, 14 Aug 2010 21:59:22 +0000"  >&lt;p&gt;Correction patch.&lt;/p&gt;</comment>
                    <comment id="13010367" author="luc" created="Wed, 23 Mar 2011 20:18:04 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12452114" name="MATH-406.patch" size="11525" author="dimpbx" created="Sat, 14 Aug 2010 21:59:22 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 23 Mar 2011 20:18:04 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-405] Inconsistent result from Levenberg-Marquardt</title>
                <link>https://issues.apache.org/jira/browse/MATH-405</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;Levenberg-Marquardt (its method doOptimize) returns a VectorialPointValuePair.  However, the class holds the optimum point, the vector of the objective function, the cost and residuals.  The value returns by doOptimize does not always corresponds to the point which leads to the residuals and cost&lt;/p&gt;</description>
                <environment></environment>
            <key id="12471284">MATH-405</key>
            <summary>Inconsistent result from Levenberg-Marquardt</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="dimpbx">Dimitri Pourbaix</assignee>
                                <reporter username="dimpbx">Dimitri Pourbaix</reporter>
                        <labels>
                    </labels>
                <created>Wed, 11 Aug 2010 13:24:39 +0000</created>
                <updated>Wed, 23 Mar 2011 20:17:42 +0000</updated>
                    <resolved>Wed, 11 Aug 2010 13:46:55 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>Nightly Builds</fixVersion>
                                        <due>Wed, 11 Aug 2010 00:00:00 +0000</due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12897259" author="dimpbx" created="Wed, 11 Aug 2010 13:27:59 +0000"  >&lt;p&gt;Correction patch&lt;/p&gt;</comment>
                    <comment id="13010366" author="luc" created="Wed, 23 Mar 2011 20:17:42 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12451776" name="MATH-405.patch" size="9094" author="dimpbx" created="Wed, 11 Aug 2010 13:27:59 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 23 Mar 2011 20:17:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-404] Confusing interface for &quot;LevenbergMarquardtOptimizer&quot;</title>
                <link>https://issues.apache.org/jira/browse/MATH-404</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;&lt;tt&gt;LevenbergMarquardtOptimizer&lt;/tt&gt; inherits from &lt;tt&gt;AbstractLeastSquaresOptimizer&lt;/tt&gt; which in turn implements &lt;tt&gt;DifferentiableMultivariateVectorialOptimizer&lt;/tt&gt;. That interface mandates methods for setting and getting a &lt;tt&gt;VectorialConvergenceChecker&lt;/tt&gt;.&lt;br/&gt;
In v2.1, however, that checker is never used! The convergence check is performed using parameters specific to the Levenberg-Marquardt algorithm. Such circumvention of the superclass interface is confusing and leads to totally unexpected behaviour (such as changing the values of the thresholds of the &lt;tt&gt;VectorialConvergenceChecker&lt;/tt&gt; being ineffective).&lt;br/&gt;
In the development version, the default constructor of &lt;tt&gt;LevenbergMarquardtOptimizer&lt;/tt&gt; sets the the &lt;tt&gt;VectorialConvergenceChecker&lt;/tt&gt; field to &quot;null&quot; and when such is the case, the behaviour is as in v2.1. Although it is documented, this is still confusing since it is impossible to use &lt;tt&gt;LevenbergMarquardtOptimizer&lt;/tt&gt; through its &lt;tt&gt;DifferentiableMultivariateVectorialOptimizer&lt;/tt&gt; interface: When using the &lt;tt&gt;VectorialConvergenceChecker&lt;/tt&gt;, one does not know what parameters to use in order to reproduce the results obtained with the LM-specific convergence check (i.e. how to reproduce the result from v2.1).&lt;br/&gt;
Unless I&apos;m missing something, I think that there should be an LM-specific implementation of &lt;tt&gt;VectorialConvergenceChecker&lt;/tt&gt; that, when given the usual relative and absolute thresholds, can perform a check that will give the same result as the currently specific check (when the &quot;checker&quot; field is &quot;null&quot;).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12471107">MATH-404</key>
            <summary>Confusing interface for &quot;LevenbergMarquardtOptimizer&quot;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="7">Later</resolution>
                                <assignee username="erans">Gilles</assignee>
                                <reporter username="erans">Gilles</reporter>
                        <labels>
                    </labels>
                <created>Mon, 9 Aug 2010 11:44:12 +0000</created>
                <updated>Sat, 24 Mar 2012 16:17:04 +0000</updated>
                    <resolved>Mon, 30 Aug 2010 13:53:12 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12896657" author="luc" created="Mon, 9 Aug 2010 18:36:14 +0000"  >&lt;p&gt;The problem was identified and discussed as &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-362&quot; title=&quot;LevenbergMarquardtOptimizer ignores the VectorialConvergenceChecker parameter passed to it&quot;&gt;&lt;del&gt;MATH-362&lt;/del&gt;&lt;/a&gt;. It was decided to let both convergence methods available.&lt;/p&gt;

&lt;p&gt;The reason there are two different way is that the Levenberg-Marquardt implementation originally came from Netlib and I kept the way it behaved. I think the general interface with the new generic convergence was set up later and at that time I forgot to implement it properly, so the settings were ignored.&lt;/p&gt;

&lt;p&gt;Reporter of issue 362 explicitly asked to keep the ortho-tolerance setting and this setting does not fit with the general scheme.&lt;/p&gt;</comment>
                    <comment id="12896859" author="erans" created="Tue, 10 Aug 2010 11:37:00 +0000"  >&lt;p&gt;Sorry I hadn&apos;t followed that other report.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It was decided to let both convergence methods available. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Switching between two convergence checking procedures, based on whether a field is &lt;tt&gt;null&lt;/tt&gt; or not, is at best a temporary workaround, but it is not a good solution.&lt;/p&gt;

&lt;p&gt;As explained above, from an OOP point-of-view, it is surprising that a class completely circumvents its base class interface.&lt;br/&gt;
At least one of the following is wrong:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;LevenbergMarquardtOptimizer&lt;/tt&gt; inherits from &lt;tt&gt;AbstractLeastSquaresOptimizer&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;LevenbergMarquardtOptimizer&lt;/tt&gt; has a second interface for convergence checking&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;AbstractLeastSquaresOptimizer&lt;/tt&gt; defines the interface for  convergence checking&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt; does not fit with the general scheme.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Then maybe the scheme needs to be reviewed so that it is general enough to fit.&lt;br/&gt;
Allow me to remind what you said: convergence checking is independent from the optimization algorithm.&lt;br/&gt;
But then, in the LM implementation, this doesn&apos;t hold...&lt;/p&gt;

&lt;p&gt;If it is really impossible to fit LM within the hierarchy it currently belongs to, then it should not belong to it, since one cannot leverage the advantages of &quot;interface programming&quot; anyways.&lt;/p&gt;</comment>
                    <comment id="12896866" author="luc" created="Tue, 10 Aug 2010 12:10:33 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Switching between two convergence checking procedures, based on whether a field is null or not, is at best a temporary workaround, but it is not a good solution.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Then maybe the scheme needs to be reviewed so that it is general enough to fit.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Or LevenbergMarquardtOptimizer needs to be changed and the orthogonality concept be finally discarded.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Allow me to remind what you said: convergence checking is independent from the optimization algorithm.&lt;br/&gt;
But then, in the LM implementation, this doesn&apos;t hold...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I know, and I am not happy with this. However, I don&apos;t want LevenbergMarquardtOptimizer to be special. It &lt;em&gt;must&lt;/em&gt; fit. We can take the opportunity of a 3.0 major release to fix this problem too, with some incompatible changes. What would you propose for this ?&lt;/p&gt;</comment>
                    <comment id="12896911" author="erans" created="Tue, 10 Aug 2010 15:40:46 +0000"  >&lt;blockquote&gt;
&lt;p&gt;What would you propose for this ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t know.&lt;/p&gt;

&lt;p&gt;However, it seems that this &quot;non-fitting checker&quot; case is not isolated. I wanted to replace the original check in &quot;BrentOptimizer&quot; (package &quot;optimization.univariate&quot;) by a call to an appropriate subclass of &quot;RealConvergenceChecker&quot;, but here too there are more values to be considered than those stored in a pair of &quot;RealPointValuePair&quot;. The check needs&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the &quot;current&quot; point&lt;/li&gt;
	&lt;li&gt;the points at both interval ends&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;but it does not use the &quot;previous&quot; point.&lt;/p&gt;

&lt;p&gt;So it seems that this also does not fit with the &quot;converged&quot; method of the &quot;RealConvergenceChecker&quot; interface.&lt;/p&gt;

&lt;p&gt;At first sight, I&apos;d say that there should be a more general &quot;ConvergenceChecker&quot; (not existing yet) interface. Maybe using generics...&lt;/p&gt;</comment>
                    <comment id="12897216" author="erans" created="Wed, 11 Aug 2010 11:09:14 +0000"  >&lt;p&gt;I&apos;m trying to define a more general &quot;ConvergenceChecker&quot; interface. This is an incompatible change.&lt;/p&gt;</comment>
                    <comment id="12904198" author="erans" created="Mon, 30 Aug 2010 13:53:12 +0000"  >&lt;p&gt;Final resolution is delegated to issue &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-413&quot;&gt;MATH-413&lt;/a&gt;.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310000">
                <name>Duplicate</name>
                                <outwardlinks description="duplicates">
                            <issuelink>
            <issuekey id="12461240">MATH-362</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                                <inwardlinks description="is part of">
                            <issuelink>
            <issuekey id="12472850">MATH-413</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 9 Aug 2010 18:36:14 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-395] Bugs in &quot;BrentOptimizer&quot;</title>
                <link>https://issues.apache.org/jira/browse/MATH-395</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;I apologize for having provided a buggy implementation of Brent&apos;s optimization algorithm (class &quot;BrentOptimizer&quot; in package &quot;optimization.univariate&quot;).&lt;br/&gt;
The unit tests didn&apos;t show that there was something wrong, although (from the &quot;changes.xml&quot; file) I discovered that, at the time, Luc had noticed something weird in the implementation&apos;s behaviour.&lt;br/&gt;
Comparing with an implementation in Python, I could figure out the fixes. I&apos;ll modify &quot;BrentOptimizer&quot; and add a test. I also propose to change the name of the unit test class from &quot;BrentMinimizerTest&quot; to &quot;BrentOptimizerTest&quot;.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12470120">MATH-395</key>
            <summary>Bugs in &quot;BrentOptimizer&quot;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="erans">Gilles</assignee>
                                <reporter username="erans">Gilles</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Jul 2010 21:26:33 +0000</created>
                <updated>Wed, 23 Mar 2011 20:14:58 +0000</updated>
                    <resolved>Wed, 28 Jul 2010 12:11:09 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12892283" author="erans" created="Mon, 26 Jul 2010 12:19:33 +0000"  >&lt;p&gt;Bugs corrected in revision 979257.&lt;br/&gt;
Not resolving yet because the implementation still does not behave as the Python one. I&apos;ve added a unit test that indicates the discrepancies (with &quot;XXX&quot; markers).&lt;/p&gt;</comment>
                    <comment id="12893151" author="erans" created="Wed, 28 Jul 2010 12:11:09 +0000"  >&lt;p&gt;Last bug fixed in revision 980032.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;This revision also contains the modifications due to the changes in &amp;quot;AbstractUnivariateRealOptimizer&amp;quot;.&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The test comparing with Python has been removed because a tracing of the execution paths (in Python and Java) showed that the remaining discrepancies were due to different values being used for the &quot;golden ratio&quot; constant.&lt;/p&gt;</comment>
                    <comment id="13010360" author="luc" created="Wed, 23 Mar 2011 20:14:58 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 23 Mar 2011 20:14:58 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-392] calculateYVariance in OLS/GLSMultipleLinearRegression uses residuals not Y vars</title>
                <link>https://issues.apache.org/jira/browse/MATH-392</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;Implementation of OLS/GLSMultipleLinearRegression is:&lt;br/&gt;
@Override&lt;br/&gt;
173        protected double calculateYVariance() {
174            RealVector residuals = calculateResiduals();
175            return residuals.dotProduct(residuals) /
176                   (X.getRowDimension() - X.getColumnDimension());
177        }&lt;/p&gt;

&lt;p&gt;This gives variance of residuals not variance of the dependent (Y) variable as the documentation suggests.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12469843">MATH-392</key>
            <summary>calculateYVariance in OLS/GLSMultipleLinearRegression uses residuals not Y vars</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="markdevaney">Mark Devaney</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Jul 2010 18:43:10 +0000</created>
                <updated>Wed, 23 Mar 2011 20:13:58 +0000</updated>
                    <resolved>Sun, 22 Aug 2010 13:16:29 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12892247" author="psteitz" created="Mon, 26 Jul 2010 09:55:26 +0000"  >&lt;p&gt;Thank you for reporting this.  Patches welcome!&lt;/p&gt;</comment>
                    <comment id="12892352" author="markdevaney" created="Mon, 26 Jul 2010 16:32:48 +0000"  >&lt;p&gt;Can&apos;t test a patch as I&apos;m not able to build current repository version:&lt;br/&gt;
math/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;28,39&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
symbol  : class SincFunction&lt;/p&gt;

&lt;p&gt;Implementation for both GLS/OLS:&lt;/p&gt;

&lt;p&gt;protected double calculateYVariance() {
    return new Variance().evaluate(Y);
}&lt;/p&gt;</comment>
                    <comment id="12892406" author="luc" created="Mon, 26 Jul 2010 18:27:08 +0000"  >&lt;p&gt;There was an error in a file committed this afternoon. It should be OK now.&lt;/p&gt;</comment>
                    <comment id="12892433" author="markdevaney" created="Mon, 26 Jul 2010 19:41:45 +0000"  >&lt;p&gt;corrected implementations of calculateYVariance() for OLS/GLSMultipleRegression&lt;/p&gt;

&lt;p&gt;added unit tests for both calculateYVariance implementations&lt;/p&gt;

&lt;p&gt;fixed AbstractMultipleRegression.estimateRegressionParametersStandardErrors() to use residuals &lt;/p&gt;</comment>
                    <comment id="12901160" author="psteitz" created="Sun, 22 Aug 2010 13:16:29 +0000"  >&lt;p&gt;Fixed in 987897.   I added calcluate/estimateErrorVariance methods to return what was previously incorrectly reported as &quot;Y variance.&quot;&lt;br/&gt;
Thanks for the patch!&lt;/p&gt;</comment>
                    <comment id="13010358" author="luc" created="Wed, 23 Mar 2011 20:13:58 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12450508" name="patch" size="4960" author="markdevaney" created="Mon, 26 Jul 2010 19:41:45 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 26 Jul 2010 09:55:26 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-391] Inconsistent behaviour of constructors in ArrayRealVector class</title>
                <link>https://issues.apache.org/jira/browse/MATH-391</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;ArrayRealVector(double[] d) allows to construct a zero-length vector, but ArrayRealVector(double[] d, boolean copyArray) doesn&apos;t. Both should allow this as zero-length vectors are mathematically well-defined objects and they are useful boundary cases in many algorithms.&lt;/p&gt;

&lt;p&gt;This breaks some arithmetic operators (addition) on zero-length real vectors which worked in 2.0 but don&apos;t work in 2.1&lt;/p&gt;</description>
                <environment></environment>
            <key id="12469795">MATH-391</key>
            <summary>Inconsistent behaviour of constructors in ArrayRealVector class</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="rwerp">Roman Werpachowski</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Jul 2010 08:57:46 +0000</created>
                <updated>Wed, 23 Mar 2011 20:13:27 +0000</updated>
                    <resolved>Sun, 3 Oct 2010 16:43:11 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12917274" author="psteitz" created="Sun, 3 Oct 2010 01:55:26 +0000"  >&lt;p&gt;I agree that the code should be consistent.  I agree as well that a zero-dimensional vector is legit.   Can anyone explain why ArrayRealVector(double[] d, boolean copyArray) requires positive length?&lt;/p&gt;</comment>
                    <comment id="12917295" author="luc" created="Sun, 3 Oct 2010 08:47:43 +0000"  >&lt;p&gt;Most probably my bad ...&lt;/p&gt;</comment>
                    <comment id="12917361" author="luc" created="Sun, 3 Oct 2010 16:43:11 +0000"  >&lt;p&gt;Fixed in subversion repository as of r1003993 for barnch 2.X and r1003994 for trunk.&lt;br/&gt;
Note that the same problem occurred also in ArrayFieldVector but the fix is different. For Field-based vectors, we need to get the field, so either we use a non-empty array and retrieve the field from the first array element or we add a parameter for the field and allow the array to be empty. The two choices are now possible, as new constructors have been added and the javadoc updated to explain this behavior.&lt;br/&gt;
Thanks for reporting the issue.&lt;/p&gt;</comment>
                    <comment id="13010357" author="luc" created="Wed, 23 Mar 2011 20:13:27 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 3 Oct 2010 01:55:26 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-390] Simplex Solver is very inaccurate on a large problem, even a very low value for epsilon</title>
                <link>https://issues.apache.org/jira/browse/MATH-390</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;I&apos;m currently playing with a program for solving a rather simple chess puzzle. The goal is to place 12 knights on a 8x8 board, such that each field is either attacked by a knight, or contains a knight. To solve this problem (and different variants) I want to use a handcrafted Branch and Bound algorithm that uses Linear Programming to calculate an upperbound on the number of fields that can be covered by a certain amount of knights.&lt;/p&gt;

&lt;p&gt;The idea is to create variables for each field that has to be covered, and to create variables for each field to contain a knight. A cover variable can only become positive if a corresponding knight variable for an adjacent field is also positive, there is a limit to the amount of knights we may place (so the sum of all knight variables cannot be larger than 12) and the cover variables cannot be larger than one. Also, only the cover variables have a coefficient of one in the objective function, all other variables have zero. Because we want to cover the entire board our goal will be to maximize the objective function, since we want to maximize the number of fields that are covered.&lt;/p&gt;

&lt;p&gt;Since a basic chessboard has 64 fields and since it is possible to cover the chessboard with 12 knights, we know there is an integer solution that has value 64. Since we are solving a relaxed variant of the problem, the value should be at least 64. However, when I use the Simplex Solver, I get a value of around 58.6, which is much too low. Even when I relax the constraints in such a fashion that 64 knights may be placed on the board, the solution value remains the same. I&apos;ve lowered the value of epsilon as much as I can and it still gives the incorrect value. What makes it worse is that the calculation is totally useless as an upperbound (if the value would have been around 70, it would have been an upperbound at least).&lt;/p&gt;

&lt;p&gt;I&apos;ve heard that using the revised simplex method is a lot better with respect to stacked errors, so I am not sure this is really a bug, or just a problem that arises when the two phase simplex method is used for large problems.&lt;/p&gt;

&lt;p&gt;I will try to attach a code example that implements the problem (but possibly isn&apos;t that readable).&lt;/p&gt;</description>
                <environment>&lt;p&gt;Windows Vista Enterprise&lt;br/&gt;
Runtime:&lt;br/&gt;
java version &quot;1.6.0_20&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 16.3-b01, mixed mode, sharing)&lt;/p&gt;

&lt;p&gt;Compiler:&lt;br/&gt;
javac 1.6.0_13&lt;/p&gt;</environment>
            <key id="12469760">MATH-390</key>
            <summary>Simplex Solver is very inaccurate on a large problem, even a very low value for epsilon</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="pcbouman">Paul Bouman</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Jul 2010 22:47:21 +0000</created>
                <updated>Tue, 20 Jul 2010 23:32:12 +0000</updated>
                    <resolved>Tue, 20 Jul 2010 23:32:12 +0000</resolved>
                            <version>2.1</version>
                                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12890490" author="pcbouman" created="Tue, 20 Jul 2010 22:49:00 +0000"  >&lt;p&gt;Example of the 8x8 Knight covering Chess problem. The objective value should at least be 64, but it is around 59.&lt;/p&gt;</comment>
                    <comment id="12890498" author="pcbouman" created="Tue, 20 Jul 2010 23:30:47 +0000"  >&lt;p&gt;Hmm, it seems I made a programming mistake in the type of the relationship: I used an equality where I should have used a greater-equals. I created a much nicer version of the example, which actually works. Feel free to use it for an example or something.&lt;/p&gt;

&lt;p&gt;My bad, I will close the issue.&lt;/p&gt;</comment>
                    <comment id="12890499" author="pcbouman" created="Tue, 20 Jul 2010 23:31:23 +0000"  >&lt;p&gt;The correct and more readable example, which actually works.&lt;/p&gt;</comment>
                    <comment id="12890500" author="pcbouman" created="Tue, 20 Jul 2010 23:32:12 +0000"  >&lt;p&gt;It seems I made a programming error. I included a correct example to solve the problem.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12449999" name="CorrectLPTestCase.java" size="4566" author="pcbouman" created="Tue, 20 Jul 2010 23:31:23 +0000" />
                    <attachment id="12449991" name="LPTestCase.java" size="18490" author="pcbouman" created="Tue, 20 Jul 2010 22:48:59 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-380] Need to (re)initialize dYdY0 for multiple integrate with FirstOrderIntegratorWithJacobians</title>
                <link>https://issues.apache.org/jira/browse/MATH-380</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;There is a lack in the method integrate of FirstOrderIntegratorWithJacobians. The jacobian DYDY0 can&apos;t be initialized by the user, unlike DFDP with DF0DP.&lt;br/&gt;
So, for several successive integrations, the matrix is reinitialized to identity and that is not what we might want.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12467821">MATH-380</key>
            <summary>Need to (re)initialize dYdY0 for multiple integrate with FirstOrderIntegratorWithJacobians</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="luc">Luc Maisonobe</assignee>
                                <reporter username="pparraud">Pascal Parraud</reporter>
                        <labels>
                    </labels>
                <created>Thu, 24 Jun 2010 16:47:54 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:33 +0000</updated>
                    <resolved>Sat, 1 Oct 2011 13:54:20 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12882304" author="luc" created="Thu, 24 Jun 2010 20:01:52 +0000"  >&lt;p&gt;You are perfectly right.&lt;/p&gt;

&lt;p&gt;The FirstOrderIntegratorWithJacobians class is a brand new one and it clearly has some design flaws.&lt;br/&gt;
It will most probably be deprecated in its current form and replaced by a new mechanism, better integrated (sorry for the joke) with the standard ODE solvers.&lt;br/&gt;
The ability for user to set an initial value for dydy0 will be present in the new design, but will probably not be back-ported to the current one.&lt;br/&gt;
In the meantime, you can save the final value of the jacobian matrix dydy0 after first part of integration, which we could call dy1dy0 as it represents dy(t1)/dy(t0). Start the second part from t1 to t2 that will reset the initial matrix to identity and hence compute compute dy(t2)/dy(t1) and do the multiplication by yourself of the two matrices to really get what you need: dy(t2)/dy(t1) = dy(t2)/dy(t1) * dy(t1)/dy(t0).&lt;/p&gt;

&lt;p&gt;Thanks for reporting the issue &lt;/p&gt;</comment>
                    <comment id="12934198" author="luc" created="Sat, 20 Nov 2010 21:43:20 +0000"  >&lt;p&gt;changing target fix version to 3.0.&lt;br/&gt;
Fixing this and several other problems requires a complete rewrite of the jacobians computation with ODE, and this rewrite implies user interfaces changes, so it cannot be fixed before 3.0.&lt;/p&gt;</comment>
                    <comment id="13114278" author="luc" created="Sun, 25 Sep 2011 15:15:46 +0000"  >&lt;p&gt;A first attempt to implement Jacobians computation again in ODE has been committed in subversion repository as of r1175409.&lt;br/&gt;
This implementation still lacks the ability for step handlers to also retrieve the additional equations and their derivatives.&lt;br/&gt;
This implementation is based on the Orekit one described here: &lt;a href=&quot;https://www.orekit.org/blog/public/vpommier-ISSFD-2011-extended_propagation.pdf&quot;&gt;https://www.orekit.org/blog/public/vpommier-ISSFD-2011-extended_propagation.pdf&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13118816" author="luc" created="Sat, 1 Oct 2011 13:54:20 +0000"  >&lt;p&gt;fixed in subversion repository as of r1176745.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12467822">MATH-381</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 24 Jun 2010 20:01:52 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-377] weight versus sigma in AbstractLeastSquares</title>
                <link>https://issues.apache.org/jira/browse/MATH-377</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;In AbstractLeastSquares, residualsWeights contains the WEIGHTS assigned to each observation.  In the method getRMS(), these weights are multiplicative as they should. unlike in getChiSquare() where it appears at the denominator!   If the weight is really the weight of the observation, it should multiply the square of the residual even in the computation of the chi2.&lt;/p&gt;

&lt;p&gt; Once corrected, getRMS() can even reduce&lt;/p&gt;

&lt;p&gt; public double getRMS() {return Math.sqrt(getChiSquare()/rows);}&lt;/p&gt;</description>
                <environment></environment>
            <key id="12467197">MATH-377</key>
            <summary>weight versus sigma in AbstractLeastSquares</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="dimpbx">Dimitri Pourbaix</assignee>
                                <reporter username="dimpbx">Dimitri Pourbaix</reporter>
                        <labels>
                    </labels>
                <created>Thu, 17 Jun 2010 09:06:03 +0000</created>
                <updated>Wed, 23 Mar 2011 20:08:36 +0000</updated>
                    <resolved>Sun, 25 Jul 2010 19:49:09 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                          <timeoriginalestimate seconds="60">1m</timeoriginalestimate>
                    <timeestimate seconds="60">1m</timeestimate>
                                  <comments>
                    <comment id="12880527" author="psteitz" created="Sat, 19 Jun 2010 19:09:44 +0000"  >&lt;p&gt;It is not clear to me exactly what is being computed in getChiSquare.  Step 0 is to get an actual definition in the javadoc for what it is trying to compute.  I agree it seems odd to be dividing by residual weights; but I could be missing the intent.&lt;/p&gt;</comment>
                    <comment id="12880637" author="dimpbx" created="Sun, 20 Jun 2010 13:54:59 +0000"  >&lt;p&gt;OK, let us define ChiSquare as the sum of the weighted square of the residual in order to be consistent with the rest of the definitions in that class.  That would also be consistent with what users expect from a parameter labeled &apos;weight&apos; rather than &apos;sigma&apos;.  If we reach consensus on that definition, I can take care of that issue.&lt;/p&gt;</comment>
                    <comment id="12880827" author="psteitz" created="Mon, 21 Jun 2010 13:30:29 +0000"  >&lt;p&gt;I could be missing something, but I see no reason that the weighted sum of squared residuals computed here (after the proposed change) should in general follow a chi-square distribution or be related to a chi-square test statistic of any kind.   Why is it called chi-square?  Sorry if I am missing something simple here.&lt;/p&gt;</comment>
                    <comment id="12880832" author="psteitz" created="Mon, 21 Jun 2010 14:00:58 +0000"  >&lt;p&gt;I guess if you assume normalliy distributed errors, it makes sense, so drop the last comment and I am +1 for the change (with definition added to the javadoc).&lt;/p&gt;</comment>
                    <comment id="12880848" author="dimpbx" created="Mon, 21 Jun 2010 14:35:07 +0000"  >&lt;p&gt;Indeed, the confusion comes from the fact that, in some textbooks, each residual is divided by &apos;sigma_i&apos; which leads to a weight of 1/(sigma_i^2).  In CM, we adopted the terminology &apos;weight&apos; without reference to sigma.  I will change the javadoc accordingly.&lt;/p&gt;</comment>
                    <comment id="12882172" author="dimpbx" created="Thu, 24 Jun 2010 14:51:45 +0000"  >&lt;p&gt;Patch to correct issue &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-377&quot; title=&quot;weight versus sigma in AbstractLeastSquares&quot;&gt;&lt;del&gt;MATH-377&lt;/del&gt;&lt;/a&gt;.  The change in getChiSquare let to a tiny update in one of Levenberg-Marquardt unit tests.&lt;/p&gt;</comment>
                    <comment id="13010346" author="luc" created="Wed, 23 Mar 2011 20:08:36 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12447947" name="Math377fix.diff" size="2189" author="dimpbx" created="Thu, 24 Jun 2010 14:51:45 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 19 Jun 2010 19:09:44 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-373] StatUtils.sum returns NaN for zero-length arrays</title>
                <link>https://issues.apache.org/jira/browse/MATH-373</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;StatUtils.sum returns NaN for zero-length arrays, which is:&lt;/p&gt;

&lt;p&gt;1. inconsistent with the mathematical notion of sum: in maths, sum_{i=0}^{N-1} a_i will be 0 for N=0. In particular, the identity&lt;br/&gt;
&lt;br/&gt;
sum_{i=0}^{k-1} a_i + sum_{i=k}^{N-1} = sum_{i=0}^{N-1}&lt;/p&gt;

&lt;p&gt;is broken for k = 0, since NaN + x = NaN, not x.&lt;/p&gt;

&lt;p&gt;2. introduces hard to debug erros (returning a NaN is one of the worst forms of reporting an exceptional condition, as NaNs propagate silently and require manual tracing during the debugging)&lt;/p&gt;

&lt;p&gt;3. enforces &quot;special case&quot; handling when the user expects that the summed array can have a zero length.&lt;/p&gt;

&lt;p&gt;The correct behaviour is, in my opinion, to return 0.0, not NaN in the above case.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12466353">MATH-373</key>
            <summary>StatUtils.sum returns NaN for zero-length arrays</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="rwerp">Roman Werpachowski</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 Jun 2010 14:54:00 +0000</created>
                <updated>Sat, 24 Mar 2012 16:16:56 +0000</updated>
                    <resolved>Thu, 2 Sep 2010 04:52:33 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>3.0</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12876512" author="billbarker" created="Tue, 8 Jun 2010 01:37:46 +0000"  >&lt;p&gt;I agree with the reasoning here, and we should do it this way in 3.0.  However it is an incompatible change to do in a point release, so I&apos;m going to wait for more feed back from other developers before I make any changes to the current code.&lt;/p&gt;

&lt;p&gt;I&apos;m thinking that adding a method to AbstractUnivariateStatistic that looks like:&lt;br/&gt;
   protected boolean test( final double[] values,  final int begin,   final int length, final boolean allowEmpty)&lt;/p&gt;

&lt;p&gt;that would have the test:&lt;br/&gt;
   if(length == 0 &amp;amp;&amp;amp; !allowEmpty)&lt;br/&gt;
        return false;&lt;/p&gt;

&lt;p&gt;The current test method can call the new one with allowEmpty=false for backwards compatibility.  Then we can decide on which statistics should have a zero value on the empty set.&lt;/p&gt;</comment>
                    <comment id="12877689" author="billbarker" created="Fri, 11 Jun 2010 01:57:29 +0000"  >&lt;p&gt;The consensus of the commons-math developers is that, since the current behavior is documented in 2.x, that this will have to wait for 3.0.  Fixing this in 2.x would introduce a too large incompatibility change to include in 2.x.&lt;/p&gt;

&lt;p&gt;I can attach a patch against 2.x that fixes this, as long as anybody using the patch understands that it isn&apos;t supported.&lt;/p&gt;
</comment>
                    <comment id="12877784" author="sebb@apache.org" created="Fri, 11 Jun 2010 11:19:20 +0000"  >&lt;p&gt;Possibly crazy idea: &lt;/p&gt;

&lt;p&gt;if Math 3.0 is going to change package names (which may be necessary), one could introduce the fix using a math3 package name?&lt;/p&gt;</comment>
                    <comment id="12877803" author="erans" created="Fri, 11 Jun 2010 12:14:59 +0000"  >&lt;p&gt;IIRC, changing the package name had been suggested and discussed for 2.0.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;One argument is that, to be consistent,  you&amp;#39;d have to change the name at every major release...&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                    <comment id="12877807" author="rwerp" created="Fri, 11 Jun 2010 12:37:16 +0000"  >&lt;p&gt;Speaking as a maintainer of client code which uses ACM, I&apos;d rather cope with occasional incompatibilities in the same packages, than have to change ALL my client code to keep up with the package name changes after every release. A reason to change the package name would be if you wanted to use the old and new version side by side, but that would not be a common usage pattern for ACM, I think.&lt;/p&gt;</comment>
                    <comment id="12878204" author="billbarker" created="Sat, 12 Jun 2010 04:04:42 +0000"  >&lt;p&gt;As Gilles mentioned, changing the package name for commons-math was discussed and voted on for 2.x.  The result of the vote was to keep the package name, since commons-math won&apos;t usually be provided by a third party library.  Since nothing much has changed, I can&apos;t see that commons-math would change it&apos;s package for version 3.0.&lt;/p&gt;</comment>
                    <comment id="12905401" author="billbarker" created="Thu, 2 Sep 2010 04:52:33 +0000"  >&lt;p&gt;This will be fixed in the 3.0 build.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 8 Jun 2010 01:37:46 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-369] BisectionSolver.solve(final UnivariateRealFunction f, double min, double max, double initial) throws NullPointerException</title>
                <link>https://issues.apache.org/jira/browse/MATH-369</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;Method &lt;/p&gt;

&lt;p&gt;    BisectionSolver.solve(final UnivariateRealFunction f, double min, double max, double initial)  &lt;/p&gt;

&lt;p&gt;invokes &lt;/p&gt;

&lt;p&gt;    BisectionSolver.solve(double min, double max) &lt;/p&gt;

&lt;p&gt;which throws NullPointerException, as member variable&lt;/p&gt;

&lt;p&gt;    UnivariateRealSolverImpl.f &lt;/p&gt;

&lt;p&gt;is null.&lt;/p&gt;

&lt;p&gt;Instead the method:&lt;/p&gt;

&lt;p&gt;    BisectionSolver.solve(final UnivariateRealFunction f, double min, double max)&lt;/p&gt;

&lt;p&gt;should be called.&lt;/p&gt;

&lt;p&gt;Steps to reproduce:&lt;/p&gt;

&lt;p&gt;invoke:&lt;/p&gt;

&lt;p&gt;     new BisectionSolver().solve(someUnivariateFunctionImpl, 0.0, 1.0, 0.5);&lt;/p&gt;

&lt;p&gt;NullPointerException will be thrown.&lt;/p&gt;

</description>
                <environment>&lt;p&gt;Windows XP Profesional&lt;br/&gt;
java version &quot;1.6.0_20&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 16.3-b01, mixed mode, sharing)&lt;/p&gt;</environment>
            <key id="12463568">MATH-369</key>
            <summary>BisectionSolver.solve(final UnivariateRealFunction f, double min, double max, double initial) throws NullPointerException</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="sasunpundev@abv.bg">Sasun Pundev</reporter>
                        <labels>
                    </labels>
                <created>Mon, 3 May 2010 15:48:27 +0000</created>
                <updated>Wed, 23 Mar 2011 20:05:06 +0000</updated>
                    <resolved>Mon, 3 May 2010 18:43:59 +0000</resolved>
                            <version>2.1</version>
                                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12863464" author="luc" created="Mon, 3 May 2010 18:43:59 +0000"  >&lt;p&gt;Fixed in subversion repository as of r940565.&lt;br/&gt;
Thanks for the report and for the fix.&lt;/p&gt;</comment>
                    <comment id="13010338" author="luc" created="Wed, 23 Mar 2011 20:05:06 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 3 May 2010 18:43:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-368] OpenMapRealVector.getSparcity should be getSparsity</title>
                <link>https://issues.apache.org/jira/browse/MATH-368</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The term for describing the ratio of nonzero elements to zero elements in a matrix/vector is sparsity, not sparcity.  Suggest renaming getSparcity() to getSparsity()&lt;/p&gt;</description>
                <environment></environment>
            <key id="12463289">MATH-368</key>
            <summary>OpenMapRealVector.getSparcity should be getSparsity</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="billbarker">Bill Barker</assignee>
                                <reporter username="ashuang">Albert Huang</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Apr 2010 03:41:10 +0000</created>
                <updated>Wed, 23 Mar 2011 20:04:17 +0000</updated>
                    <resolved>Sun, 9 May 2010 23:07:24 +0000</resolved>
                            <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12865634" author="billbarker" created="Sun, 9 May 2010 23:07:24 +0000"  >&lt;p&gt;The policy of this project is to not remove methods from the public API in a point release.  However, the misspelled method has been deprecated and the correctly spelled method has been added.&lt;/p&gt;</comment>
                    <comment id="13010337" author="luc" created="Wed, 23 Mar 2011 20:04:17 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 9 May 2010 23:07:24 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-367] AbstractRealVector.sparseIterator fails when vector has exactly one non-zero entry</title>
                <link>https://issues.apache.org/jira/browse/MATH-367</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;The following program:&lt;br/&gt;
===&lt;br/&gt;
import java.util.Iterator;&lt;br/&gt;
import org.apache.commons.math.linear.*;&lt;/p&gt;

&lt;p&gt;public class SparseIteratorTester&lt;br/&gt;
{&lt;br/&gt;
    public static void main(String[] args) {&lt;br/&gt;
        double vdata[] = { 0.0, 1.0, 0.0 };&lt;br/&gt;
        RealVector v = new ArrayRealVector(vdata);&lt;br/&gt;
        Iterator&amp;lt;RealVector.Entry&amp;gt; iter = v.sparseIterator();&lt;br/&gt;
        while(iter.hasNext()) {
            RealVector.Entry entry = iter.next();
            System.out.printf(&quot;%d: %f\n&quot;, entry.getIndex(), entry.getValue());
        }   &lt;br/&gt;
    }       &lt;br/&gt;
} &lt;br/&gt;
===&lt;br/&gt;
generates this output:&lt;/p&gt;

&lt;p&gt;1: 1.000000&lt;br/&gt;
Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: -1&lt;br/&gt;
	at org.apache.commons.math.linear.ArrayRealVector.getEntry(ArrayRealVector.java:995)&lt;br/&gt;
	at org.apache.commons.math.linear.AbstractRealVector$EntryImpl.getValue(AbstractRealVector.java:850)&lt;br/&gt;
	at test.SparseIteratorTester.main(SparseIteratorTester.java:13)&lt;br/&gt;
===&lt;/p&gt;

&lt;p&gt;This patch fixes it, and simplifies AbstractRealVector.SparseEntryIterator  (sorry, i don&apos;t see any form entry for attaching a file)&lt;br/&gt;
===&lt;br/&gt;
Index: src/main/java/org/apache/commons/math/linear/AbstractRealVector.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; src/main/java/org/apache/commons/math/linear/AbstractRealVector.java	(revision 936985)&lt;br/&gt;
+++ src/main/java/org/apache/commons/math/linear/AbstractRealVector.java	(working copy)&lt;br/&gt;
@@ -18,6 +18,7 @@&lt;br/&gt;
 package org.apache.commons.math.linear;&lt;/p&gt;

&lt;p&gt; import java.util.Iterator;&lt;br/&gt;
+import java.util.NoSuchElementException;&lt;/p&gt;

&lt;p&gt; import org.apache.commons.math.FunctionEvaluationException;&lt;br/&gt;
 import org.apache.commons.math.MathRuntimeException;&lt;br/&gt;
@@ -875,40 +876,25 @@&lt;br/&gt;
         /** Dimension of the vector. */&lt;br/&gt;
         private final int dim;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;/** Temporary entry (reused on each call to {@link #next()}. */&lt;/li&gt;
	&lt;li&gt;private EntryImpl tmp = new EntryImpl();&lt;br/&gt;
-&lt;/li&gt;
	&lt;li&gt;/** Current entry. */&lt;br/&gt;
+        /** Last entry returned by #next(). */&lt;br/&gt;
         private EntryImpl current;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;/** Next entry. */&lt;br/&gt;
+        /** Next entry for #next() to return. */&lt;br/&gt;
         private EntryImpl next;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;         /** Simple constructor. */&lt;br/&gt;
         protected SparseEntryIterator() {&lt;br/&gt;
             dim = getDimension();&lt;br/&gt;
             current = new EntryImpl();&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (current.getValue() == 0) {
-                advance(current);
-            }&lt;/li&gt;
	&lt;li&gt;if(current.getIndex() &amp;gt;= 0){
-                // There is at least one non-zero entry
-                next = new EntryImpl();
-                next.setIndex(current.getIndex());
+            next = new EntryImpl();
+            if(next.getValue() == 0)
                 advance(next);
-            } else {
-                // The vector consists of only zero entries, so deny having a next
-                current = null;
-            }&lt;br/&gt;
         }&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;/** Advance an entry up to the next non null one.&lt;br/&gt;
+        /** Advance an entry up to the next nonzero value.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;@param e entry to advance&lt;br/&gt;
          */&lt;br/&gt;
         protected void advance(EntryImpl e) {&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (e == null) {
-                return;
-            }&lt;br/&gt;
             do {
                 e.setIndex(e.getIndex() + 1);
             } while (e.getIndex() &amp;lt; dim &amp;amp;&amp;amp; e.getValue() == 0);&lt;br/&gt;
@@ -919,22 +905,17 @@&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;         /** {@inheritDoc} */&lt;br/&gt;
         public boolean hasNext() {
-            return current != null;
+            return next.getIndex() &amp;gt;= 0;
         }&lt;br/&gt;
 &lt;br/&gt;
         /** {@inheritDoc} */&lt;br/&gt;
         public Entry next() {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;tmp.setIndex(current.getIndex());&lt;/li&gt;
	&lt;li&gt;if (next != null) {&lt;/li&gt;
	&lt;li&gt;current.setIndex(next.getIndex());&lt;/li&gt;
	&lt;li&gt;advance(next);&lt;/li&gt;
	&lt;li&gt;if (next.getIndex() &amp;lt; 0) {
-                    next = null;
-                }&lt;/li&gt;
	&lt;li&gt;} else {
-                current = null;
-            }&lt;/li&gt;
	&lt;li&gt;return tmp;&lt;br/&gt;
+            int index = next.getIndex();&lt;br/&gt;
+            if(index &amp;lt; 0)&lt;br/&gt;
+                throw new NoSuchElementException();&lt;br/&gt;
+            current.setIndex(index);&lt;br/&gt;
+            advance(next);&lt;br/&gt;
+            return current;&lt;br/&gt;
         }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;         /** {@inheritDoc} */&lt;/p&gt;</description>
                <environment></environment>
            <key id="12462804">MATH-367</key>
            <summary>AbstractRealVector.sparseIterator fails when vector has exactly one non-zero entry</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="billbarker">Bill Barker</assignee>
                                <reporter username="ashuang">Albert Huang</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Apr 2010 18:31:06 +0000</created>
                <updated>Wed, 23 Mar 2011 20:03:42 +0000</updated>
                    <resolved>Mon, 10 May 2010 01:17:14 +0000</resolved>
                            <version>2.1</version>
                <version>2.2</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12859943" author="ashuang" created="Thu, 22 Apr 2010 18:32:07 +0000"  >&lt;p&gt;patch fixing the bug&lt;/p&gt;</comment>
                    <comment id="12865641" author="billbarker" created="Mon, 10 May 2010 01:17:14 +0000"  >&lt;p&gt;I&apos;ve applied your patch (with a couple of style tweaks).  It should be available in the next release of commons-math.&lt;/p&gt;

&lt;p&gt;Thank you for your contribution.&lt;/p&gt;</comment>
                    <comment id="13010336" author="luc" created="Wed, 23 Mar 2011 20:03:42 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12442607" name="AbstractRealVector_sparseIterator_patch.txt" size="3012" author="ashuang" created="Thu, 22 Apr 2010 18:32:07 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 10 May 2010 01:17:14 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-365] Issue with &quot;SmoothingBicubicSplineInterpolator&quot;</title>
                <link>https://issues.apache.org/jira/browse/MATH-365</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;I figured out that the name of this class is misleading as the implementation doesn&apos;t perform the intended smoothing.&lt;/p&gt;

&lt;p&gt;In order to solve this issue, I propose to:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;deprecate the &quot;SmoothingBicubicSplineInterpolator&quot; class&lt;/li&gt;
	&lt;li&gt;create a &quot;BicubicSplineInterpolator&quot; class (similar to the above class but with the useless code removed)&lt;/li&gt;
	&lt;li&gt;remove the &quot;SmoothingBicubicSplineInterpolatorTest&quot; class&lt;/li&gt;
	&lt;li&gt;add a &quot;BicubicSplineInterpolatorTest&quot; with essentially the same contents as the above one&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Then I would also add a new &quot;SmoothingPolynomialBicubicSplineInterpolator&quot; where I used the &quot;PolynomialFitter&quot; class to smooth the input data along both dimensions before the interpolating function is computed.&lt;/p&gt;

&lt;p&gt;Does someone object to these changes?&lt;/p&gt;</description>
                <environment></environment>
            <key id="12462547">MATH-365</key>
            <summary>Issue with &quot;SmoothingBicubicSplineInterpolator&quot;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="erans">Gilles</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Apr 2010 14:21:20 +0000</created>
                <updated>Wed, 23 Mar 2011 20:02:52 +0000</updated>
                    <resolved>Wed, 21 Apr 2010 14:35:53 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12859022" author="luc" created="Tue, 20 Apr 2010 18:56:47 +0000"  >&lt;p&gt;removing the test class would badly impact test coverage, so it would be better to simply deprecae it also and to remove the library class and its associated test class together when releasing 3.0&lt;/p&gt;</comment>
                    <comment id="12859371" author="erans" created="Wed, 21 Apr 2010 14:35:53 +0000"  >&lt;p&gt;revision 936295.&lt;/p&gt;</comment>
                    <comment id="13010334" author="luc" created="Wed, 23 Mar 2011 20:02:52 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 20 Apr 2010 18:56:47 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-362] LevenbergMarquardtOptimizer ignores the VectorialConvergenceChecker parameter passed to it</title>
                <link>https://issues.apache.org/jira/browse/MATH-362</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;LevenbergMarquardtOptimizer ignores the VectorialConvergenceChecker parameter passed to it. This makes it hard to specify custom stopping criteria for the optimizer.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12461240">MATH-362</key>
            <summary>LevenbergMarquardtOptimizer ignores the VectorialConvergenceChecker parameter passed to it</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="roman.werpachowski">Roman Werpachowski</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Apr 2010 11:38:46 +0000</created>
                <updated>Wed, 23 Mar 2011 20:02:00 +0000</updated>
                    <resolved>Sat, 29 May 2010 18:16:50 +0000</resolved>
                            <version>2.0</version>
                <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12854056" author="luc" created="Tue, 6 Apr 2010 16:49:36 +0000"  >&lt;p&gt;Ooops. You are right.&lt;br/&gt;
The Levenberg-Marquardt optimizer uses specific convergence parameters which can be set by   setInitialStepBoundFactor, setCostRelativeTolerance, setParRelativeTolerance and setOrthoTolerance.&lt;br/&gt;
The most important convergence tuning are either setCostRelativeTolerance for a convergence on the cost itself or setParRelativeTolerance for a convergence on the parameters.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure how to solve this. Do the existing tuning parameters fit your needs or not ? Some convergence criteria can be expressed with both methods, but not all. Should we keep both setting as alternate methods or should we remove one and rely on the remaining one ?&lt;/p&gt;</comment>
                    <comment id="12854071" author="roman.werpachowski" created="Tue, 6 Apr 2010 17:20:11 +0000"  >&lt;p&gt;I would keep using orthoTolerance as it is used now:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;292                if (maxCosine &amp;lt;= orthoTolerance) {&lt;br/&gt;
293                    // convergence has been reached&lt;br/&gt;
294                    return new VectorialPointValuePair(point, objective);&lt;br/&gt;
295                }&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;and then use costRelativeTolerance &amp;amp; parRelativeTolerance if and only if the convergence checker is null, otherwise use the convergence checker and ignore {costRelativeTolerance, parRelativeTolerance}.&lt;/p&gt;

&lt;p&gt;What I am missing now is the ability to bail out if the absolute distance from the target falls below some value (&quot;close enough&quot;).&lt;/p&gt;</comment>
                    <comment id="12870836" author="mprice" created="Mon, 24 May 2010 20:50:18 +0000"  >&lt;p&gt;I&apos;ve spent that last few days trying to find a good curve fitting library for Java and got excited when I learned of Commons Math.  Unfortunately, its curve fitting is very unreliable.  I&apos;m hoping that this bug is what is causing the problems that I&apos;m seeing.  I&apos;m comparing data from NIST and results from DataFitX and it is apparent that Commons Math is not yet up to the task.  My fingers are crossed that its quality in the curve fitting area will be improved in the near future.  Keep up the good work Apache.&lt;/p&gt;

&lt;p&gt;I&apos;ve opened an issue about the problems I&apos;m seeing, &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-372&quot;&gt;https://issues.apache.org/jira/browse/MATH-372&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12871022" author="roman.werpachowski" created="Tue, 25 May 2010 06:37:03 +0000"  >&lt;p&gt;Double check how you use it, Matt. I have succesfully used this curve fitting in production.&lt;/p&gt;</comment>
                    <comment id="12871268" author="luc" created="Tue, 25 May 2010 17:49:58 +0000"  >&lt;p&gt;Matt, could you please describe the problem you encounter more precisely (i.e. with numerical examples) and preferably in a new JIRA issue ? We will check if the two problems are related and link the issues afterwards if it appears they are.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                    <comment id="12871296" author="mprice" created="Tue, 25 May 2010 19:10:09 +0000"  >&lt;p&gt;It&apos;s good to see such quick responses.  I&apos;ll open a new JIRA issue and spend some time putting together code, data and a detailed description of the problem I&apos;m seeing.  Thanks Apache for all your hard work.&lt;/p&gt;

&lt;p&gt;I&apos;ve opened an issue regarding the problem, &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-372&quot;&gt;https://issues.apache.org/jira/browse/MATH-372&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12873317" author="luc" created="Sat, 29 May 2010 18:16:50 +0000"  >&lt;p&gt;Fixed in subversion repository as of r949433.&lt;br/&gt;
Thanks for reporting the issue&lt;/p&gt;</comment>
                    <comment id="12873319" author="roman.werpachowski" created="Sat, 29 May 2010 18:27:53 +0000"  >&lt;p&gt;Thank you.&lt;/p&gt;</comment>
                    <comment id="13010332" author="luc" created="Wed, 23 Mar 2011 20:02:00 +0000"  >&lt;p&gt;Closing issue as it was included in version 2.2, which has been released&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310000">
                <name>Duplicate</name>
                                                <inwardlinks description="is duplicated by">
                            <issuelink>
            <issuekey id="12471107">MATH-404</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 6 Apr 2010 16:49:36 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[MATH-288] SimplexSolver not working as expected 2</title>
                <link>https://issues.apache.org/jira/browse/MATH-288</link>
                <project id="12310485" key="MATH">Commons Math</project>
                        <description>&lt;p&gt;SimplexSolver didn&apos;t find the optimal solution.&lt;/p&gt;

&lt;p&gt;Program for Lpsolve:&lt;br/&gt;
=====================&lt;br/&gt;
/* Objective function */&lt;br/&gt;
max: 7 a 3 b;&lt;/p&gt;

&lt;p&gt;/* Constraints */&lt;br/&gt;
R1: +3 a -5 c &amp;lt;= 0;&lt;br/&gt;
R2: +2 a -5 d &amp;lt;= 0;&lt;br/&gt;
R3: +2 b -5 c &amp;lt;= 0;&lt;br/&gt;
R4: +3 b -5 d &amp;lt;= 0;&lt;br/&gt;
R5: +3 a +2 b &amp;lt;= 5;&lt;br/&gt;
R6: +2 a +3 b &amp;lt;= 5;&lt;/p&gt;

&lt;p&gt;/* Variable bounds */&lt;br/&gt;
a &amp;lt;= 1;&lt;br/&gt;
b &amp;lt;= 1;&lt;br/&gt;
=====================&lt;br/&gt;
Results(correct): a = 1, b = 1, value = 10&lt;/p&gt;


&lt;p&gt;Program for SimplexSolve:&lt;br/&gt;
=====================&lt;br/&gt;
LinearObjectiveFunction kritFcia = new LinearObjectiveFunction(new double[]{7, 3, 0, 0}, 0);&lt;br/&gt;
Collection&amp;lt;LinearConstraint&amp;gt; podmienky = new ArrayList&amp;lt;LinearConstraint&amp;gt;();&lt;br/&gt;
podmienky.add(new LinearConstraint(new double[]{1, 0, 0, 0}, Relationship.LEQ, 1));&lt;br/&gt;
podmienky.add(new LinearConstraint(new double[]{0, 1, 0, 0}, Relationship.LEQ, 1));&lt;br/&gt;
podmienky.add(new LinearConstraint(new double[]{3, 0, -5, 0}, Relationship.LEQ, 0));&lt;br/&gt;
podmienky.add(new LinearConstraint(new double[]{2, 0, 0, -5}, Relationship.LEQ, 0));&lt;br/&gt;
podmienky.add(new LinearConstraint(new double[]{0, 2, -5, 0}, Relationship.LEQ, 0));&lt;br/&gt;
podmienky.add(new LinearConstraint(new double[]{0, 3, 0, -5}, Relationship.LEQ, 0));&lt;br/&gt;
podmienky.add(new LinearConstraint(new double[]{3, 2, 0, 0}, Relationship.LEQ, 5));&lt;br/&gt;
podmienky.add(new LinearConstraint(new double[]{2, 3, 0, 0}, Relationship.LEQ, 5));&lt;br/&gt;
SimplexSolver solver = new SimplexSolver();&lt;br/&gt;
RealPointValuePair result = solver.optimize(kritFcia, podmienky, GoalType.MAXIMIZE, true);&lt;br/&gt;
=====================&lt;br/&gt;
Results(incorrect): a = 1, b = 0.5, value = 8.5&lt;/p&gt;

&lt;p&gt;P.S. I used the latest software from the repository (including &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-286&quot; title=&quot;SimplexSolver not working as expected?&quot;&gt;&lt;del&gt;MATH-286&lt;/del&gt;&lt;/a&gt; fix).&lt;/p&gt;</description>
                <environment>&lt;p&gt;Java 1.6.0_13 on Windows XP 32-bit &lt;/p&gt;</environment>
            <key id="12433883">MATH-288</key>
            <summary>SimplexSolver not working as expected 2</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kefa">Stefan Radacovsky</reporter>
                        <labels>
                    </labels>
                <created>Mon, 24 Aug 2009 22:31:11 +0000</created>
                <updated>Wed, 14 Apr 2010 00:30:17 +0000</updated>
                    <resolved>Tue, 25 Aug 2009 18:10:08 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>2.1</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                          <timeoriginalestimate seconds="28800">8h</timeoriginalestimate>
                    <timeestimate seconds="28800">8h</timeestimate>
                                  <comments>
                    <comment id="12747167" author="bmccann" created="Tue, 25 Aug 2009 01:06:07 +0000"  >&lt;p&gt;Thanks for the bug report.  I&apos;ve confirmed this is an issue.&lt;/p&gt;

&lt;p&gt;Here&apos;s a slightly smaller version of the problem that causes the same bug, which might be easier for debugging:&lt;/p&gt;

&lt;p&gt;MAX 7 a + 3 b&lt;br/&gt;
s.t.&lt;br/&gt;
3 a -5 c &amp;lt;= 0&lt;br/&gt;
2 a -5 d &amp;lt;= 0&lt;br/&gt;
3 b -5 d &amp;lt;= 0&lt;br/&gt;
a &amp;lt;= 1&lt;br/&gt;
b &amp;lt;= 1&lt;/p&gt;

&lt;p&gt;        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );&lt;br/&gt;
        Collection&amp;lt;LinearConstraint&amp;gt; constraints = new ArrayList&amp;lt;LinearConstraint&amp;gt;();&lt;br/&gt;
        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));&lt;br/&gt;
        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));&lt;br/&gt;
        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));&lt;br/&gt;
        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));&lt;br/&gt;
        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));&lt;/p&gt;

&lt;p&gt;        SimplexSolver solver = new SimplexSolver();&lt;br/&gt;
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);&lt;br/&gt;
        assertEquals(10.0, solution.getValue(), .0000001);&lt;/p&gt;</comment>
                    <comment id="12747192" author="bmccann" created="Tue, 25 Aug 2009 02:17:05 +0000"  >&lt;p&gt;Patch attached.  It was a 1 character bug.  I was saying to only do the minimum ratio test if the entry is &amp;gt;= 0, but it should have been &amp;gt; 0 (dividing by 0 is never good :o)&lt;br/&gt;
Thanks again for the bug report.&lt;/p&gt;</comment>
                    <comment id="12747531" author="luc" created="Tue, 25 Aug 2009 18:10:08 +0000"  >&lt;p&gt;resolved in subversion repository as of r807738&lt;br/&gt;
patch applied (except for debug print function)&lt;br/&gt;
thanks for the repoart and thanks for the patch&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12417557" name="SimplexSolver.patch" size="822" author="bmccann" created="Tue, 25 Aug 2009 02:17:05 +0000" />
                    <attachment id="12417558" name="SimplexSolverTest.patch" size="3232" author="bmccann" created="Tue, 25 Aug 2009 02:17:05 +0000" />
                    <attachment id="12417559" name="SimplexTableau.patch" size="1877" author="bmccann" created="Tue, 25 Aug 2009 02:17:05 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 25 Aug 2009 01:06:07 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>